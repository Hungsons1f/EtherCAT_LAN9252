
EtherCATL4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afcc  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cec  0800b18c  0800b18c  0001b18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be78  0800be78  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800be78  0800be78  0001be78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be80  0800be80  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be80  0800be80  0001be80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be84  0800be84  0001be84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  0800be88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008ec  200000d8  0800bf5c  000200d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200009c4  0800bf5c  000209c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b3bd  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003736  00000000  00000000  0003b4c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001320  00000000  00000000  0003ebf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001180  00000000  00000000  0003ff18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d0c4  00000000  00000000  00041098  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010f05  00000000  00000000  0006e15c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00106a79  00000000  00000000  0007f061  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00185ada  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000578c  00000000  00000000  00185b58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000d8 	.word	0x200000d8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800b174 	.word	0x0800b174

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000dc 	.word	0x200000dc
 80001fc:	0800b174 	.word	0x0800b174

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <ESC_pre_objecthandler>:
uint32_t ESC_pre_objecthandler (uint16_t index,
      uint8_t subindex,
      void * data,
      size_t size,
      uint16_t flags)
{
 80005a0:	b590      	push	{r4, r7, lr}
 80005a2:	b089      	sub	sp, #36	; 0x24
 80005a4:	af02      	add	r7, sp, #8
 80005a6:	60ba      	str	r2, [r7, #8]
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	4603      	mov	r3, r0
 80005ac:	81fb      	strh	r3, [r7, #14]
 80005ae:	460b      	mov	r3, r1
 80005b0:	737b      	strb	r3, [r7, #13]
   uint32_t abort = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]

   if (IS_RXPDO (index) ||
 80005b6:	89fb      	ldrh	r3, [r7, #14]
 80005b8:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 80005bc:	d303      	bcc.n	80005c6 <ESC_pre_objecthandler+0x26>
 80005be:	89fb      	ldrh	r3, [r7, #14]
 80005c0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80005c4:	d311      	bcc.n	80005ea <ESC_pre_objecthandler+0x4a>
 80005c6:	89fb      	ldrh	r3, [r7, #14]
 80005c8:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 80005cc:	d303      	bcc.n	80005d6 <ESC_pre_objecthandler+0x36>
       IS_TXPDO (index) ||
 80005ce:	89fb      	ldrh	r3, [r7, #14]
 80005d0:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80005d4:	d309      	bcc.n	80005ea <ESC_pre_objecthandler+0x4a>
 80005d6:	89fb      	ldrh	r3, [r7, #14]
 80005d8:	f641 4212 	movw	r2, #7186	; 0x1c12
 80005dc:	4293      	cmp	r3, r2
 80005de:	d004      	beq.n	80005ea <ESC_pre_objecthandler+0x4a>
       index == RX_PDO_OBJIDX ||
 80005e0:	89fb      	ldrh	r3, [r7, #14]
 80005e2:	f641 4213 	movw	r2, #7187	; 0x1c13
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d10b      	bne.n	8000602 <ESC_pre_objecthandler+0x62>
       index == TX_PDO_OBJIDX)
   {
      if (subindex > 0 && COE_maxSub (index) != 0)
 80005ea:	7b7b      	ldrb	r3, [r7, #13]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d008      	beq.n	8000602 <ESC_pre_objecthandler+0x62>
 80005f0:	89fb      	ldrh	r3, [r7, #14]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 fa3e 	bl	8003a74 <COE_maxSub>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <ESC_pre_objecthandler+0x62>
      {
         abort = ABORT_SUBINDEX0_NOT_ZERO;
 80005fe:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <ESC_pre_objecthandler+0x88>)
 8000600:	617b      	str	r3, [r7, #20]
      }
   }

   if (ESCvar.pre_object_download_hook)
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <ESC_pre_objecthandler+0x8c>)
 8000604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000606:	2b00      	cmp	r3, #0
 8000608:	d009      	beq.n	800061e <ESC_pre_objecthandler+0x7e>
   {
      abort = (ESCvar.pre_object_download_hook) (index,
 800060a:	4b08      	ldr	r3, [pc, #32]	; (800062c <ESC_pre_objecthandler+0x8c>)
 800060c:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800060e:	7b79      	ldrb	r1, [r7, #13]
 8000610:	89f8      	ldrh	r0, [r7, #14]
 8000612:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	68ba      	ldr	r2, [r7, #8]
 800061a:	47a0      	blx	r4
 800061c:	6178      	str	r0, [r7, #20]
            data,
            size,
            flags);
   }

   return abort;
 800061e:	697b      	ldr	r3, [r7, #20]
}
 8000620:	4618      	mov	r0, r3
 8000622:	371c      	adds	r7, #28
 8000624:	46bd      	mov	sp, r7
 8000626:	bd90      	pop	{r4, r7, pc}
 8000628:	06010003 	.word	0x06010003
 800062c:	20000180 	.word	0x20000180

08000630 <ESC_objecthandler>:
 *
 * @param[in] index      = index of SDO download request to handle
 * @param[in] sub-index  = sub-index of SDO download request to handle
 */
void ESC_objecthandler (uint16_t index, uint8_t subindex, uint16_t flags)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	80fb      	strh	r3, [r7, #6]
 800063a:	460b      	mov	r3, r1
 800063c:	717b      	strb	r3, [r7, #5]
 800063e:	4613      	mov	r3, r2
 8000640:	807b      	strh	r3, [r7, #2]
   if (ESCvar.post_object_download_hook != NULL)
 8000642:	4b07      	ldr	r3, [pc, #28]	; (8000660 <ESC_objecthandler+0x30>)
 8000644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000646:	2b00      	cmp	r3, #0
 8000648:	d005      	beq.n	8000656 <ESC_objecthandler+0x26>
   {
      (ESCvar.post_object_download_hook)(index, subindex, flags);
 800064a:	4b05      	ldr	r3, [pc, #20]	; (8000660 <ESC_objecthandler+0x30>)
 800064c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800064e:	887a      	ldrh	r2, [r7, #2]
 8000650:	7979      	ldrb	r1, [r7, #5]
 8000652:	88f8      	ldrh	r0, [r7, #6]
 8000654:	4798      	blx	r3
   }
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000180 	.word	0x20000180

08000664 <APP_safeoutput>:

/** Hook called from the slave stack ESC_stopoutputs to act on state changes
 * forcing us to stop outputs. Here we can set them to a safe state.
 */
void APP_safeoutput (void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
   DPRINT ("APP_safeoutput\n");
 8000668:	4805      	ldr	r0, [pc, #20]	; (8000680 <APP_safeoutput+0x1c>)
 800066a:	f00a f919 	bl	800a8a0 <puts>

   if(ESCvar.safeoutput_override != NULL)
 800066e:	4b05      	ldr	r3, [pc, #20]	; (8000684 <APP_safeoutput+0x20>)
 8000670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000672:	2b00      	cmp	r3, #0
 8000674:	d002      	beq.n	800067c <APP_safeoutput+0x18>
   {
      (ESCvar.safeoutput_override)();
 8000676:	4b03      	ldr	r3, [pc, #12]	; (8000684 <APP_safeoutput+0x20>)
 8000678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800067a:	4798      	blx	r3
   }
}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	0800b18c 	.word	0x0800b18c
 8000684:	20000180 	.word	0x20000180

08000688 <TXPDO_update>:

/** Write local process data to Sync Manager 3, Master Inputs.
 */
void TXPDO_update (void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
   if(ESCvar.txpdo_override != NULL)
 800068c:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <TXPDO_update+0x3c>)
 800068e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000690:	2b00      	cmp	r3, #0
 8000692:	d003      	beq.n	800069c <TXPDO_update+0x14>
   {
      (ESCvar.txpdo_override)();
 8000694:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <TXPDO_update+0x3c>)
 8000696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000698:	4798      	blx	r3
      {
         COE_pdoPack (txpdo, ESCvar.sm3mappings, SMmap3);
      }
      ESC_write (ESC_SM3_sma, txpdo, ESCvar.ESC_SM3_sml);
   }
}
 800069a:	e010      	b.n	80006be <TXPDO_update+0x36>
         COE_pdoPack (txpdo, ESCvar.sm3mappings, SMmap3);
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <TXPDO_update+0x3c>)
 800069e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80006a2:	4a09      	ldr	r2, [pc, #36]	; (80006c8 <TXPDO_update+0x40>)
 80006a4:	4619      	mov	r1, r3
 80006a6:	4809      	ldr	r0, [pc, #36]	; (80006cc <TXPDO_update+0x44>)
 80006a8:	f003 f92e 	bl	8003908 <COE_pdoPack>
      ESC_write (ESC_SM3_sma, txpdo, ESCvar.ESC_SM3_sml);
 80006ac:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <TXPDO_update+0x3c>)
 80006ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80006b2:	461a      	mov	r2, r3
 80006b4:	4905      	ldr	r1, [pc, #20]	; (80006cc <TXPDO_update+0x44>)
 80006b6:	f44f 508c 	mov.w	r0, #4480	; 0x1180
 80006ba:	f004 f837 	bl	800472c <ESC_write>
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000180 	.word	0x20000180
 80006c8:	200003ec 	.word	0x200003ec
 80006cc:	20000128 	.word	0x20000128

080006d0 <RXPDO_update>:

/** Read Sync Manager 2 to local process data, Master Outputs.
 */
void RXPDO_update (void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
   if(ESCvar.rxpdo_override != NULL)
 80006d4:	4b0d      	ldr	r3, [pc, #52]	; (800070c <RXPDO_update+0x3c>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d003      	beq.n	80006e4 <RXPDO_update+0x14>
   {
      (ESCvar.rxpdo_override)();
 80006dc:	4b0b      	ldr	r3, [pc, #44]	; (800070c <RXPDO_update+0x3c>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	4798      	blx	r3
      if (MAX_MAPPINGS_SM2 > 0)
      {
         COE_pdoUnpack (rxpdo, ESCvar.sm2mappings, SMmap2);
      }
   }
}
 80006e2:	e010      	b.n	8000706 <RXPDO_update+0x36>
      ESC_read (ESC_SM2_sma, rxpdo, ESCvar.ESC_SM2_sml);
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <RXPDO_update+0x3c>)
 80006e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80006ea:	461a      	mov	r2, r3
 80006ec:	4908      	ldr	r1, [pc, #32]	; (8000710 <RXPDO_update+0x40>)
 80006ee:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 80006f2:	f003 ffb9 	bl	8004668 <ESC_read>
         COE_pdoUnpack (rxpdo, ESCvar.sm2mappings, SMmap2);
 80006f6:	4b05      	ldr	r3, [pc, #20]	; (800070c <RXPDO_update+0x3c>)
 80006f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006fc:	4a05      	ldr	r2, [pc, #20]	; (8000714 <RXPDO_update+0x44>)
 80006fe:	4619      	mov	r1, r3
 8000700:	4803      	ldr	r0, [pc, #12]	; (8000710 <RXPDO_update+0x40>)
 8000702:	f003 f95d 	bl	80039c0 <COE_pdoUnpack>
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000180 	.word	0x20000180
 8000710:	200000f8 	.word	0x200000f8
 8000714:	200003cc 	.word	0x200003cc

08000718 <DIG_process>:
/* Function to update local I/O, call read ethercat outputs, call
 * write ethercat inputs. Implement watch-dog counter to count-out if we have
 * made state change affecting the App.state.
 */
void DIG_process (uint8_t flags)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
   /* Handle watchdog */
   if((flags & DIG_PROCESS_WD_FLAG) > 0)
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	f003 0304 	and.w	r3, r3, #4
 8000728:	2b00      	cmp	r3, #0
 800072a:	dd44      	ble.n	80007b6 <DIG_process+0x9e>
   {
      if (CC_ATOMIC_GET(watchdog) > 0)
 800072c:	4b4b      	ldr	r3, [pc, #300]	; (800085c <DIG_process+0x144>)
 800072e:	f3bf 8f5b 	dmb	ish
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f3bf 8f5b 	dmb	ish
 8000738:	2b00      	cmp	r3, #0
 800073a:	dd0c      	ble.n	8000756 <DIG_process+0x3e>
      {
         CC_ATOMIC_SUB(watchdog, 1);
 800073c:	4b47      	ldr	r3, [pc, #284]	; (800085c <DIG_process+0x144>)
 800073e:	f3bf 8f5b 	dmb	ish
 8000742:	e853 2f00 	ldrex	r2, [r3]
 8000746:	f102 32ff 	add.w	r2, r2, #4294967295
 800074a:	e843 2100 	strex	r1, r2, [r3]
 800074e:	2900      	cmp	r1, #0
 8000750:	d1f7      	bne.n	8000742 <DIG_process+0x2a>
 8000752:	f3bf 8f5b 	dmb	ish
      }

      if ((CC_ATOMIC_GET(watchdog) <= 0) &&
 8000756:	4b41      	ldr	r3, [pc, #260]	; (800085c <DIG_process+0x144>)
 8000758:	f3bf 8f5b 	dmb	ish
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f3bf 8f5b 	dmb	ish
 8000762:	2b00      	cmp	r3, #0
 8000764:	dc12      	bgt.n	800078c <DIG_process+0x74>
          ((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0))
 8000766:	4b3e      	ldr	r3, [pc, #248]	; (8000860 <DIG_process+0x148>)
 8000768:	f3bf 8f5b 	dmb	ish
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	f3bf 8f5b 	dmb	ish
 8000772:	b2db      	uxtb	r3, r3
 8000774:	f003 0302 	and.w	r3, r3, #2
      if ((CC_ATOMIC_GET(watchdog) <= 0) &&
 8000778:	2b00      	cmp	r3, #0
 800077a:	dd07      	ble.n	800078c <DIG_process+0x74>
      {
         DPRINT("DIG_process watchdog expired\n");
 800077c:	4839      	ldr	r0, [pc, #228]	; (8000864 <DIG_process+0x14c>)
 800077e:	f00a f88f 	bl	800a8a0 <puts>
         ESC_ALstatusgotoerror((ESCsafeop | ESCerror), ALERR_WATCHDOG);
 8000782:	211b      	movs	r1, #27
 8000784:	2014      	movs	r0, #20
 8000786:	f000 f91b 	bl	80009c0 <ESC_ALstatusgotoerror>
      {
 800078a:	e014      	b.n	80007b6 <DIG_process+0x9e>
      }
      else if(((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) == 0))
 800078c:	4b34      	ldr	r3, [pc, #208]	; (8000860 <DIG_process+0x148>)
 800078e:	f3bf 8f5b 	dmb	ish
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	f3bf 8f5b 	dmb	ish
 8000798:	b2db      	uxtb	r3, r3
 800079a:	f003 0302 	and.w	r3, r3, #2
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d109      	bne.n	80007b6 <DIG_process+0x9e>
      {
         CC_ATOMIC_SET(watchdog, ESCvar.watchdogcnt);
 80007a2:	4b31      	ldr	r3, [pc, #196]	; (8000868 <DIG_process+0x150>)
 80007a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80007a8:	461a      	mov	r2, r3
 80007aa:	4b2c      	ldr	r3, [pc, #176]	; (800085c <DIG_process+0x144>)
 80007ac:	f3bf 8f5b 	dmb	ish
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	f3bf 8f5b 	dmb	ish
      }
   }

   /* Handle Outputs */
   if ((flags & DIG_PROCESS_OUTPUTS_FLAG) > 0)
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	f003 0302 	and.w	r3, r3, #2
 80007bc:	2b00      	cmp	r3, #0
 80007be:	dd2b      	ble.n	8000818 <DIG_process+0x100>
   {
      if(((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 80007c0:	4b27      	ldr	r3, [pc, #156]	; (8000860 <DIG_process+0x148>)
 80007c2:	f3bf 8f5b 	dmb	ish
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	f3bf 8f5b 	dmb	ish
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	dd16      	ble.n	8000804 <DIG_process+0xec>
         (ESCvar.ALevent & ESCREG_ALEVENT_SM2))
 80007d6:	4b24      	ldr	r3, [pc, #144]	; (8000868 <DIG_process+0x150>)
 80007d8:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 80007dc:	b29b      	uxth	r3, r3
 80007de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d00e      	beq.n	8000804 <DIG_process+0xec>
      {
         RXPDO_update();
 80007e6:	f7ff ff73 	bl	80006d0 <RXPDO_update>
         CC_ATOMIC_SET(watchdog, ESCvar.watchdogcnt);
 80007ea:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <DIG_process+0x150>)
 80007ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80007f0:	461a      	mov	r2, r3
 80007f2:	4b1a      	ldr	r3, [pc, #104]	; (800085c <DIG_process+0x144>)
 80007f4:	f3bf 8f5b 	dmb	ish
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	f3bf 8f5b 	dmb	ish
         /* Set outputs */
         cb_set_outputs();
 80007fe:	f004 f891 	bl	8004924 <cb_set_outputs>
 8000802:	e009      	b.n	8000818 <DIG_process+0x100>
      }
      else if (ESCvar.ALevent & ESCREG_ALEVENT_SM2)
 8000804:	4b18      	ldr	r3, [pc, #96]	; (8000868 <DIG_process+0x150>)
 8000806:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 800080a:	b29b      	uxth	r3, r3
 800080c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <DIG_process+0x100>
      {
         RXPDO_update();
 8000814:	f7ff ff5c 	bl	80006d0 <RXPDO_update>
      }
   }

   /* Call application */
   if ((flags & DIG_PROCESS_APP_HOOK_FLAG) > 0)
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	f003 0308 	and.w	r3, r3, #8
 800081e:	2b00      	cmp	r3, #0
 8000820:	dd06      	ble.n	8000830 <DIG_process+0x118>
   {
      /* Call application callback if set */
      if (ESCvar.application_hook != NULL)
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <DIG_process+0x150>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	2b00      	cmp	r3, #0
 8000828:	d002      	beq.n	8000830 <DIG_process+0x118>
      {
         (ESCvar.application_hook)();
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <DIG_process+0x150>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4798      	blx	r3
      }
   }

   /* Handle Inputs */
   if ((flags & DIG_PROCESS_INPUTS_FLAG) > 0)
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	2b00      	cmp	r3, #0
 8000838:	dd0c      	ble.n	8000854 <DIG_process+0x13c>
   {
      if(CC_ATOMIC_GET(ESCvar.App.state) > 0)
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <DIG_process+0x148>)
 800083c:	f3bf 8f5b 	dmb	ish
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	f3bf 8f5b 	dmb	ish
 8000846:	b2db      	uxtb	r3, r3
 8000848:	2b00      	cmp	r3, #0
 800084a:	d003      	beq.n	8000854 <DIG_process+0x13c>
      {
         /* Update inputs */
         cb_get_inputs();
 800084c:	f004 f832 	bl	80048b4 <cb_get_inputs>
         TXPDO_update();
 8000850:	f7ff ff1a 	bl	8000688 <TXPDO_update>
      }
   }
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200000f4 	.word	0x200000f4
 8000860:	2000024b 	.word	0x2000024b
 8000864:	0800b1a4 	.word	0x0800b1a4
 8000868:	20000180 	.word	0x20000180

0800086c <ecat_slv_poll>:
 * Polling function. It should be called periodically for an application 
 * when only SM2/DC interrupt is active.
 * Read and handle events for the EtherCAT state, status, mailbox and eeprom.
 */
void ecat_slv_poll (void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
   /* Read local time from ESC*/
   ESC_read (ESCREG_LOCALTIME, (void *) &ESCvar.Time, sizeof (ESCvar.Time));
 8000870:	2204      	movs	r2, #4
 8000872:	4911      	ldr	r1, [pc, #68]	; (80008b8 <ecat_slv_poll+0x4c>)
 8000874:	f44f 6011 	mov.w	r0, #2320	; 0x910
 8000878:	f003 fef6 	bl	8004668 <ESC_read>
   ESCvar.Time = etohl (ESCvar.Time);
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <ecat_slv_poll+0x50>)
 800087e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000882:	4a0e      	ldr	r2, [pc, #56]	; (80008bc <ecat_slv_poll+0x50>)
 8000884:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4

   /* Check the state machine */
   ESC_state();
 8000888:	f000 ffd0 	bl	800182c <ESC_state>
   /* Check the SM activation event */
   ESC_sm_act_event();
 800088c:	f000 ff1a 	bl	80016c4 <ESC_sm_act_event>

   /* Check mailboxes */
   if (ESC_mbxprocess())
 8000890:	f000 fc78 	bl	8001184 <ESC_mbxprocess>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d005      	beq.n	80008a6 <ecat_slv_poll+0x3a>
   {
      ESC_coeprocess();
 800089a:	f002 fbe5 	bl	8003068 <ESC_coeprocess>
#if USE_FOE
      ESC_foeprocess();
 800089e:	f003 fc3b 	bl	8004118 <ESC_foeprocess>
#endif
#if USE_EOE
      ESC_eoeprocess();
#endif
      ESC_xoeprocess();
 80008a2:	f000 fda9 	bl	80013f8 <ESC_xoeprocess>
#if USE_EOE
   ESC_eoeprocess_tx();
#endif

   /* Call emulated eeprom handler if set */
   if (ESCvar.esc_hw_eep_handler != NULL)
 80008a6:	4b05      	ldr	r3, [pc, #20]	; (80008bc <ecat_slv_poll+0x50>)
 80008a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d002      	beq.n	80008b4 <ecat_slv_poll+0x48>
   {
      (ESCvar.esc_hw_eep_handler)();
 80008ae:	4b03      	ldr	r3, [pc, #12]	; (80008bc <ecat_slv_poll+0x50>)
 80008b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80008b2:	4798      	blx	r3
   }
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000244 	.word	0x20000244
 80008bc:	20000180 	.word	0x20000180

080008c0 <ecat_slv>:

/*
 * Poll all events in a free-run application
 */
void ecat_slv (void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
   ecat_slv_poll();
 80008c4:	f7ff ffd2 	bl	800086c <ecat_slv_poll>
   DIG_process(DIG_PROCESS_WD_FLAG | DIG_PROCESS_OUTPUTS_FLAG |
 80008c8:	200f      	movs	r0, #15
 80008ca:	f7ff ff25 	bl	8000718 <DIG_process>
         DIG_PROCESS_APP_HOOK_FLAG | DIG_PROCESS_INPUTS_FLAG);
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
	...

080008d4 <ecat_slv_init>:

/*
 * Initialize the slave stack.
 */
void ecat_slv_init (esc_cfg_t * config)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
   DPRINT ("Slave stack init started\n");
 80008dc:	4819      	ldr	r0, [pc, #100]	; (8000944 <ecat_slv_init+0x70>)
 80008de:	f009 ffdf 	bl	800a8a0 <puts>

   /* Init watchdog */
   watchdog = config->watchdog_cnt;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	689b      	ldr	r3, [r3, #8]
 80008e6:	4a18      	ldr	r2, [pc, #96]	; (8000948 <ecat_slv_init+0x74>)
 80008e8:	6013      	str	r3, [r2, #0]

   /* Call stack configuration */
   ESC_config (config);
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f001 f9e4 	bl	8001cb8 <ESC_config>
   /* Call HW init */
   ESC_init (config);
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f003 ff7d 	bl	80047f0 <ESC_init>

   /*  wait until ESC is started up */
   while ((ESCvar.DLstatus & 0x0001) == 0)
 80008f6:	e00b      	b.n	8000910 <ecat_slv_init+0x3c>
   {
      ESC_read (ESCREG_DLSTATUS, (void *) &ESCvar.DLstatus,
 80008f8:	2202      	movs	r2, #2
 80008fa:	4914      	ldr	r1, [pc, #80]	; (800094c <ecat_slv_init+0x78>)
 80008fc:	f44f 7088 	mov.w	r0, #272	; 0x110
 8000900:	f003 feb2 	bl	8004668 <ESC_read>
                sizeof (ESCvar.DLstatus));
      ESCvar.DLstatus = etohs (ESCvar.DLstatus);
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <ecat_slv_init+0x7c>)
 8000906:	f8b3 2076 	ldrh.w	r2, [r3, #118]	; 0x76
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <ecat_slv_init+0x7c>)
 800090c:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
   while ((ESCvar.DLstatus & 0x0001) == 0)
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <ecat_slv_init+0x7c>)
 8000912:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	2b00      	cmp	r3, #0
 800091c:	d0ec      	beq.n	80008f8 <ecat_slv_init+0x24>
   }

#if USE_FOE
   /* Init FoE */
   FOE_init();
 800091e:	f003 fa45 	bl	8003dac <FOE_init>
   /* Init EoE */
   EOE_init();
#endif

   /* reset ESC to init state */
   ESC_ALstatus (ESCinit);
 8000922:	2001      	movs	r0, #1
 8000924:	f000 f830 	bl	8000988 <ESC_ALstatus>
   ESC_ALerror (ALERR_NONE);
 8000928:	2000      	movs	r0, #0
 800092a:	f000 f813 	bl	8000954 <ESC_ALerror>
   ESC_stopmbx();
 800092e:	f000 fa7d 	bl	8000e2c <ESC_stopmbx>
   ESC_stopinput();
 8000932:	f000 fe71 	bl	8001618 <ESC_stopinput>
   ESC_stopoutput();
 8000936:	f000 fead 	bl	8001694 <ESC_stopoutput>
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	0800b1c8 	.word	0x0800b1c8
 8000948:	200000f4 	.word	0x200000f4
 800094c:	200001f6 	.word	0x200001f6
 8000950:	20000180 	.word	0x20000180

08000954 <ESC_ALerror>:
/** Write AL Status Code to the ESC.
 *
 * @param[in] errornumber   = Write an by EtherCAT specified Error number register 0x134 AL Status Code
 */
void ESC_ALerror (uint16_t errornumber)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	80fb      	strh	r3, [r7, #6]
   uint16_t dummy;
   ESCvar.ALerror = errornumber;
 800095e:	4a09      	ldr	r2, [pc, #36]	; (8000984 <ESC_ALerror+0x30>)
 8000960:	88fb      	ldrh	r3, [r7, #6]
 8000962:	f8a2 3074 	strh.w	r3, [r2, #116]	; 0x74
   dummy = htoes (errornumber);
 8000966:	88fb      	ldrh	r3, [r7, #6]
 8000968:	81fb      	strh	r3, [r7, #14]
   ESC_write (ESCREG_ALERROR, &dummy, sizeof (dummy));
 800096a:	f107 030e 	add.w	r3, r7, #14
 800096e:	2202      	movs	r2, #2
 8000970:	4619      	mov	r1, r3
 8000972:	f44f 709a 	mov.w	r0, #308	; 0x134
 8000976:	f003 fed9 	bl	800472c <ESC_write>
}
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000180 	.word	0x20000180

08000988 <ESC_ALstatus>:
 *
 * @param[in] status   = Write current slave status to register 0x130 AL Status
 * reflecting actual state and error indication if present
 */
void ESC_ALstatus (uint8_t status)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]
   uint16_t dummy;
   ESCvar.ALstatus = status;
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	b29a      	uxth	r2, r3
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <ESC_ALstatus+0x34>)
 8000998:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
   dummy = htoes ((uint16_t) status);
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	b29b      	uxth	r3, r3
 80009a0:	81fb      	strh	r3, [r7, #14]
   ESC_write (ESCREG_ALSTATUS, &dummy, sizeof (dummy));
 80009a2:	f107 030e 	add.w	r3, r7, #14
 80009a6:	2202      	movs	r2, #2
 80009a8:	4619      	mov	r1, r3
 80009aa:	f44f 7098 	mov.w	r0, #304	; 0x130
 80009ae:	f003 febd 	bl	800472c <ESC_write>
}
 80009b2:	bf00      	nop
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000180 	.word	0x20000180

080009c0 <ESC_ALstatusgotoerror>:
 * reflecting actual state and error indication if present
 * @param[in] errornumber   = Write an by EtherCAT specified Error number
 * register 0x134 AL Status Code
 */
void ESC_ALstatusgotoerror (uint8_t status, uint16_t errornumber)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	460a      	mov	r2, r1
 80009ca:	71fb      	strb	r3, [r7, #7]
 80009cc:	4613      	mov	r3, r2
 80009ce:	80bb      	strh	r3, [r7, #4]
   uint8_t an, as;

   if(status & ESCop)
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	f003 0308 	and.w	r3, r3, #8
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d145      	bne.n	8000a66 <ESC_ALstatusgotoerror+0xa6>
   {
      /* Erroneous input, ignore */
      return;
   }
   /* Mask error ack of current state */
   as = ESCvar.ALstatus & ESCREG_AL_ERRACKMASK;
 80009da:	4b25      	ldr	r3, [pc, #148]	; (8000a70 <ESC_ALstatusgotoerror+0xb0>)
 80009dc:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	f003 030f 	and.w	r3, r3, #15
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	73bb      	strb	r3, [r7, #14]
   an = as;
 80009ea:	7bbb      	ldrb	r3, [r7, #14]
 80009ec:	73fb      	strb	r3, [r7, #15]
   /* Set the state transition, new state in high bits and old in bits  */
   as = ((status & ESCREG_AL_ERRACKMASK) << 4) | (as & 0x0f);
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	011b      	lsls	r3, r3, #4
 80009f2:	b25a      	sxtb	r2, r3
 80009f4:	7bbb      	ldrb	r3, [r7, #14]
 80009f6:	b25b      	sxtb	r3, r3
 80009f8:	f003 030f 	and.w	r3, r3, #15
 80009fc:	b25b      	sxtb	r3, r3
 80009fe:	4313      	orrs	r3, r2
 8000a00:	b25b      	sxtb	r3, r3
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	73bb      	strb	r3, [r7, #14]
   /* Call post state change hook case it have been configured  */
   if (ESCvar.pre_state_change_hook != NULL)
 8000a06:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <ESC_ALstatusgotoerror+0xb0>)
 8000a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d007      	beq.n	8000a1e <ESC_ALstatusgotoerror+0x5e>
   {
      ESCvar.pre_state_change_hook (&as, &an);
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <ESC_ALstatusgotoerror+0xb0>)
 8000a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a12:	f107 010f 	add.w	r1, r7, #15
 8000a16:	f107 020e 	add.w	r2, r7, #14
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4798      	blx	r3
   }
   /* Stop outputs if active */
   if ((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0)
 8000a1e:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <ESC_ALstatusgotoerror+0xb4>)
 8000a20:	f3bf 8f5b 	dmb	ish
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	f3bf 8f5b 	dmb	ish
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	f003 0302 	and.w	r3, r3, #2
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	dd01      	ble.n	8000a38 <ESC_ALstatusgotoerror+0x78>
   {
      ESC_stopoutput();
 8000a34:	f000 fe2e 	bl	8001694 <ESC_stopoutput>
   }
   ESC_ALerror(errornumber);
 8000a38:	88bb      	ldrh	r3, [r7, #4]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff ff8a 	bl	8000954 <ESC_ALerror>
   ESC_ALstatus(status);
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff ffa0 	bl	8000988 <ESC_ALstatus>
   an = status;
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	73fb      	strb	r3, [r7, #15]
   /* Call post state change hook case it have been configured  */
   if (ESCvar.post_state_change_hook != NULL)
 8000a4c:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <ESC_ALstatusgotoerror+0xb0>)
 8000a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d009      	beq.n	8000a68 <ESC_ALstatusgotoerror+0xa8>
   {
      ESCvar.post_state_change_hook (&as, &an);
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <ESC_ALstatusgotoerror+0xb0>)
 8000a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a58:	f107 010f 	add.w	r1, r7, #15
 8000a5c:	f107 020e 	add.w	r2, r7, #14
 8000a60:	4610      	mov	r0, r2
 8000a62:	4798      	blx	r3
 8000a64:	e000      	b.n	8000a68 <ESC_ALstatusgotoerror+0xa8>
      return;
 8000a66:	bf00      	nop
   }
}
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000180 	.word	0x20000180
 8000a74:	2000024b 	.word	0x2000024b

08000a78 <ESC_SMack>:
 * Sync Manager event Bit 3 in ALevent. The result is not used.
 *
 * @param[in] n   = Read Sync Manager no. n
 */
void ESC_SMack (uint8_t n)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71fb      	strb	r3, [r7, #7]
   uint8_t dummy;
   ESC_read (ESCREG_SM0ACTIVATE + (n << 3), &dummy, 1);
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	00db      	lsls	r3, r3, #3
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	f603 0306 	addw	r3, r3, #2054	; 0x806
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	f107 010f 	add.w	r1, r7, #15
 8000a94:	2201      	movs	r2, #1
 8000a96:	4618      	mov	r0, r3
 8000a98:	f003 fde6 	bl	8004668 <ESC_read>
}
 8000a9c:	bf00      	nop
 8000a9e:	3710      	adds	r7, #16
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <ESC_SMstatus>:
 * result in global variable ESCvar.SM[n].
 *
 * @param[in] n   = Read Sync Manager no. n
 */
void ESC_SMstatus (uint8_t n)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *sm;
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	3314      	adds	r3, #20
 8000ab2:	00db      	lsls	r3, r3, #3
 8000ab4:	4a09      	ldr	r2, [pc, #36]	; (8000adc <ESC_SMstatus+0x38>)
 8000ab6:	4413      	add	r3, r2
 8000ab8:	60fb      	str	r3, [r7, #12]
   ESC_read (ESCREG_SM0STATUS + (n << 3), &(sm->Status), 1);
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	00db      	lsls	r3, r3, #3
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	f603 0305 	addw	r3, r3, #2053	; 0x805
 8000ac6:	b298      	uxth	r0, r3
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	3305      	adds	r3, #5
 8000acc:	2201      	movs	r2, #1
 8000ace:	4619      	mov	r1, r3
 8000ad0:	f003 fdca 	bl	8004668 <ESC_read>
}
 8000ad4:	bf00      	nop
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000180 	.word	0x20000180

08000ae0 <ESC_SMwritepdi>:
/** Write ESCvar.SM[n] data to ESC PDI control register 0x807(+ offset to SyncManager n).
 *
 * @param[in] n   = Write to Sync Manager no. n
 */
void ESC_SMwritepdi (uint8_t n)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *sm;
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	3314      	adds	r3, #20
 8000aee:	00db      	lsls	r3, r3, #3
 8000af0:	4a09      	ldr	r2, [pc, #36]	; (8000b18 <ESC_SMwritepdi+0x38>)
 8000af2:	4413      	add	r3, r2
 8000af4:	60fb      	str	r3, [r7, #12]
   ESC_write (ESCREG_SM0PDI + (n << 3), &(sm->ActPDI), 1);
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	00db      	lsls	r3, r3, #3
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	f603 0307 	addw	r3, r3, #2055	; 0x807
 8000b02:	b298      	uxth	r0, r3
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	3307      	adds	r3, #7
 8000b08:	2201      	movs	r2, #1
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	f003 fe0e 	bl	800472c <ESC_write>
}
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000180 	.word	0x20000180

08000b1c <ESC_SMenable>:
/** Write 0 to Bit0 in SM PDI control register 0x807(+ offset to SyncManager n) to Activate the Sync Manager n.
 *
 * @param[in] n   = Write to Sync Manager no. n
 */
void ESC_SMenable (uint8_t n)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *sm;
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	3314      	adds	r3, #20
 8000b2a:	00db      	lsls	r3, r3, #3
 8000b2c:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <ESC_SMenable+0x34>)
 8000b2e:	4413      	add	r3, r2
 8000b30:	60fb      	str	r3, [r7, #12]
   sm->ActPDI &= ~ESCREG_SMENABLE_BIT;
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	79db      	ldrb	r3, [r3, #7]
 8000b36:	f023 0301 	bic.w	r3, r3, #1
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	71da      	strb	r2, [r3, #7]
   ESC_SMwritepdi (n);
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff ffcc 	bl	8000ae0 <ESC_SMwritepdi>
}
 8000b48:	bf00      	nop
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000180 	.word	0x20000180

08000b54 <ESC_SMdisable>:
/** Write 1 to Bit0 in SM PDI control register 0x807(+ offset to SyncManager n) to De-activte the Sync Manager n.
 *
 * @param[in] n   = Write to Sync Manager no. n
 */
void ESC_SMdisable (uint8_t n)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *sm;
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	3314      	adds	r3, #20
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	4a08      	ldr	r2, [pc, #32]	; (8000b88 <ESC_SMdisable+0x34>)
 8000b66:	4413      	add	r3, r2
 8000b68:	60fb      	str	r3, [r7, #12]
   sm->ActPDI |= ESCREG_SMENABLE_BIT;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	79db      	ldrb	r3, [r3, #7]
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	b2da      	uxtb	r2, r3
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	71da      	strb	r2, [r3, #7]
   ESC_SMwritepdi (n);
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff ffb0 	bl	8000ae0 <ESC_SMwritepdi>
}
 8000b80:	bf00      	nop
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000180 	.word	0x20000180

08000b8c <ESC_address>:
/** Read Configured Station Address register 0x010 assigned by the Master.
 *
 */
void ESC_address (void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
   ESC_read (ESCREG_ADDRESS, (void *) &ESCvar.address, sizeof (ESCvar.address));
 8000b90:	2202      	movs	r2, #2
 8000b92:	4906      	ldr	r1, [pc, #24]	; (8000bac <ESC_address+0x20>)
 8000b94:	2010      	movs	r0, #16
 8000b96:	f003 fd67 	bl	8004668 <ESC_read>
   ESCvar.address = etohs (ESCvar.address);
 8000b9a:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <ESC_address+0x24>)
 8000b9c:	f8b3 2078 	ldrh.w	r2, [r3, #120]	; 0x78
 8000ba0:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <ESC_address+0x24>)
 8000ba2:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200001f8 	.word	0x200001f8
 8000bb0:	20000180 	.word	0x20000180

08000bb4 <ESC_SYNCactivation>:
/** Read SYNC Out Unit activation registers 0x981
 *
 * @return value of register Activation.
 */
uint8_t ESC_SYNCactivation (void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
   uint8_t activation;
   ESC_read (ESCREG_SYNC_ACT, &activation, sizeof(activation));
 8000bba:	1dfb      	adds	r3, r7, #7
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	f640 1081 	movw	r0, #2433	; 0x981
 8000bc4:	f003 fd50 	bl	8004668 <ESC_read>
   return activation;
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <ESC_checkDC>:
/** Validate the DC values if the SYNC unit is activated.
 *
 * @return = 0 if OK, else ERROR code to be set by caller.
 */
uint16_t ESC_checkDC (void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
   uint16_t ret = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	80fb      	strh	r3, [r7, #6]

   uint8_t sync_act = ESC_SYNCactivation();
 8000bde:	f7ff ffe9 	bl	8000bb4 <ESC_SYNCactivation>
 8000be2:	4603      	mov	r3, r0
 8000be4:	717b      	strb	r3, [r7, #5]
   /* Do we need to check sync settings? */
   if((sync_act & (ESCREG_SYNC_ACT_ACTIVATED | ESCREG_SYNC_AUTO_ACTIVATED)) > 0)
 8000be6:	797b      	ldrb	r3, [r7, #5]
 8000be8:	f003 0309 	and.w	r3, r3, #9
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	dd0b      	ble.n	8000c08 <ESC_checkDC+0x34>
   {
      /* Trigger a by the application given DC check handler, return error if
       *  non is given
       */
      ret = ALERR_DCINVALIDSYNCCFG;
 8000bf0:	2330      	movs	r3, #48	; 0x30
 8000bf2:	80fb      	strh	r3, [r7, #6]
      if(ESCvar.esc_check_dc_handler != NULL)
 8000bf4:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <ESC_checkDC+0x50>)
 8000bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d00d      	beq.n	8000c18 <ESC_checkDC+0x44>
      {
         ret = (ESCvar.esc_check_dc_handler)();
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <ESC_checkDC+0x50>)
 8000bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c00:	4798      	blx	r3
 8000c02:	4603      	mov	r3, r0
 8000c04:	80fb      	strh	r3, [r7, #6]
 8000c06:	e007      	b.n	8000c18 <ESC_checkDC+0x44>
      }
   }
   else
   {
      ESCvar.dcsync = 0;
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <ESC_checkDC+0x50>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      ESCvar.synccounter = 0;
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <ESC_checkDC+0x50>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
   }

   return ret;
 8000c18:	88fb      	ldrh	r3, [r7, #6]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000180 	.word	0x20000180

08000c28 <ESC_checkmbx>:
 * @param[in] state   = Current state request read from ALControl 0x0120
 * @return if all Mailbox values is correct we return incoming state request, otherwise
 * we return state Init with Error flag set.
 */
uint8_t ESC_checkmbx (uint8_t state)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *SM;
   ESC_read (ESCREG_SM0, (void *) &ESCvar.SM[0], sizeof (ESCvar.SM[0]));
 8000c32:	2208      	movs	r2, #8
 8000c34:	4934      	ldr	r1, [pc, #208]	; (8000d08 <ESC_checkmbx+0xe0>)
 8000c36:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000c3a:	f003 fd15 	bl	8004668 <ESC_read>
   ESC_read (ESCREG_SM1, (void *) &ESCvar.SM[1], sizeof (ESCvar.SM[1]));
 8000c3e:	2208      	movs	r2, #8
 8000c40:	4932      	ldr	r1, [pc, #200]	; (8000d0c <ESC_checkmbx+0xe4>)
 8000c42:	f640 0008 	movw	r0, #2056	; 0x808
 8000c46:	f003 fd0f 	bl	8004668 <ESC_read>
   SM = (_ESCsm2 *) & ESCvar.SM[0];
 8000c4a:	4b2f      	ldr	r3, [pc, #188]	; (8000d08 <ESC_checkmbx+0xe0>)
 8000c4c:	60fb      	str	r3, [r7, #12]
   if ((etohs (SM->PSA) != ESC_MBX0_sma) || (etohs (SM->Length) != ESC_MBX0_sml)
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	881b      	ldrh	r3, [r3, #0]
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	4b2e      	ldr	r3, [pc, #184]	; (8000d10 <ESC_checkmbx+0xe8>)
 8000c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c58:	881b      	ldrh	r3, [r3, #0]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d116      	bne.n	8000c8c <ESC_checkmbx+0x64>
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	885b      	ldrh	r3, [r3, #2]
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	4b2a      	ldr	r3, [pc, #168]	; (8000d10 <ESC_checkmbx+0xe8>)
 8000c66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c68:	885b      	ldrh	r3, [r3, #2]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d10e      	bne.n	8000c8c <ESC_checkmbx+0x64>
       || (SM->Command != ESC_MBX0_smc) || (ESCvar.SM[0].ECsm == 0))
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	791a      	ldrb	r2, [r3, #4]
 8000c72:	4b27      	ldr	r3, [pc, #156]	; (8000d10 <ESC_checkmbx+0xe8>)
 8000c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c76:	799b      	ldrb	r3, [r3, #6]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d107      	bne.n	8000c8c <ESC_checkmbx+0x64>
 8000c7c:	4b24      	ldr	r3, [pc, #144]	; (8000d10 <ESC_checkmbx+0xe8>)
 8000c7e:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d10b      	bne.n	8000ca4 <ESC_checkmbx+0x7c>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM0;
 8000c8c:	4b20      	ldr	r3, [pc, #128]	; (8000d10 <ESC_checkmbx+0xe8>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      ESC_SMdisable (0);
 8000c94:	2000      	movs	r0, #0
 8000c96:	f7ff ff5d 	bl	8000b54 <ESC_SMdisable>
      ESC_SMdisable (1);
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f7ff ff5a 	bl	8000b54 <ESC_SMdisable>
      return (uint8_t) (ESCinit | ESCerror);      //fail state change
 8000ca0:	2311      	movs	r3, #17
 8000ca2:	e02d      	b.n	8000d00 <ESC_checkmbx+0xd8>
   }
   SM = (_ESCsm2 *) & ESCvar.SM[1];
 8000ca4:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <ESC_checkmbx+0xe4>)
 8000ca6:	60fb      	str	r3, [r7, #12]
   if ((etohs (SM->PSA) != ESC_MBX1_sma) || (etohs (SM->Length) != ESC_MBX1_sml)
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	881b      	ldrh	r3, [r3, #0]
 8000cac:	b29a      	uxth	r2, r3
 8000cae:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <ESC_checkmbx+0xe8>)
 8000cb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d116      	bne.n	8000ce6 <ESC_checkmbx+0xbe>
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	885b      	ldrh	r3, [r3, #2]
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <ESC_checkmbx+0xe8>)
 8000cc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000cc2:	885b      	ldrh	r3, [r3, #2]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d10e      	bne.n	8000ce6 <ESC_checkmbx+0xbe>
       || (SM->Command != ESC_MBX1_smc) || (ESCvar.SM[1].ECsm == 0))
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	791a      	ldrb	r2, [r3, #4]
 8000ccc:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <ESC_checkmbx+0xe8>)
 8000cce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000cd0:	799b      	ldrb	r3, [r3, #6]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d107      	bne.n	8000ce6 <ESC_checkmbx+0xbe>
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <ESC_checkmbx+0xe8>)
 8000cd8:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d10b      	bne.n	8000cfe <ESC_checkmbx+0xd6>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM1;
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <ESC_checkmbx+0xe8>)
 8000ce8:	2202      	movs	r2, #2
 8000cea:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      ESC_SMdisable (0);
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f7ff ff30 	bl	8000b54 <ESC_SMdisable>
      ESC_SMdisable (1);
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	f7ff ff2d 	bl	8000b54 <ESC_SMdisable>
      return ESCinit | ESCerror;        //fail state change
 8000cfa:	2311      	movs	r3, #17
 8000cfc:	e000      	b.n	8000d00 <ESC_checkmbx+0xd8>
   }
   return state;
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000220 	.word	0x20000220
 8000d0c:	20000228 	.word	0x20000228
 8000d10:	20000180 	.word	0x20000180

08000d14 <ESC_startmbx>:
 * @param[in] state   = Current state request read from ALControl 0x0120
 * @return if all Mailbox values is correct we return incoming state, otherwise
 * we return state Init with Error flag set.
 */
uint8_t ESC_startmbx (uint8_t state)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
   /* Assign SM settings */
   ESCvar.activembxsize = MBXSIZE;
 8000d1e:	4b1d      	ldr	r3, [pc, #116]	; (8000d94 <ESC_startmbx+0x80>)
 8000d20:	2280      	movs	r2, #128	; 0x80
 8000d22:	65da      	str	r2, [r3, #92]	; 0x5c
   ESCvar.activemb0 = &ESCvar.mb[0];
 8000d24:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <ESC_startmbx+0x80>)
 8000d26:	4a1c      	ldr	r2, [pc, #112]	; (8000d98 <ESC_startmbx+0x84>)
 8000d28:	661a      	str	r2, [r3, #96]	; 0x60
   ESCvar.activemb1 = &ESCvar.mb[1];
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <ESC_startmbx+0x80>)
 8000d2c:	4a1b      	ldr	r2, [pc, #108]	; (8000d9c <ESC_startmbx+0x88>)
 8000d2e:	665a      	str	r2, [r3, #100]	; 0x64


   ESC_SMenable (0);
 8000d30:	2000      	movs	r0, #0
 8000d32:	f7ff fef3 	bl	8000b1c <ESC_SMenable>
   ESC_SMenable (1);
 8000d36:	2001      	movs	r0, #1
 8000d38:	f7ff fef0 	bl	8000b1c <ESC_SMenable>
   ESC_SMstatus (0);
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f7ff feb1 	bl	8000aa4 <ESC_SMstatus>
   ESC_SMstatus (1);
 8000d42:	2001      	movs	r0, #1
 8000d44:	f7ff feae 	bl	8000aa4 <ESC_SMstatus>
   if ((state = ESC_checkmbx (state)) & ESCerror)
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ff6c 	bl	8000c28 <ESC_checkmbx>
 8000d50:	4603      	mov	r3, r0
 8000d52:	71fb      	strb	r3, [r7, #7]
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	f003 0310 	and.w	r3, r3, #16
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d007      	beq.n	8000d6e <ESC_startmbx+0x5a>
   {
      ESC_ALerror (ALERR_INVALIDMBXCONFIG);
 8000d5e:	2016      	movs	r0, #22
 8000d60:	f7ff fdf8 	bl	8000954 <ESC_ALerror>
      ESCvar.MBXrun = 0;
 8000d64:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <ESC_startmbx+0x80>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8000d6c:	e00d      	b.n	8000d8a <ESC_startmbx+0x76>
   }
   else
   {
      ESCvar.toggle = ESCvar.SM[1].ECrep;       //sync repeat request toggle state
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <ESC_startmbx+0x80>)
 8000d70:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 8000d74:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <ESC_startmbx+0x80>)
 8000d7e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
      ESCvar.MBXrun = 1;
 8000d82:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <ESC_startmbx+0x80>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
   }
   return state;
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000180 	.word	0x20000180
 8000d98:	20000184 	.word	0x20000184
 8000d9c:	2000018c 	.word	0x2000018c

08000da0 <ESC_startmbxboot>:
 * @param[in] state   = Current state request read from ALControl 0x0120
 * @return if all Mailbox values is correct we return incoming state, otherwise
 * we return state Init with Error flag set.
 */
uint8_t ESC_startmbxboot (uint8_t state)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
   /* Assign SM settings */
   ESCvar.activembxsize = MBXSIZEBOOT;
 8000daa:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <ESC_startmbxboot+0x80>)
 8000dac:	2280      	movs	r2, #128	; 0x80
 8000dae:	65da      	str	r2, [r3, #92]	; 0x5c
   ESCvar.activemb0 = &ESCvar.mbboot[0];
 8000db0:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <ESC_startmbxboot+0x80>)
 8000db2:	4a1c      	ldr	r2, [pc, #112]	; (8000e24 <ESC_startmbxboot+0x84>)
 8000db4:	661a      	str	r2, [r3, #96]	; 0x60
   ESCvar.activemb1 = &ESCvar.mbboot[1];
 8000db6:	4b1a      	ldr	r3, [pc, #104]	; (8000e20 <ESC_startmbxboot+0x80>)
 8000db8:	4a1b      	ldr	r2, [pc, #108]	; (8000e28 <ESC_startmbxboot+0x88>)
 8000dba:	665a      	str	r2, [r3, #100]	; 0x64

   ESC_SMenable (0);
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f7ff fead 	bl	8000b1c <ESC_SMenable>
   ESC_SMenable (1);
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f7ff feaa 	bl	8000b1c <ESC_SMenable>
   ESC_SMstatus (0);
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f7ff fe6b 	bl	8000aa4 <ESC_SMstatus>
   ESC_SMstatus (1);
 8000dce:	2001      	movs	r0, #1
 8000dd0:	f7ff fe68 	bl	8000aa4 <ESC_SMstatus>
   if ((state = ESC_checkmbx (state)) & ESCerror)
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff ff26 	bl	8000c28 <ESC_checkmbx>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	71fb      	strb	r3, [r7, #7]
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	f003 0310 	and.w	r3, r3, #16
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d007      	beq.n	8000dfa <ESC_startmbxboot+0x5a>
   {
      ESC_ALerror (ALERR_INVALIDBOOTMBXCONFIG);
 8000dea:	2015      	movs	r0, #21
 8000dec:	f7ff fdb2 	bl	8000954 <ESC_ALerror>
      ESCvar.MBXrun = 0;
 8000df0:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <ESC_startmbxboot+0x80>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8000df8:	e00d      	b.n	8000e16 <ESC_startmbxboot+0x76>
   }
   else
   {
      ESCvar.toggle = ESCvar.SM[1].ECrep;       //sync repeat request toggle state
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <ESC_startmbxboot+0x80>)
 8000dfc:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 8000e00:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	461a      	mov	r2, r3
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <ESC_startmbxboot+0x80>)
 8000e0a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
      ESCvar.MBXrun = 1;
 8000e0e:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <ESC_startmbxboot+0x80>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
   }
   return state;
 8000e16:	79fb      	ldrb	r3, [r7, #7]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000180 	.word	0x20000180
 8000e24:	20000194 	.word	0x20000194
 8000e28:	2000019c 	.word	0x2000019c

08000e2c <ESC_stopmbx>:

/** Stop mailboxes by disabling SyncManager 0 and 1. Clear local mailbox variables
 * stored in ESCvar.
 */
void ESC_stopmbx (void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
   uint8_t n;
   ESCvar.MBXrun = 0;
 8000e32:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <ESC_stopmbx+0x8c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
   ESC_SMdisable (0);
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f7ff fe8a 	bl	8000b54 <ESC_SMdisable>
   ESC_SMdisable (1);
 8000e40:	2001      	movs	r0, #1
 8000e42:	f7ff fe87 	bl	8000b54 <ESC_SMdisable>
   for (n = 0; n < ESC_MBXBUFFERS; n++)
 8000e46:	2300      	movs	r3, #0
 8000e48:	71fb      	strb	r3, [r7, #7]
 8000e4a:	e006      	b.n	8000e5a <ESC_stopmbx+0x2e>
   {
      MBXcontrol[n].state = MBXstate_idle;
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	4a1b      	ldr	r2, [pc, #108]	; (8000ebc <ESC_stopmbx+0x90>)
 8000e50:	2100      	movs	r1, #0
 8000e52:	54d1      	strb	r1, [r2, r3]
   for (n = 0; n < ESC_MBXBUFFERS; n++)
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	3301      	adds	r3, #1
 8000e58:	71fb      	strb	r3, [r7, #7]
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d9f5      	bls.n	8000e4c <ESC_stopmbx+0x20>
   }
   ESCvar.mbxoutpost = 0;
 8000e60:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <ESC_stopmbx+0x8c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
   ESCvar.mbxbackup = 0;
 8000e68:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <ESC_stopmbx+0x8c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
   ESCvar.xoe = 0;
 8000e70:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <ESC_stopmbx+0x8c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
   ESCvar.mbxfree = 1;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <ESC_stopmbx+0x8c>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
   ESCvar.toggle = 0;
 8000e80:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <ESC_stopmbx+0x8c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
   ESCvar.mbxincnt = 0;
 8000e88:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <ESC_stopmbx+0x8c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
   ESCvar.segmented = 0;
 8000e90:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <ESC_stopmbx+0x8c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
   ESCvar.frags = 0;
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <ESC_stopmbx+0x8c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
   ESCvar.fragsleft = 0;
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <ESC_stopmbx+0x8c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
   ESCvar.txcue = 0;
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <ESC_stopmbx+0x8c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000180 	.word	0x20000180
 8000ebc:	20000414 	.word	0x20000414

08000ec0 <ESC_readmbx>:
/** Read Receive mailbox and store data in local ESCvar.MBX variable.
 * Combined function for bootstrap and other states. State check decides
 * which one to read.
 */
void ESC_readmbx (void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
   _MBX *MB = (_MBX *)&MBX[0];
 8000ec6:	4b1e      	ldr	r3, [pc, #120]	; (8000f40 <ESC_readmbx+0x80>)
 8000ec8:	607b      	str	r3, [r7, #4]
   uint16_t length;

   ESC_read (ESC_MBX0_sma, MB, ESC_MBXHSIZE);
 8000eca:	4b1e      	ldr	r3, [pc, #120]	; (8000f44 <ESC_readmbx+0x84>)
 8000ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	2206      	movs	r2, #6
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f003 fbc7 	bl	8004668 <ESC_read>
   length = etohs (MB->header.length);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	881b      	ldrh	r3, [r3, #0]
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	807b      	strh	r3, [r7, #2]

   if (length > (ESC_MBX0_sml - ESC_MBXHSIZE))
 8000ee2:	887b      	ldrh	r3, [r7, #2]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <ESC_readmbx+0x84>)
 8000ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eea:	885b      	ldrh	r3, [r3, #2]
 8000eec:	3b06      	subs	r3, #6
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d905      	bls.n	8000efe <ESC_readmbx+0x3e>
   {
      length = ESC_MBX0_sml - ESC_MBXHSIZE;
 8000ef2:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <ESC_readmbx+0x84>)
 8000ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef6:	885b      	ldrh	r3, [r3, #2]
 8000ef8:	3b06      	subs	r3, #6
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	807b      	strh	r3, [r7, #2]
   }
   ESC_read (ESC_MBX0_sma + ESC_MBXHSIZE, MB->b, length);
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <ESC_readmbx+0x84>)
 8000f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	3306      	adds	r3, #6
 8000f06:	b298      	uxth	r0, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3306      	adds	r3, #6
 8000f0c:	887a      	ldrh	r2, [r7, #2]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f003 fbaa 	bl	8004668 <ESC_read>
   if (length + ESC_MBXHSIZE < ESC_MBX0_sml)
 8000f14:	887b      	ldrh	r3, [r7, #2]
 8000f16:	3306      	adds	r3, #6
 8000f18:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <ESC_readmbx+0x84>)
 8000f1a:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8000f1c:	8852      	ldrh	r2, [r2, #2]
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d207      	bcs.n	8000f32 <ESC_readmbx+0x72>
   {
      ESC_read (ESC_MBX0_sme, &length, 1);
 8000f22:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <ESC_readmbx+0x84>)
 8000f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f26:	889b      	ldrh	r3, [r3, #4]
 8000f28:	1cb9      	adds	r1, r7, #2
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f003 fb9b 	bl	8004668 <ESC_read>
   }

   MBXcontrol[0].state = MBXstate_inclaim;
 8000f32:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <ESC_readmbx+0x88>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	701a      	strb	r2, [r3, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	2000024c 	.word	0x2000024c
 8000f44:	20000180 	.word	0x20000180
 8000f48:	20000414 	.word	0x20000414

08000f4c <ESC_writembx>:
 * which one to write.
 *
 * @param[in] n   = Which local mailbox buffer n to send.
 */
void ESC_writembx (uint8_t n)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
   _MBXh *MBh = (_MBXh *)&MBX[n * ESC_MBXSIZE];
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	4a1e      	ldr	r2, [pc, #120]	; (8000fd4 <ESC_writembx+0x88>)
 8000f5a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000f5c:	fb02 f303 	mul.w	r3, r2, r3
 8000f60:	4a1d      	ldr	r2, [pc, #116]	; (8000fd8 <ESC_writembx+0x8c>)
 8000f62:	4413      	add	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
   uint8_t dummy = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	73fb      	strb	r3, [r7, #15]
   uint16_t length;
   length = etohs (MBh->length);
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	781a      	ldrb	r2, [r3, #0]
 8000f6e:	785b      	ldrb	r3, [r3, #1]
 8000f70:	021b      	lsls	r3, r3, #8
 8000f72:	4313      	orrs	r3, r2
 8000f74:	82fb      	strh	r3, [r7, #22]

   if (length > (ESC_MBX1_sml - ESC_MBXHSIZE))
 8000f76:	8afa      	ldrh	r2, [r7, #22]
 8000f78:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <ESC_writembx+0x88>)
 8000f7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000f7c:	885b      	ldrh	r3, [r3, #2]
 8000f7e:	3b06      	subs	r3, #6
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d904      	bls.n	8000f8e <ESC_writembx+0x42>
   {
      length = ESC_MBX1_sml - ESC_MBXHSIZE;
 8000f84:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <ESC_writembx+0x88>)
 8000f86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000f88:	885b      	ldrh	r3, [r3, #2]
 8000f8a:	3b06      	subs	r3, #6
 8000f8c:	82fb      	strh	r3, [r7, #22]
   }
   ESC_write (ESC_MBX1_sma, MBh, ESC_MBXHSIZE + length);
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <ESC_writembx+0x88>)
 8000f90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000f92:	8818      	ldrh	r0, [r3, #0]
 8000f94:	8afb      	ldrh	r3, [r7, #22]
 8000f96:	3306      	adds	r3, #6
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	6939      	ldr	r1, [r7, #16]
 8000f9e:	f003 fbc5 	bl	800472c <ESC_write>
   if (length + ESC_MBXHSIZE < ESC_MBX1_sml)
 8000fa2:	8afb      	ldrh	r3, [r7, #22]
 8000fa4:	3306      	adds	r3, #6
 8000fa6:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <ESC_writembx+0x88>)
 8000fa8:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8000faa:	8852      	ldrh	r2, [r2, #2]
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d208      	bcs.n	8000fc2 <ESC_writembx+0x76>
   {
      ESC_write (ESC_MBX1_sme, &dummy, 1);
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <ESC_writembx+0x88>)
 8000fb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000fb4:	889b      	ldrh	r3, [r3, #4]
 8000fb6:	f107 010f 	add.w	r1, r7, #15
 8000fba:	2201      	movs	r2, #1
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f003 fbb5 	bl	800472c <ESC_write>
   }

   ESCvar.mbxfree = 0;
 8000fc2:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <ESC_writembx+0x88>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
}
 8000fca:	bf00      	nop
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000180 	.word	0x20000180
 8000fd8:	2000024c 	.word	0x2000024c

08000fdc <ESC_ackmbxread>:

/** TBD
 */
void ESC_ackmbxread (void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
   uint8_t dummy = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	71fb      	strb	r3, [r7, #7]

   ESC_write (ESC_MBX1_sma, &dummy, 1);
 8000fe6:	4b08      	ldr	r3, [pc, #32]	; (8001008 <ESC_ackmbxread+0x2c>)
 8000fe8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	1df9      	adds	r1, r7, #7
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f003 fb9b 	bl	800472c <ESC_write>
   ESCvar.mbxfree = 1;
 8000ff6:	4b04      	ldr	r3, [pc, #16]	; (8001008 <ESC_ackmbxread+0x2c>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000180 	.word	0x20000180

0800100c <ESC_claimbuffer>:
 * address master and mailbox next CNT value between 1-7.
 *
 * @return The index of Mailbox buffer prepared for outbox. IF no buffer is available return 0.
 */
uint8_t ESC_claimbuffer (void)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
   _MBXh *MBh;
   uint8_t n = ESC_MBXBUFFERS - 1;
 8001012:	2302      	movs	r3, #2
 8001014:	71fb      	strb	r3, [r7, #7]
   while ((n > 0) && (MBXcontrol[n].state))
 8001016:	e002      	b.n	800101e <ESC_claimbuffer+0x12>
   {
      n--;
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	3b01      	subs	r3, #1
 800101c:	71fb      	strb	r3, [r7, #7]
   while ((n > 0) && (MBXcontrol[n].state))
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d004      	beq.n	800102e <ESC_claimbuffer+0x22>
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	4a2b      	ldr	r2, [pc, #172]	; (80010d4 <ESC_claimbuffer+0xc8>)
 8001028:	5cd3      	ldrb	r3, [r2, r3]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1f4      	bne.n	8001018 <ESC_claimbuffer+0xc>
   }
   if (n)
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d047      	beq.n	80010c4 <ESC_claimbuffer+0xb8>
   {
      MBXcontrol[n].state = MBXstate_outclaim;
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	4a27      	ldr	r2, [pc, #156]	; (80010d4 <ESC_claimbuffer+0xc8>)
 8001038:	2102      	movs	r1, #2
 800103a:	54d1      	strb	r1, [r2, r3]
      MBh = (_MBXh *)&MBX[n * ESC_MBXSIZE];
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	4a26      	ldr	r2, [pc, #152]	; (80010d8 <ESC_claimbuffer+0xcc>)
 8001040:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001042:	fb02 f303 	mul.w	r3, r2, r3
 8001046:	4a25      	ldr	r2, [pc, #148]	; (80010dc <ESC_claimbuffer+0xd0>)
 8001048:	4413      	add	r3, r2
 800104a:	603b      	str	r3, [r7, #0]
      ESCvar.mbxcnt++;
 800104c:	4b22      	ldr	r3, [pc, #136]	; (80010d8 <ESC_claimbuffer+0xcc>)
 800104e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001052:	3301      	adds	r3, #1
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4b20      	ldr	r3, [pc, #128]	; (80010d8 <ESC_claimbuffer+0xcc>)
 8001058:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
      ESCvar.mbxcnt = (ESCvar.mbxcnt & 0x07);
 800105c:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <ESC_claimbuffer+0xcc>)
 800105e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	b2da      	uxtb	r2, r3
 8001068:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <ESC_claimbuffer+0xcc>)
 800106a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
      if (ESCvar.mbxcnt == 0)
 800106e:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <ESC_claimbuffer+0xcc>)
 8001070:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001074:	2b00      	cmp	r3, #0
 8001076:	d103      	bne.n	8001080 <ESC_claimbuffer+0x74>
      {
         ESCvar.mbxcnt = 1;
 8001078:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <ESC_claimbuffer+0xcc>)
 800107a:	2201      	movs	r2, #1
 800107c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
      }
      MBh->address = htoes (0x0000);      // destination is master
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	2200      	movs	r2, #0
 8001084:	709a      	strb	r2, [r3, #2]
 8001086:	2200      	movs	r2, #0
 8001088:	70da      	strb	r2, [r3, #3]
      MBh->channel = 0;
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	7913      	ldrb	r3, [r2, #4]
 800108e:	f36f 0305 	bfc	r3, #0, #6
 8001092:	7113      	strb	r3, [r2, #4]
      MBh->priority = 0;
 8001094:	683a      	ldr	r2, [r7, #0]
 8001096:	7913      	ldrb	r3, [r2, #4]
 8001098:	f36f 1387 	bfc	r3, #6, #2
 800109c:	7113      	strb	r3, [r2, #4]
      MBh->mbxcnt = ESCvar.mbxcnt;
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <ESC_claimbuffer+0xcc>)
 80010a0:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80010a4:	f003 030f 	and.w	r3, r3, #15
 80010a8:	b2d9      	uxtb	r1, r3
 80010aa:	683a      	ldr	r2, [r7, #0]
 80010ac:	7953      	ldrb	r3, [r2, #5]
 80010ae:	f361 1307 	bfi	r3, r1, #4, #4
 80010b2:	7153      	strb	r3, [r2, #5]
      ESCvar.txcue++;
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <ESC_claimbuffer+0xcc>)
 80010b6:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80010ba:	3301      	adds	r3, #1
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <ESC_claimbuffer+0xcc>)
 80010c0:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
   }
   return n;
 80010c4:	79fb      	ldrb	r3, [r7, #7]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000414 	.word	0x20000414
 80010d8:	20000180 	.word	0x20000180
 80010dc:	2000024c 	.word	0x2000024c

080010e0 <ESC_outreqbuffer>:
/** Look for any present requests for posting to the outbox.
 *
 * @return the index of Mailbox buffer ready to be posted.
 */
uint8_t ESC_outreqbuffer (void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
   uint8_t n = ESC_MBXBUFFERS - 1;
 80010e6:	2302      	movs	r3, #2
 80010e8:	71fb      	strb	r3, [r7, #7]
   while ((n > 0) && (MBXcontrol[n].state != MBXstate_outreq))
 80010ea:	e002      	b.n	80010f2 <ESC_outreqbuffer+0x12>
   {
      n--;
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	71fb      	strb	r3, [r7, #7]
   while ((n > 0) && (MBXcontrol[n].state != MBXstate_outreq))
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d004      	beq.n	8001102 <ESC_outreqbuffer+0x22>
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	4a05      	ldr	r2, [pc, #20]	; (8001110 <ESC_outreqbuffer+0x30>)
 80010fc:	5cd3      	ldrb	r3, [r2, r3]
 80010fe:	2b03      	cmp	r3, #3
 8001100:	d1f4      	bne.n	80010ec <ESC_outreqbuffer+0xc>
   }
   return n;
 8001102:	79fb      	ldrb	r3, [r7, #7]
}
 8001104:	4618      	mov	r0, r3
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	20000414 	.word	0x20000414

08001114 <MBX_error>:
 * buffer with error information.
 *
 * @param[in] n   = Error number to be sent in mailbox error message.
 */
void MBX_error (uint16_t error)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	80fb      	strh	r3, [r7, #6]
   uint8_t MBXout;
   _MBXerr *mbxerr;
   MBXout = ESC_claimbuffer ();
 800111e:	f7ff ff75 	bl	800100c <ESC_claimbuffer>
 8001122:	4603      	mov	r3, r0
 8001124:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d021      	beq.n	8001170 <MBX_error+0x5c>
   {
      mbxerr = (_MBXerr *) &MBX[MBXout * ESC_MBXSIZE];
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	4a12      	ldr	r2, [pc, #72]	; (8001178 <MBX_error+0x64>)
 8001130:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001132:	fb02 f303 	mul.w	r3, r2, r3
 8001136:	4a11      	ldr	r2, [pc, #68]	; (800117c <MBX_error+0x68>)
 8001138:	4413      	add	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
      mbxerr->mbxheader.length = htoes ((uint16_t) 0x04);
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	2200      	movs	r2, #0
 8001140:	f042 0204 	orr.w	r2, r2, #4
 8001144:	701a      	strb	r2, [r3, #0]
 8001146:	2200      	movs	r2, #0
 8001148:	705a      	strb	r2, [r3, #1]
      mbxerr->mbxheader.mbxtype = MBXERR;
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	7953      	ldrb	r3, [r2, #5]
 800114e:	f36f 0303 	bfc	r3, #0, #4
 8001152:	7153      	strb	r3, [r2, #5]
      mbxerr->type = htoes ((uint16_t) 0x01);
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	2200      	movs	r2, #0
 8001158:	f042 0201 	orr.w	r2, r2, #1
 800115c:	719a      	strb	r2, [r3, #6]
 800115e:	2200      	movs	r2, #0
 8001160:	71da      	strb	r2, [r3, #7]
      mbxerr->detail = htoes (error);
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	88fa      	ldrh	r2, [r7, #6]
 8001166:	811a      	strh	r2, [r3, #8]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	4a05      	ldr	r2, [pc, #20]	; (8001180 <MBX_error+0x6c>)
 800116c:	2103      	movs	r1, #3
 800116e:	54d1      	strb	r1, [r2, r3]
   }
}
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000180 	.word	0x20000180
 800117c:	2000024c 	.word	0x2000024c
 8001180:	20000414 	.word	0x20000414

08001184 <ESC_mbxprocess>:
 * a mailbox, re-sending a mailbox, reading a mailbox and handles a mailbox full event.
 *
 * @return =0 if nothing to do. =1 if something to be handled by mailbox protocols.
 */
uint8_t ESC_mbxprocess (void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
   uint8_t mbxhandle = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	71fb      	strb	r3, [r7, #7]
   _MBXh *MBh = (_MBXh *)&MBX[0];
 800118e:	4b97      	ldr	r3, [pc, #604]	; (80013ec <ESC_mbxprocess+0x268>)
 8001190:	603b      	str	r3, [r7, #0]

   if (ESCvar.MBXrun == 0)
 8001192:	4b97      	ldr	r3, [pc, #604]	; (80013f0 <ESC_mbxprocess+0x26c>)
 8001194:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001198:	2b00      	cmp	r3, #0
 800119a:	d101      	bne.n	80011a0 <ESC_mbxprocess+0x1c>
   {
      /* nothing to do */
      return 0;
 800119c:	2300      	movs	r3, #0
 800119e:	e121      	b.n	80013e4 <ESC_mbxprocess+0x260>
   }

   /* SM0/1 access */
   if (ESCvar.ALevent & (ESCREG_ALEVENT_SM0 | ESCREG_ALEVENT_SM1))
 80011a0:	4b93      	ldr	r3, [pc, #588]	; (80013f0 <ESC_mbxprocess+0x26c>)
 80011a2:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d005      	beq.n	80011bc <ESC_mbxprocess+0x38>
   {
      ESC_SMstatus (0);
 80011b0:	2000      	movs	r0, #0
 80011b2:	f7ff fc77 	bl	8000aa4 <ESC_SMstatus>
      ESC_SMstatus (1);
 80011b6:	2001      	movs	r0, #1
 80011b8:	f7ff fc74 	bl	8000aa4 <ESC_SMstatus>
   }

   /* outmbx read by master */
   if (ESCvar.mbxoutpost && (ESCvar.ALevent & ESCREG_ALEVENT_SM1))
 80011bc:	4b8c      	ldr	r3, [pc, #560]	; (80013f0 <ESC_mbxprocess+0x26c>)
 80011be:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d03d      	beq.n	8001242 <ESC_mbxprocess+0xbe>
 80011c6:	4b8a      	ldr	r3, [pc, #552]	; (80013f0 <ESC_mbxprocess+0x26c>)
 80011c8:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d035      	beq.n	8001242 <ESC_mbxprocess+0xbe>
   {
      ESC_ackmbxread ();
 80011d6:	f7ff ff01 	bl	8000fdc <ESC_ackmbxread>
      /* dispose old backup */
      if (ESCvar.mbxbackup)
 80011da:	4b85      	ldr	r3, [pc, #532]	; (80013f0 <ESC_mbxprocess+0x26c>)
 80011dc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d006      	beq.n	80011f2 <ESC_mbxprocess+0x6e>
      {
         MBXcontrol[ESCvar.mbxbackup].state = MBXstate_idle;
 80011e4:	4b82      	ldr	r3, [pc, #520]	; (80013f0 <ESC_mbxprocess+0x26c>)
 80011e6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80011ea:	461a      	mov	r2, r3
 80011ec:	4b81      	ldr	r3, [pc, #516]	; (80013f4 <ESC_mbxprocess+0x270>)
 80011ee:	2100      	movs	r1, #0
 80011f0:	5499      	strb	r1, [r3, r2]
      }
      /* if still to do */
      if (MBXcontrol[ESCvar.mbxoutpost].state == MBXstate_again)
 80011f2:	4b7f      	ldr	r3, [pc, #508]	; (80013f0 <ESC_mbxprocess+0x26c>)
 80011f4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b7e      	ldr	r3, [pc, #504]	; (80013f4 <ESC_mbxprocess+0x270>)
 80011fc:	5c9b      	ldrb	r3, [r3, r2]
 80011fe:	2b06      	cmp	r3, #6
 8001200:	d105      	bne.n	800120e <ESC_mbxprocess+0x8a>
      {
         ESC_writembx (ESCvar.mbxoutpost);
 8001202:	4b7b      	ldr	r3, [pc, #492]	; (80013f0 <ESC_mbxprocess+0x26c>)
 8001204:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff fe9f 	bl	8000f4c <ESC_writembx>
      }
      /* create new backup */
      MBXcontrol[ESCvar.mbxoutpost].state = MBXstate_backup;
 800120e:	4b78      	ldr	r3, [pc, #480]	; (80013f0 <ESC_mbxprocess+0x26c>)
 8001210:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001214:	461a      	mov	r2, r3
 8001216:	4b77      	ldr	r3, [pc, #476]	; (80013f4 <ESC_mbxprocess+0x270>)
 8001218:	2105      	movs	r1, #5
 800121a:	5499      	strb	r1, [r3, r2]
      ESCvar.mbxbackup = ESCvar.mbxoutpost;
 800121c:	4b74      	ldr	r3, [pc, #464]	; (80013f0 <ESC_mbxprocess+0x26c>)
 800121e:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 8001222:	4b73      	ldr	r3, [pc, #460]	; (80013f0 <ESC_mbxprocess+0x26c>)
 8001224:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
      ESCvar.mbxoutpost = 0;
 8001228:	4b71      	ldr	r3, [pc, #452]	; (80013f0 <ESC_mbxprocess+0x26c>)
 800122a:	2200      	movs	r2, #0
 800122c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      /* Do we have any ongoing protocol transfers, return 1 */
      if(ESCvar.xoe > 0)
 8001230:	4b6f      	ldr	r3, [pc, #444]	; (80013f0 <ESC_mbxprocess+0x26c>)
 8001232:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <ESC_mbxprocess+0xba>
      {
         return 1;
 800123a:	2301      	movs	r3, #1
 800123c:	e0d2      	b.n	80013e4 <ESC_mbxprocess+0x260>
      }
      return 0;
 800123e:	2300      	movs	r3, #0
 8001240:	e0d0      	b.n	80013e4 <ESC_mbxprocess+0x260>
   }

   /* repeat request */
   if (ESCvar.SM[1].ECrep != ESCvar.toggle)
 8001242:	4b6b      	ldr	r3, [pc, #428]	; (80013f0 <ESC_mbxprocess+0x26c>)
 8001244:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 8001248:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800124c:	b2db      	uxtb	r3, r3
 800124e:	461a      	mov	r2, r3
 8001250:	4b67      	ldr	r3, [pc, #412]	; (80013f0 <ESC_mbxprocess+0x26c>)
 8001252:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8001256:	429a      	cmp	r2, r3
 8001258:	d044      	beq.n	80012e4 <ESC_mbxprocess+0x160>
   {
      if (ESCvar.mbxoutpost || ESCvar.mbxbackup)
 800125a:	4b65      	ldr	r3, [pc, #404]	; (80013f0 <ESC_mbxprocess+0x26c>)
 800125c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001260:	2b00      	cmp	r3, #0
 8001262:	d104      	bne.n	800126e <ESC_mbxprocess+0xea>
 8001264:	4b62      	ldr	r3, [pc, #392]	; (80013f0 <ESC_mbxprocess+0x26c>)
 8001266:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800126a:	2b00      	cmp	r3, #0
 800126c:	d038      	beq.n	80012e0 <ESC_mbxprocess+0x15c>
      {
         /* if outmbx empty */
         if (ESCvar.mbxoutpost == 0)
 800126e:	4b60      	ldr	r3, [pc, #384]	; (80013f0 <ESC_mbxprocess+0x26c>)
 8001270:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001274:	2b00      	cmp	r3, #0
 8001276:	d106      	bne.n	8001286 <ESC_mbxprocess+0x102>
         {
            /* use backup mbx */
            ESC_writembx (ESCvar.mbxbackup);
 8001278:	4b5d      	ldr	r3, [pc, #372]	; (80013f0 <ESC_mbxprocess+0x26c>)
 800127a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fe64 	bl	8000f4c <ESC_writembx>
 8001284:	e012      	b.n	80012ac <ESC_mbxprocess+0x128>
         }
         else
         {
            /* reset mailbox */
            ESC_SMdisable (1);
 8001286:	2001      	movs	r0, #1
 8001288:	f7ff fc64 	bl	8000b54 <ESC_SMdisable>
            /* have to resend later */
            MBXcontrol[ESCvar.mbxoutpost].state = MBXstate_again;
 800128c:	4b58      	ldr	r3, [pc, #352]	; (80013f0 <ESC_mbxprocess+0x26c>)
 800128e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001292:	461a      	mov	r2, r3
 8001294:	4b57      	ldr	r3, [pc, #348]	; (80013f4 <ESC_mbxprocess+0x270>)
 8001296:	2106      	movs	r1, #6
 8001298:	5499      	strb	r1, [r3, r2]
            /* activate mailbox */
            ESC_SMenable (1);
 800129a:	2001      	movs	r0, #1
 800129c:	f7ff fc3e 	bl	8000b1c <ESC_SMenable>
            /* use backup mbx */
            ESC_writembx (ESCvar.mbxbackup);
 80012a0:	4b53      	ldr	r3, [pc, #332]	; (80013f0 <ESC_mbxprocess+0x26c>)
 80012a2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fe50 	bl	8000f4c <ESC_writembx>
         }
         ESCvar.toggle = ESCvar.SM[1].ECrep;
 80012ac:	4b50      	ldr	r3, [pc, #320]	; (80013f0 <ESC_mbxprocess+0x26c>)
 80012ae:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 80012b2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b4d      	ldr	r3, [pc, #308]	; (80013f0 <ESC_mbxprocess+0x26c>)
 80012bc:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
         ESCvar.SM[1].PDIrep = ESCvar.toggle;
 80012c0:	4b4b      	ldr	r3, [pc, #300]	; (80013f0 <ESC_mbxprocess+0x26c>)
 80012c2:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	b2d9      	uxtb	r1, r3
 80012cc:	4a48      	ldr	r2, [pc, #288]	; (80013f0 <ESC_mbxprocess+0x26c>)
 80012ce:	f892 30af 	ldrb.w	r3, [r2, #175]	; 0xaf
 80012d2:	f361 0341 	bfi	r3, r1, #1, #1
 80012d6:	f882 30af 	strb.w	r3, [r2, #175]	; 0xaf
         ESC_SMwritepdi (1);
 80012da:	2001      	movs	r0, #1
 80012dc:	f7ff fc00 	bl	8000ae0 <ESC_SMwritepdi>
      }
      return 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	e07f      	b.n	80013e4 <ESC_mbxprocess+0x260>
   }

   /* if the outmailbox is free check if we have something to send */
   if (ESCvar.txcue && (ESCvar.mbxfree || !ESCvar.SM[1].MBXstat))
 80012e4:	4b42      	ldr	r3, [pc, #264]	; (80013f0 <ESC_mbxprocess+0x26c>)
 80012e6:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d02f      	beq.n	800134e <ESC_mbxprocess+0x1ca>
 80012ee:	4b40      	ldr	r3, [pc, #256]	; (80013f0 <ESC_mbxprocess+0x26c>)
 80012f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d107      	bne.n	8001308 <ESC_mbxprocess+0x184>
 80012f8:	4b3d      	ldr	r3, [pc, #244]	; (80013f0 <ESC_mbxprocess+0x26c>)
 80012fa:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80012fe:	f003 0308 	and.w	r3, r3, #8
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2b00      	cmp	r3, #0
 8001306:	d122      	bne.n	800134e <ESC_mbxprocess+0x1ca>
   {
      /* check out request mbx */
      mbxhandle = ESC_outreqbuffer ();
 8001308:	f7ff feea 	bl	80010e0 <ESC_outreqbuffer>
 800130c:	4603      	mov	r3, r0
 800130e:	71fb      	strb	r3, [r7, #7]
      /* outmbx empty and outreq mbx available */
      if (mbxhandle)
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d01b      	beq.n	800134e <ESC_mbxprocess+0x1ca>
      {
         ESC_writembx (mbxhandle);
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fe17 	bl	8000f4c <ESC_writembx>
         /* Refresh SM status */
         ESC_SMstatus (1);
 800131e:	2001      	movs	r0, #1
 8001320:	f7ff fbc0 	bl	8000aa4 <ESC_SMstatus>
         /* change state */
         MBXcontrol[mbxhandle].state = MBXstate_outpost;
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	4a33      	ldr	r2, [pc, #204]	; (80013f4 <ESC_mbxprocess+0x270>)
 8001328:	2104      	movs	r1, #4
 800132a:	54d1      	strb	r1, [r2, r3]
         ESCvar.mbxoutpost = mbxhandle;
 800132c:	4a30      	ldr	r2, [pc, #192]	; (80013f0 <ESC_mbxprocess+0x26c>)
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	f882 307c 	strb.w	r3, [r2, #124]	; 0x7c
         if (ESCvar.txcue)
 8001334:	4b2e      	ldr	r3, [pc, #184]	; (80013f0 <ESC_mbxprocess+0x26c>)
 8001336:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800133a:	2b00      	cmp	r3, #0
 800133c:	d007      	beq.n	800134e <ESC_mbxprocess+0x1ca>
         {
            ESCvar.txcue--;
 800133e:	4b2c      	ldr	r3, [pc, #176]	; (80013f0 <ESC_mbxprocess+0x26c>)
 8001340:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001344:	3b01      	subs	r3, #1
 8001346:	b2da      	uxtb	r2, r3
 8001348:	4b29      	ldr	r3, [pc, #164]	; (80013f0 <ESC_mbxprocess+0x26c>)
 800134a:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
         }
      }
   }

   /* read mailbox if full and no xoe in progress */
   if ((ESCvar.SM[0].MBXstat != 0) && (MBXcontrol[0].state == 0)
 800134e:	4b28      	ldr	r3, [pc, #160]	; (80013f0 <ESC_mbxprocess+0x26c>)
 8001350:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8001354:	f003 0308 	and.w	r3, r3, #8
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d041      	beq.n	80013e2 <ESC_mbxprocess+0x25e>
 800135e:	4b25      	ldr	r3, [pc, #148]	; (80013f4 <ESC_mbxprocess+0x270>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d13d      	bne.n	80013e2 <ESC_mbxprocess+0x25e>
         && (ESCvar.mbxoutpost == 0) && (ESCvar.xoe == 0))
 8001366:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <ESC_mbxprocess+0x26c>)
 8001368:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800136c:	2b00      	cmp	r3, #0
 800136e:	d138      	bne.n	80013e2 <ESC_mbxprocess+0x25e>
 8001370:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <ESC_mbxprocess+0x26c>)
 8001372:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001376:	2b00      	cmp	r3, #0
 8001378:	d133      	bne.n	80013e2 <ESC_mbxprocess+0x25e>
   {
      ESC_readmbx ();
 800137a:	f7ff fda1 	bl	8000ec0 <ESC_readmbx>
      ESCvar.SM[0].MBXstat = 0;
 800137e:	4a1c      	ldr	r2, [pc, #112]	; (80013f0 <ESC_mbxprocess+0x26c>)
 8001380:	f892 30a5 	ldrb.w	r3, [r2, #165]	; 0xa5
 8001384:	f36f 03c3 	bfc	r3, #3, #1
 8001388:	f882 30a5 	strb.w	r3, [r2, #165]	; 0xa5
      if (etohs (MBh->length) == 0)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	b29b      	uxth	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d105      	bne.n	80013a2 <ESC_mbxprocess+0x21e>
      {
         MBX_error (MBXERR_INVALIDHEADER);
 8001396:	2005      	movs	r0, #5
 8001398:	f7ff febc 	bl	8001114 <MBX_error>
         /* drop mailbox */
         MBXcontrol[0].state = MBXstate_idle;
 800139c:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <ESC_mbxprocess+0x270>)
 800139e:	2200      	movs	r2, #0
 80013a0:	701a      	strb	r2, [r3, #0]
      }
      if ((MBh->mbxcnt != 0) && (MBh->mbxcnt == ESCvar.mbxincnt))
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	795b      	ldrb	r3, [r3, #5]
 80013a6:	f023 030f 	bic.w	r3, r3, #15
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d00d      	beq.n	80013cc <ESC_mbxprocess+0x248>
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	795b      	ldrb	r3, [r3, #5]
 80013b4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	461a      	mov	r2, r3
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <ESC_mbxprocess+0x26c>)
 80013be:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d102      	bne.n	80013cc <ESC_mbxprocess+0x248>
      {
         /* drop mailbox */
         MBXcontrol[0].state = MBXstate_idle;
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <ESC_mbxprocess+0x270>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]
      }
      ESCvar.mbxincnt = MBh->mbxcnt;
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	795b      	ldrb	r3, [r3, #5]
 80013d0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	461a      	mov	r2, r3
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <ESC_mbxprocess+0x26c>)
 80013da:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
      return 1;
 80013de:	2301      	movs	r3, #1
 80013e0:	e000      	b.n	80013e4 <ESC_mbxprocess+0x260>
   }

   return 0;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	2000024c 	.word	0x2000024c
 80013f0:	20000180 	.word	0x20000180
 80013f4:	20000414 	.word	0x20000414

080013f8 <ESC_xoeprocess>:
/** Handler for incorrect or unsupported mailbox data. Write error response
 * in Mailbox.
 */
void ESC_xoeprocess (void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
   _MBXh *mbh;
   if (ESCvar.MBXrun == 0)
 80013fe:	4b15      	ldr	r3, [pc, #84]	; (8001454 <ESC_xoeprocess+0x5c>)
 8001400:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001404:	2b00      	cmp	r3, #0
 8001406:	d021      	beq.n	800144c <ESC_xoeprocess+0x54>
   {
      return;
   }
   if ((ESCvar.xoe == 0) && (MBXcontrol[0].state == MBXstate_inclaim))
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <ESC_xoeprocess+0x5c>)
 800140a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800140e:	2b00      	cmp	r3, #0
 8001410:	d11d      	bne.n	800144e <ESC_xoeprocess+0x56>
 8001412:	4b11      	ldr	r3, [pc, #68]	; (8001458 <ESC_xoeprocess+0x60>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d119      	bne.n	800144e <ESC_xoeprocess+0x56>
   {
      mbh = (_MBXh *) &MBX[0];
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <ESC_xoeprocess+0x64>)
 800141c:	607b      	str	r3, [r7, #4]
      if ((mbh->mbxtype == 0) || (etohs (mbh->length) == 0))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	795b      	ldrb	r3, [r3, #5]
 8001422:	f003 030f 	and.w	r3, r3, #15
 8001426:	b2db      	uxtb	r3, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	d004      	beq.n	8001436 <ESC_xoeprocess+0x3e>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	881b      	ldrh	r3, [r3, #0]
 8001430:	b29b      	uxth	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d103      	bne.n	800143e <ESC_xoeprocess+0x46>
      {
         MBX_error (MBXERR_INVALIDHEADER);
 8001436:	2005      	movs	r0, #5
 8001438:	f7ff fe6c 	bl	8001114 <MBX_error>
 800143c:	e002      	b.n	8001444 <ESC_xoeprocess+0x4c>
      }
      else
      {
         MBX_error (MBXERR_UNSUPPORTEDPROTOCOL);
 800143e:	2002      	movs	r0, #2
 8001440:	f7ff fe68 	bl	8001114 <MBX_error>
      }
      /* mailbox type not supported, drop mailbox */
      MBXcontrol[0].state = MBXstate_idle;
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <ESC_xoeprocess+0x60>)
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
 800144a:	e000      	b.n	800144e <ESC_xoeprocess+0x56>
      return;
 800144c:	bf00      	nop
   }
}
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000180 	.word	0x20000180
 8001458:	20000414 	.word	0x20000414
 800145c:	2000024c 	.word	0x2000024c

08001460 <ESC_checkSM23>:
 *
 * @param[in] state   = Requested state.
 * @return = incoming state request if every thing checks out OK. = state (PREOP | ERROR)  if something isn't correct.
 */
uint8_t ESC_checkSM23 (uint8_t state)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *SM;
   ESC_read (ESCREG_SM2, (void *) &ESCvar.SM[2], sizeof (ESCvar.SM[2]));
 800146a:	2208      	movs	r2, #8
 800146c:	4930      	ldr	r1, [pc, #192]	; (8001530 <ESC_checkSM23+0xd0>)
 800146e:	f44f 6001 	mov.w	r0, #2064	; 0x810
 8001472:	f003 f8f9 	bl	8004668 <ESC_read>
   SM = (_ESCsm2 *) & ESCvar.SM[2];
 8001476:	4b2e      	ldr	r3, [pc, #184]	; (8001530 <ESC_checkSM23+0xd0>)
 8001478:	60fb      	str	r3, [r7, #12]
   if ((etohs (SM->PSA) != ESC_SM2_sma) || (etohs (SM->Length) != ESCvar.ESC_SM2_sml)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	b29b      	uxth	r3, r3
 8001480:	f5b3 5f88 	cmp.w	r3, #4352	; 0x1100
 8001484:	d111      	bne.n	80014aa <ESC_checkSM23+0x4a>
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	885b      	ldrh	r3, [r3, #2]
 800148a:	b29a      	uxth	r2, r3
 800148c:	4b29      	ldr	r3, [pc, #164]	; (8001534 <ESC_checkSM23+0xd4>)
 800148e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8001492:	429a      	cmp	r2, r3
 8001494:	d109      	bne.n	80014aa <ESC_checkSM23+0x4a>
       || (SM->Command != ESC_SM2_smc) || !(SM->ActESC & ESC_SM2_act))
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	791b      	ldrb	r3, [r3, #4]
 800149a:	2b24      	cmp	r3, #36	; 0x24
 800149c:	d105      	bne.n	80014aa <ESC_checkSM23+0x4a>
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	799b      	ldrb	r3, [r3, #6]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d105      	bne.n	80014b6 <ESC_checkSM23+0x56>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM2;
 80014aa:	4b22      	ldr	r3, [pc, #136]	; (8001534 <ESC_checkSM23+0xd4>)
 80014ac:	2204      	movs	r2, #4
 80014ae:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      /* fail state change */
      return (ESCpreop | ESCerror);
 80014b2:	2312      	movs	r3, #18
 80014b4:	e038      	b.n	8001528 <ESC_checkSM23+0xc8>
   }
   if ((ESC_SM2_sma + (etohs (SM->Length) * 3)) > ESC_SM3_sma)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	885b      	ldrh	r3, [r3, #2]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	461a      	mov	r2, r3
 80014be:	4613      	mov	r3, r2
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	4413      	add	r3, r2
 80014c4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80014c8:	f5b3 5f8c 	cmp.w	r3, #4480	; 0x1180
 80014cc:	dd05      	ble.n	80014da <ESC_checkSM23+0x7a>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM2;
 80014ce:	4b19      	ldr	r3, [pc, #100]	; (8001534 <ESC_checkSM23+0xd4>)
 80014d0:	2204      	movs	r2, #4
 80014d2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      /* SM2 overlaps SM3, fail state change */
      return (ESCpreop | ESCerror);
 80014d6:	2312      	movs	r3, #18
 80014d8:	e026      	b.n	8001528 <ESC_checkSM23+0xc8>
   }
   ESC_read (ESCREG_SM3, (void *) &ESCvar.SM[3], sizeof (ESCvar.SM[3]));
 80014da:	2208      	movs	r2, #8
 80014dc:	4916      	ldr	r1, [pc, #88]	; (8001538 <ESC_checkSM23+0xd8>)
 80014de:	f640 0018 	movw	r0, #2072	; 0x818
 80014e2:	f003 f8c1 	bl	8004668 <ESC_read>
   SM = (_ESCsm2 *) & ESCvar.SM[3];
 80014e6:	4b14      	ldr	r3, [pc, #80]	; (8001538 <ESC_checkSM23+0xd8>)
 80014e8:	60fb      	str	r3, [r7, #12]
   if ((etohs (SM->PSA) != ESC_SM3_sma) || (etohs (SM->Length) != ESCvar.ESC_SM3_sml)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	f5b3 5f8c 	cmp.w	r3, #4480	; 0x1180
 80014f4:	d111      	bne.n	800151a <ESC_checkSM23+0xba>
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	885b      	ldrh	r3, [r3, #2]
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <ESC_checkSM23+0xd4>)
 80014fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8001502:	429a      	cmp	r2, r3
 8001504:	d109      	bne.n	800151a <ESC_checkSM23+0xba>
       || (SM->Command != ESC_SM3_smc) || !(SM->ActESC & ESC_SM3_act))
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	791b      	ldrb	r3, [r3, #4]
 800150a:	2b20      	cmp	r3, #32
 800150c:	d105      	bne.n	800151a <ESC_checkSM23+0xba>
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	799b      	ldrb	r3, [r3, #6]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b00      	cmp	r3, #0
 8001518:	d105      	bne.n	8001526 <ESC_checkSM23+0xc6>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM3;
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <ESC_checkSM23+0xd4>)
 800151c:	2208      	movs	r2, #8
 800151e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      /* fail state change */
      return (ESCpreop | ESCerror);
 8001522:	2312      	movs	r3, #18
 8001524:	e000      	b.n	8001528 <ESC_checkSM23+0xc8>
   }
   return state;
 8001526:	79fb      	ldrb	r3, [r7, #7]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000230 	.word	0x20000230
 8001534:	20000180 	.word	0x20000180
 8001538:	20000238 	.word	0x20000238

0800153c <ESC_startinput>:
 *
 * @param[in] state   = Requested state.
 * @return = state, incoming state request if every thing checks out OK. =state (PREOP | ERROR) if something isn't correct.
 */
uint8_t ESC_startinput (uint8_t state)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]

   state = ESC_checkSM23 (state);
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff89 	bl	8001460 <ESC_checkSM23>
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]

   if (state != (ESCpreop | ESCerror))
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	2b12      	cmp	r3, #18
 8001556:	d00a      	beq.n	800156e <ESC_startinput+0x32>
   {
      ESC_SMenable (3);
 8001558:	2003      	movs	r0, #3
 800155a:	f7ff fadf 	bl	8000b1c <ESC_SMenable>
      CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_INPUT);
 800155e:	4b2c      	ldr	r3, [pc, #176]	; (8001610 <ESC_startinput+0xd4>)
 8001560:	f3bf 8f5b 	dmb	ish
 8001564:	2201      	movs	r2, #1
 8001566:	701a      	strb	r2, [r3, #0]
 8001568:	f3bf 8f5b 	dmb	ish
 800156c:	e013      	b.n	8001596 <ESC_startinput+0x5a>
   }
   else
   {
      ESC_SMdisable (2);
 800156e:	2002      	movs	r0, #2
 8001570:	f7ff faf0 	bl	8000b54 <ESC_SMdisable>
      ESC_SMdisable (3);
 8001574:	2003      	movs	r0, #3
 8001576:	f7ff faed 	bl	8000b54 <ESC_SMdisable>
      if (ESCvar.SMtestresult & SMRESULT_ERRSM3)
 800157a:	4b26      	ldr	r3, [pc, #152]	; (8001614 <ESC_startinput+0xd8>)
 800157c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001580:	f003 0308 	and.w	r3, r3, #8
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <ESC_startinput+0x54>
      {
         ESC_ALerror (ALERR_INVALIDINPUTSM);
 8001588:	201e      	movs	r0, #30
 800158a:	f7ff f9e3 	bl	8000954 <ESC_ALerror>
 800158e:	e002      	b.n	8001596 <ESC_startinput+0x5a>
      }
      else
      {
         ESC_ALerror (ALERR_INVALIDOUTPUTSM);
 8001590:	201d      	movs	r0, #29
 8001592:	f7ff f9df 	bl	8000954 <ESC_ALerror>
      }
   }

   /* Exit here if polling */
   if (ESCvar.use_interrupt == 0)
 8001596:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <ESC_startinput+0xd8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <ESC_startinput+0x66>
   {
      return state;
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	e032      	b.n	8001608 <ESC_startinput+0xcc>
   }

   if (state != (ESCpreop | ESCerror))
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	2b12      	cmp	r3, #18
 80015a6:	d02e      	beq.n	8001606 <ESC_startinput+0xca>
   {
      uint16_t dc_check_result;
      dc_check_result = ESC_checkDC();
 80015a8:	f7ff fb14 	bl	8000bd4 <ESC_checkDC>
 80015ac:	4603      	mov	r3, r0
 80015ae:	81fb      	strh	r3, [r7, #14]
      if(dc_check_result > 0)
 80015b0:	89fb      	ldrh	r3, [r7, #14]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d013      	beq.n	80015de <ESC_startinput+0xa2>
      {
         ESC_ALerror (dc_check_result);
 80015b6:	89fb      	ldrh	r3, [r7, #14]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff f9cb 	bl	8000954 <ESC_ALerror>
         state = (ESCpreop | ESCerror);
 80015be:	2312      	movs	r3, #18
 80015c0:	71fb      	strb	r3, [r7, #7]

         ESC_SMdisable (2);
 80015c2:	2002      	movs	r0, #2
 80015c4:	f7ff fac6 	bl	8000b54 <ESC_SMdisable>
         ESC_SMdisable (3);
 80015c8:	2003      	movs	r0, #3
 80015ca:	f7ff fac3 	bl	8000b54 <ESC_SMdisable>
         CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_IDLE);
 80015ce:	4b10      	ldr	r3, [pc, #64]	; (8001610 <ESC_startinput+0xd4>)
 80015d0:	f3bf 8f5b 	dmb	ish
 80015d4:	2200      	movs	r2, #0
 80015d6:	701a      	strb	r2, [r3, #0]
 80015d8:	f3bf 8f5b 	dmb	ish
 80015dc:	e013      	b.n	8001606 <ESC_startinput+0xca>
      }
      else
      {
         if (ESCvar.esc_hw_interrupt_enable != NULL)
 80015de:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <ESC_startinput+0xd8>)
 80015e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00f      	beq.n	8001606 <ESC_startinput+0xca>
         {
            if(ESCvar.dcsync > 0)
 80015e6:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <ESC_startinput+0xd8>)
 80015e8:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <ESC_startinput+0xc0>
            {
               ESCvar.esc_hw_interrupt_enable(ESCREG_ALEVENT_DC_SYNC0 |
 80015f0:	4b08      	ldr	r3, [pc, #32]	; (8001614 <ESC_startinput+0xd8>)
 80015f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015f4:	f240 4004 	movw	r0, #1028	; 0x404
 80015f8:	4798      	blx	r3
 80015fa:	e004      	b.n	8001606 <ESC_startinput+0xca>
                     ESCREG_ALEVENT_SM2);
            }
            else
            {
               ESCvar.esc_hw_interrupt_enable(ESCREG_ALEVENT_SM2);
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <ESC_startinput+0xd8>)
 80015fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001600:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001604:	4798      	blx	r3
            }
         }
      }
   }

   return state;
 8001606:	79fb      	ldrb	r3, [r7, #7]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	2000024b 	.word	0x2000024b
 8001614:	20000180 	.word	0x20000180

08001618 <ESC_stopinput>:
/** Unconditional stop of updating inputs by disabling Sync Manager 2 & 3.
 * Set the App.state to APPSTATE_IDLE.
 *
 */
void ESC_stopinput (void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
   CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_IDLE);
 800161c:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <ESC_stopinput+0x3c>)
 800161e:	f3bf 8f5b 	dmb	ish
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]
 8001626:	f3bf 8f5b 	dmb	ish
   ESC_SMdisable (3);
 800162a:	2003      	movs	r0, #3
 800162c:	f7ff fa92 	bl	8000b54 <ESC_SMdisable>
   ESC_SMdisable (2);
 8001630:	2002      	movs	r0, #2
 8001632:	f7ff fa8f 	bl	8000b54 <ESC_SMdisable>

   /* Call interrupt disable hook case it have been configured  */
   if ((ESCvar.use_interrupt != 0) &&
 8001636:	4b08      	ldr	r3, [pc, #32]	; (8001658 <ESC_stopinput+0x40>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d008      	beq.n	8001650 <ESC_stopinput+0x38>
         (ESCvar.esc_hw_interrupt_disable != NULL))
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <ESC_stopinput+0x40>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   if ((ESCvar.use_interrupt != 0) &&
 8001642:	2b00      	cmp	r3, #0
 8001644:	d004      	beq.n	8001650 <ESC_stopinput+0x38>
   {
      ESCvar.esc_hw_interrupt_disable (ESCREG_ALEVENT_DC_SYNC0 |
 8001646:	4b04      	ldr	r3, [pc, #16]	; (8001658 <ESC_stopinput+0x40>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164a:	f240 4004 	movw	r0, #1028	; 0x404
 800164e:	4798      	blx	r3
            ESCREG_ALEVENT_SM2);
   }
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	2000024b 	.word	0x2000024b
 8001658:	20000180 	.word	0x20000180

0800165c <ESC_startoutput>:
 * @param[in] state   = Not used.
 * @return = state unchanged.
 *
 */
uint8_t ESC_startoutput (uint8_t state)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]

   ESC_SMenable (2);
 8001666:	2002      	movs	r0, #2
 8001668:	f7ff fa58 	bl	8000b1c <ESC_SMenable>
   CC_ATOMIC_OR(ESCvar.App.state, APPSTATE_OUTPUT);
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <ESC_startoutput+0x34>)
 800166e:	f3bf 8f5b 	dmb	ish
 8001672:	e8d3 2f4f 	ldrexb	r2, [r3]
 8001676:	f042 0202 	orr.w	r2, r2, #2
 800167a:	e8c3 2f41 	strexb	r1, r2, [r3]
 800167e:	2900      	cmp	r1, #0
 8001680:	d1f7      	bne.n	8001672 <ESC_startoutput+0x16>
 8001682:	f3bf 8f5b 	dmb	ish
   return state;
 8001686:	79fb      	ldrb	r3, [r7, #7]

}
 8001688:	4618      	mov	r0, r3
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	2000024b 	.word	0x2000024b

08001694 <ESC_stopoutput>:
 * Set the App.state to APPSTATE_INPUT. Call application hook APP_safeoutput
 * letting the user to set safe state values on outputs.
 *
 */
void ESC_stopoutput (void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
   CC_ATOMIC_AND(ESCvar.App.state, APPSTATE_INPUT);
 8001698:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <ESC_stopoutput+0x2c>)
 800169a:	f3bf 8f5b 	dmb	ish
 800169e:	e8d3 2f4f 	ldrexb	r2, [r3]
 80016a2:	f002 0201 	and.w	r2, r2, #1
 80016a6:	e8c3 2f41 	strexb	r1, r2, [r3]
 80016aa:	2900      	cmp	r1, #0
 80016ac:	d1f7      	bne.n	800169e <ESC_stopoutput+0xa>
 80016ae:	f3bf 8f5b 	dmb	ish
   ESC_SMdisable (2);
 80016b2:	2002      	movs	r0, #2
 80016b4:	f7ff fa4e 	bl	8000b54 <ESC_SMdisable>
   APP_safeoutput ();
 80016b8:	f7fe ffd4 	bl	8000664 <APP_safeoutput>
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	2000024b 	.word	0x2000024b

080016c4 <ESC_sm_act_event>:
/** The state handler acting on SyncManager Activation BIT(4)
 * events in the Al Event Request register 0x220.
 *
 */
void ESC_sm_act_event (void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
   uint8_t ac, an, as, ax, ax23;

   /* Have at least on Sync Manager  changed */
   if ((ESCvar.ALevent & ESCREG_ALEVENT_SMCHANGE) == 0)
 80016ca:	4b56      	ldr	r3, [pc, #344]	; (8001824 <ESC_sm_act_event+0x160>)
 80016cc:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	f003 0310 	and.w	r3, r3, #16
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 809e 	beq.w	8001818 <ESC_sm_act_event+0x154>
      /* nothing to do */
      return;
   }

   /* Mask state request bits + Error ACK */
   ac = ESCvar.ALcontrol & ESCREG_AL_STATEMASK;
 80016dc:	4b51      	ldr	r3, [pc, #324]	; (8001824 <ESC_sm_act_event+0x160>)
 80016de:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	f003 031f 	and.w	r3, r3, #31
 80016e8:	71fb      	strb	r3, [r7, #7]
   as = ESCvar.ALstatus & ESCREG_AL_STATEMASK;
 80016ea:	4b4e      	ldr	r3, [pc, #312]	; (8001824 <ESC_sm_act_event+0x160>)
 80016ec:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	f003 031f 	and.w	r3, r3, #31
 80016f6:	717b      	strb	r3, [r7, #5]
   an = as;
 80016f8:	797b      	ldrb	r3, [r7, #5]
 80016fa:	71bb      	strb	r3, [r7, #6]
   if (((ac & ESCerror) || (ac == ESCinit)))
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	f003 0310 	and.w	r3, r3, #16
 8001702:	2b00      	cmp	r3, #0
 8001704:	d102      	bne.n	800170c <ESC_sm_act_event+0x48>
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d107      	bne.n	800171c <ESC_sm_act_event+0x58>
   {
      /* if error bit confirmed reset */
      ac &= ESCREG_AL_ERRACKMASK;
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	f003 030f 	and.w	r3, r3, #15
 8001712:	71fb      	strb	r3, [r7, #7]
      an &= ESCREG_AL_ERRACKMASK;
 8001714:	79bb      	ldrb	r3, [r7, #6]
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	71bb      	strb	r3, [r7, #6]
   }
   /* Enter SM changed handling for all steps but Init and Boot when Mailboxes
    * is up and running
    */
   if ((as & ESCREG_AL_ALLBUTINITMASK) &&
 800171c:	797b      	ldrb	r3, [r7, #5]
 800171e:	f003 030e 	and.w	r3, r3, #14
 8001722:	2b00      	cmp	r3, #0
 8001724:	d05f      	beq.n	80017e6 <ESC_sm_act_event+0x122>
 8001726:	797b      	ldrb	r3, [r7, #5]
 8001728:	2b03      	cmp	r3, #3
 800172a:	d05c      	beq.n	80017e6 <ESC_sm_act_event+0x122>
       ((as == ESCboot) == 0) && ESCvar.MBXrun)
 800172c:	4b3d      	ldr	r3, [pc, #244]	; (8001824 <ESC_sm_act_event+0x160>)
 800172e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001732:	2b00      	cmp	r3, #0
 8001734:	d057      	beq.n	80017e6 <ESC_sm_act_event+0x122>
   {
      /* Validate Sync Managers, reading the Activation register will
       * acknowledge the SyncManager Activation event making us enter
       * this execution path.
       */
      ax = ESC_checkmbx (as);
 8001736:	797b      	ldrb	r3, [r7, #5]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fa75 	bl	8000c28 <ESC_checkmbx>
 800173e:	4603      	mov	r3, r0
 8001740:	713b      	strb	r3, [r7, #4]
      ax23 = ESC_checkSM23 (as);
 8001742:	797b      	ldrb	r3, [r7, #5]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fe8b 	bl	8001460 <ESC_checkSM23>
 800174a:	4603      	mov	r3, r0
 800174c:	70fb      	strb	r3, [r7, #3]
      if ((an & ESCerror) && ((ac & ESCerror) == 0))
 800174e:	79bb      	ldrb	r3, [r7, #6]
 8001750:	f003 0310 	and.w	r3, r3, #16
 8001754:	2b00      	cmp	r3, #0
 8001756:	d004      	beq.n	8001762 <ESC_sm_act_event+0x9e>
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	f003 0310 	and.w	r3, r3, #16
 800175e:	2b00      	cmp	r3, #0
 8001760:	d040      	beq.n	80017e4 <ESC_sm_act_event+0x120>
         /* if in error then stay there */
      }
      /* Have we been forced to step down to INIT we will stop mailboxes,
       * update AL Status Code and exit ESC_state
       */
      else if (ax == (ESCinit | ESCerror))
 8001762:	793b      	ldrb	r3, [r7, #4]
 8001764:	2b11      	cmp	r3, #17
 8001766:	d11a      	bne.n	800179e <ESC_sm_act_event+0xda>
      {
         /* If we have activated Inputs and Outputs we need to disable them */
         if (CC_ATOMIC_GET(ESCvar.App.state))
 8001768:	4b2f      	ldr	r3, [pc, #188]	; (8001828 <ESC_sm_act_event+0x164>)
 800176a:	f3bf 8f5b 	dmb	ish
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	f3bf 8f5b 	dmb	ish
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <ESC_sm_act_event+0xbe>
         {
            ESC_stopoutput ();
 800177a:	f7ff ff8b 	bl	8001694 <ESC_stopoutput>
            ESC_stopinput ();
 800177e:	f7ff ff4b 	bl	8001618 <ESC_stopinput>
         }
         /* Stop mailboxes and update ALStatus code */
         ESC_stopmbx ();
 8001782:	f7ff fb53 	bl	8000e2c <ESC_stopmbx>
         ESC_ALerror (ALERR_INVALIDMBXCONFIG);
 8001786:	2016      	movs	r0, #22
 8001788:	f7ff f8e4 	bl	8000954 <ESC_ALerror>
         ESCvar.MBXrun = 0;
 800178c:	4b25      	ldr	r3, [pc, #148]	; (8001824 <ESC_sm_act_event+0x160>)
 800178e:	2200      	movs	r2, #0
 8001790:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
         ESC_ALstatus (ax);
 8001794:	793b      	ldrb	r3, [r7, #4]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff f8f6 	bl	8000988 <ESC_ALstatus>
         return;
 800179c:	e03f      	b.n	800181e <ESC_sm_act_event+0x15a>
      }
      /* Have we been forced to step down to PREOP we will stop inputs
       * and outputs, update AL Status Code and exit ESC_state
       */
      else if (CC_ATOMIC_GET(ESCvar.App.state) && (ax23 == (ESCpreop | ESCerror)))
 800179e:	4b22      	ldr	r3, [pc, #136]	; (8001828 <ESC_sm_act_event+0x164>)
 80017a0:	f3bf 8f5b 	dmb	ish
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	f3bf 8f5b 	dmb	ish
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d035      	beq.n	800181c <ESC_sm_act_event+0x158>
 80017b0:	78fb      	ldrb	r3, [r7, #3]
 80017b2:	2b12      	cmp	r3, #18
 80017b4:	d132      	bne.n	800181c <ESC_sm_act_event+0x158>
      {
         ESC_stopoutput ();
 80017b6:	f7ff ff6d 	bl	8001694 <ESC_stopoutput>
         ESC_stopinput ();
 80017ba:	f7ff ff2d 	bl	8001618 <ESC_stopinput>
         if (ESCvar.SMtestresult & SMRESULT_ERRSM3)
 80017be:	4b19      	ldr	r3, [pc, #100]	; (8001824 <ESC_sm_act_event+0x160>)
 80017c0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80017c4:	f003 0308 	and.w	r3, r3, #8
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <ESC_sm_act_event+0x110>
         {
            ESC_ALerror (ALERR_INVALIDINPUTSM);
 80017cc:	201e      	movs	r0, #30
 80017ce:	f7ff f8c1 	bl	8000954 <ESC_ALerror>
 80017d2:	e002      	b.n	80017da <ESC_sm_act_event+0x116>
         }
         else
         {
            ESC_ALerror (ALERR_INVALIDOUTPUTSM);
 80017d4:	201d      	movs	r0, #29
 80017d6:	f7ff f8bd 	bl	8000954 <ESC_ALerror>
         }
         ESC_ALstatus (ax23);
 80017da:	78fb      	ldrb	r3, [r7, #3]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff f8d3 	bl	8000988 <ESC_ALstatus>
      if ((an & ESCerror) && ((ac & ESCerror) == 0))
 80017e2:	e01b      	b.n	800181c <ESC_sm_act_event+0x158>
 80017e4:	e01a      	b.n	800181c <ESC_sm_act_event+0x158>
      }
   }
   else
   {
      ESC_SMack (0);
 80017e6:	2000      	movs	r0, #0
 80017e8:	f7ff f946 	bl	8000a78 <ESC_SMack>
      ESC_SMack (1);
 80017ec:	2001      	movs	r0, #1
 80017ee:	f7ff f943 	bl	8000a78 <ESC_SMack>
      ESC_SMack (2);
 80017f2:	2002      	movs	r0, #2
 80017f4:	f7ff f940 	bl	8000a78 <ESC_SMack>
      ESC_SMack (3);
 80017f8:	2003      	movs	r0, #3
 80017fa:	f7ff f93d 	bl	8000a78 <ESC_SMack>
      ESC_SMack (4);
 80017fe:	2004      	movs	r0, #4
 8001800:	f7ff f93a 	bl	8000a78 <ESC_SMack>
      ESC_SMack (5);
 8001804:	2005      	movs	r0, #5
 8001806:	f7ff f937 	bl	8000a78 <ESC_SMack>
      ESC_SMack (6);
 800180a:	2006      	movs	r0, #6
 800180c:	f7ff f934 	bl	8000a78 <ESC_SMack>
      ESC_SMack (7);
 8001810:	2007      	movs	r0, #7
 8001812:	f7ff f931 	bl	8000a78 <ESC_SMack>
 8001816:	e002      	b.n	800181e <ESC_sm_act_event+0x15a>
      return;
 8001818:	bf00      	nop
 800181a:	e000      	b.n	800181e <ESC_sm_act_event+0x15a>
      if ((an & ESCerror) && ((ac & ESCerror) == 0))
 800181c:	bf00      	nop
   }
}
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000180 	.word	0x20000180
 8001828:	2000024b 	.word	0x2000024b

0800182c <ESC_state>:
/** The state handler acting on ALControl Bit(0)
 * events in the Al Event Request register 0x220.
 *
 */
void ESC_state (void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
   uint8_t ac, an, as;

   /* Do we have a state change request pending */
   if (ESCvar.ALevent & ESCREG_ALEVENT_CONTROL)
 8001832:	4bdc      	ldr	r3, [pc, #880]	; (8001ba4 <ESC_state+0x378>)
 8001834:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 8001838:	b29b      	uxth	r3, r3
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 822f 	beq.w	8001ca2 <ESC_state+0x476>
   {
      ESC_read (ESCREG_ALCONTROL, (void *) &ESCvar.ALcontrol,
 8001844:	2202      	movs	r2, #2
 8001846:	49d8      	ldr	r1, [pc, #864]	; (8001ba8 <ESC_state+0x37c>)
 8001848:	f44f 7090 	mov.w	r0, #288	; 0x120
 800184c:	f002 ff0c 	bl	8004668 <ESC_read>
                sizeof (ESCvar.ALcontrol));
      ESCvar.ALcontrol = etohs (ESCvar.ALcontrol);
 8001850:	4bd4      	ldr	r3, [pc, #848]	; (8001ba4 <ESC_state+0x378>)
 8001852:	f8b3 2072 	ldrh.w	r2, [r3, #114]	; 0x72
 8001856:	4bd3      	ldr	r3, [pc, #844]	; (8001ba4 <ESC_state+0x378>)
 8001858:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
   {
      /* nothing to do */
      return;
   }
   /* Mask state request bits + Error ACK */
   ac = ESCvar.ALcontrol & ESCREG_AL_STATEMASK;
 800185c:	4bd1      	ldr	r3, [pc, #836]	; (8001ba4 <ESC_state+0x378>)
 800185e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8001862:	b2db      	uxtb	r3, r3
 8001864:	f003 031f 	and.w	r3, r3, #31
 8001868:	71fb      	strb	r3, [r7, #7]
   as = ESCvar.ALstatus & ESCREG_AL_STATEMASK;
 800186a:	4bce      	ldr	r3, [pc, #824]	; (8001ba4 <ESC_state+0x378>)
 800186c:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8001870:	b2db      	uxtb	r3, r3
 8001872:	f003 031f 	and.w	r3, r3, #31
 8001876:	b2db      	uxtb	r3, r3
 8001878:	717b      	strb	r3, [r7, #5]
   an = as;
 800187a:	797b      	ldrb	r3, [r7, #5]
 800187c:	71bb      	strb	r3, [r7, #6]
   if (((ac & ESCerror) || (ac == ESCinit)))
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	f003 0310 	and.w	r3, r3, #16
 8001884:	2b00      	cmp	r3, #0
 8001886:	d102      	bne.n	800188e <ESC_state+0x62>
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d108      	bne.n	80018a0 <ESC_state+0x74>
   {
      /* if error bit confirmed reset */
      ac &= ESCREG_AL_ERRACKMASK;
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	f003 030f 	and.w	r3, r3, #15
 8001894:	71fb      	strb	r3, [r7, #7]
      an &= ESCREG_AL_ERRACKMASK;
 8001896:	79bb      	ldrb	r3, [r7, #6]
 8001898:	f003 030f 	and.w	r3, r3, #15
 800189c:	b2db      	uxtb	r3, r3
 800189e:	71bb      	strb	r3, [r7, #6]
   }

   /* Error state not acked, leave original */
   if ((an & ESCerror) && ((ac & ESCerror) == 0))
 80018a0:	79bb      	ldrb	r3, [r7, #6]
 80018a2:	f003 0310 	and.w	r3, r3, #16
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d005      	beq.n	80018b6 <ESC_state+0x8a>
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	f003 0310 	and.w	r3, r3, #16
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 81f8 	beq.w	8001ca6 <ESC_state+0x47a>
   {
      return;
   }

   /* Mask high bits ALcommand, low bits ALstatus */
   as = (ac << 4) | (as & 0x0f);
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	011b      	lsls	r3, r3, #4
 80018ba:	b25a      	sxtb	r2, r3
 80018bc:	797b      	ldrb	r3, [r7, #5]
 80018be:	b25b      	sxtb	r3, r3
 80018c0:	f003 030f 	and.w	r3, r3, #15
 80018c4:	b25b      	sxtb	r3, r3
 80018c6:	4313      	orrs	r3, r2
 80018c8:	b25b      	sxtb	r3, r3
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	717b      	strb	r3, [r7, #5]

   /* Call post state change hook case it have been configured  */
   if (ESCvar.pre_state_change_hook != NULL)
 80018ce:	4bb5      	ldr	r3, [pc, #724]	; (8001ba4 <ESC_state+0x378>)
 80018d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d005      	beq.n	80018e2 <ESC_state+0xb6>
   {
      ESCvar.pre_state_change_hook (&as, &an);
 80018d6:	4bb3      	ldr	r3, [pc, #716]	; (8001ba4 <ESC_state+0x378>)
 80018d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018da:	1db9      	adds	r1, r7, #6
 80018dc:	1d7a      	adds	r2, r7, #5
 80018de:	4610      	mov	r0, r2
 80018e0:	4798      	blx	r3
   }

   /* Switch through the state change requested via AlControl from
    * current state read in AL status
    */
   switch (as)
 80018e2:	797b      	ldrb	r3, [r7, #5]
 80018e4:	3b11      	subs	r3, #17
 80018e6:	2b77      	cmp	r3, #119	; 0x77
 80018e8:	f200 81a2 	bhi.w	8001c30 <ESC_state+0x404>
 80018ec:	a201      	add	r2, pc, #4	; (adr r2, 80018f4 <ESC_state+0xc8>)
 80018ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f2:	bf00      	nop
 80018f4:	08001c5b 	.word	0x08001c5b
 80018f8:	08001b29 	.word	0x08001b29
 80018fc:	08001b33 	.word	0x08001b33
 8001900:	08001b1b 	.word	0x08001b1b
 8001904:	08001c31 	.word	0x08001c31
 8001908:	08001c31 	.word	0x08001c31
 800190c:	08001c31 	.word	0x08001c31
 8001910:	08001b09 	.word	0x08001b09
 8001914:	08001c31 	.word	0x08001c31
 8001918:	08001c31 	.word	0x08001c31
 800191c:	08001c31 	.word	0x08001c31
 8001920:	08001c31 	.word	0x08001c31
 8001924:	08001c31 	.word	0x08001c31
 8001928:	08001c31 	.word	0x08001c31
 800192c:	08001c31 	.word	0x08001c31
 8001930:	08001c31 	.word	0x08001c31
 8001934:	08001ad5 	.word	0x08001ad5
 8001938:	08001c5b 	.word	0x08001c5b
 800193c:	08001b3d 	.word	0x08001b3d
 8001940:	08001bf3 	.word	0x08001bf3
 8001944:	08001c31 	.word	0x08001c31
 8001948:	08001c31 	.word	0x08001c31
 800194c:	08001c31 	.word	0x08001c31
 8001950:	08001be5 	.word	0x08001be5
 8001954:	08001c31 	.word	0x08001c31
 8001958:	08001c31 	.word	0x08001c31
 800195c:	08001c31 	.word	0x08001c31
 8001960:	08001c31 	.word	0x08001c31
 8001964:	08001c31 	.word	0x08001c31
 8001968:	08001c31 	.word	0x08001c31
 800196c:	08001c31 	.word	0x08001c31
 8001970:	08001c31 	.word	0x08001c31
 8001974:	08001aeb 	.word	0x08001aeb
 8001978:	08001b3d 	.word	0x08001b3d
 800197c:	08001aeb 	.word	0x08001aeb
 8001980:	08001bfd 	.word	0x08001bfd
 8001984:	08001c31 	.word	0x08001c31
 8001988:	08001c31 	.word	0x08001c31
 800198c:	08001c31 	.word	0x08001c31
 8001990:	08001c17 	.word	0x08001c17
 8001994:	08001c31 	.word	0x08001c31
 8001998:	08001c31 	.word	0x08001c31
 800199c:	08001c31 	.word	0x08001c31
 80019a0:	08001c31 	.word	0x08001c31
 80019a4:	08001c31 	.word	0x08001c31
 80019a8:	08001c31 	.word	0x08001c31
 80019ac:	08001c31 	.word	0x08001c31
 80019b0:	08001c31 	.word	0x08001c31
 80019b4:	08001afd 	.word	0x08001afd
 80019b8:	08001b49 	.word	0x08001b49
 80019bc:	08001b3d 	.word	0x08001b3d
 80019c0:	08001b49 	.word	0x08001b49
 80019c4:	08001c31 	.word	0x08001c31
 80019c8:	08001c31 	.word	0x08001c31
 80019cc:	08001c31 	.word	0x08001c31
 80019d0:	08001c27 	.word	0x08001c27
 80019d4:	08001c31 	.word	0x08001c31
 80019d8:	08001c31 	.word	0x08001c31
 80019dc:	08001c31 	.word	0x08001c31
 80019e0:	08001c31 	.word	0x08001c31
 80019e4:	08001c31 	.word	0x08001c31
 80019e8:	08001c31 	.word	0x08001c31
 80019ec:	08001c31 	.word	0x08001c31
 80019f0:	08001c31 	.word	0x08001c31
 80019f4:	08001c31 	.word	0x08001c31
 80019f8:	08001c31 	.word	0x08001c31
 80019fc:	08001c31 	.word	0x08001c31
 8001a00:	08001c31 	.word	0x08001c31
 8001a04:	08001c31 	.word	0x08001c31
 8001a08:	08001c31 	.word	0x08001c31
 8001a0c:	08001c31 	.word	0x08001c31
 8001a10:	08001c31 	.word	0x08001c31
 8001a14:	08001c31 	.word	0x08001c31
 8001a18:	08001c31 	.word	0x08001c31
 8001a1c:	08001c31 	.word	0x08001c31
 8001a20:	08001c31 	.word	0x08001c31
 8001a24:	08001c31 	.word	0x08001c31
 8001a28:	08001c31 	.word	0x08001c31
 8001a2c:	08001c31 	.word	0x08001c31
 8001a30:	08001c31 	.word	0x08001c31
 8001a34:	08001c31 	.word	0x08001c31
 8001a38:	08001c31 	.word	0x08001c31
 8001a3c:	08001c31 	.word	0x08001c31
 8001a40:	08001c31 	.word	0x08001c31
 8001a44:	08001c31 	.word	0x08001c31
 8001a48:	08001c31 	.word	0x08001c31
 8001a4c:	08001c31 	.word	0x08001c31
 8001a50:	08001c31 	.word	0x08001c31
 8001a54:	08001c31 	.word	0x08001c31
 8001a58:	08001c31 	.word	0x08001c31
 8001a5c:	08001c31 	.word	0x08001c31
 8001a60:	08001c31 	.word	0x08001c31
 8001a64:	08001c31 	.word	0x08001c31
 8001a68:	08001c31 	.word	0x08001c31
 8001a6c:	08001c31 	.word	0x08001c31
 8001a70:	08001c31 	.word	0x08001c31
 8001a74:	08001c31 	.word	0x08001c31
 8001a78:	08001c31 	.word	0x08001c31
 8001a7c:	08001c31 	.word	0x08001c31
 8001a80:	08001c31 	.word	0x08001c31
 8001a84:	08001c31 	.word	0x08001c31
 8001a88:	08001c31 	.word	0x08001c31
 8001a8c:	08001c31 	.word	0x08001c31
 8001a90:	08001c31 	.word	0x08001c31
 8001a94:	08001c31 	.word	0x08001c31
 8001a98:	08001c31 	.word	0x08001c31
 8001a9c:	08001c31 	.word	0x08001c31
 8001aa0:	08001c31 	.word	0x08001c31
 8001aa4:	08001c31 	.word	0x08001c31
 8001aa8:	08001c31 	.word	0x08001c31
 8001aac:	08001c31 	.word	0x08001c31
 8001ab0:	08001c31 	.word	0x08001c31
 8001ab4:	08001afd 	.word	0x08001afd
 8001ab8:	08001bd9 	.word	0x08001bd9
 8001abc:	08001b3d 	.word	0x08001b3d
 8001ac0:	08001c09 	.word	0x08001c09
 8001ac4:	08001c31 	.word	0x08001c31
 8001ac8:	08001c31 	.word	0x08001c31
 8001acc:	08001c31 	.word	0x08001c31
 8001ad0:	08001c5b 	.word	0x08001c5b
         break;
      }
      case INIT_TO_PREOP:
      {
         /* get station address */
         ESC_address ();
 8001ad4:	f7ff f85a 	bl	8000b8c <ESC_address>
         COE_initDefaultValues ();
 8001ad8:	f001 fe82 	bl	80037e0 <COE_initDefaultValues>
         an = ESC_startmbx (ac);
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff f918 	bl	8000d14 <ESC_startmbx>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	71bb      	strb	r3, [r7, #6]
         break;
 8001ae8:	e0ba      	b.n	8001c60 <ESC_state+0x434>
      }
      case INIT_TO_BOOT:
      case BOOT_TO_BOOT:
      {
         /* get station address */
         ESC_address ();
 8001aea:	f7ff f84f 	bl	8000b8c <ESC_address>
         an = ESC_startmbxboot (ac);
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff f955 	bl	8000da0 <ESC_startmbxboot>
 8001af6:	4603      	mov	r3, r0
 8001af8:	71bb      	strb	r3, [r7, #6]
         break;
 8001afa:	e0b1      	b.n	8001c60 <ESC_state+0x434>
      }
      case INIT_TO_SAFEOP:
      case INIT_TO_OP:
      {
         an = ESCinit | ESCerror;
 8001afc:	2311      	movs	r3, #17
 8001afe:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 8001b00:	2011      	movs	r0, #17
 8001b02:	f7fe ff27 	bl	8000954 <ESC_ALerror>
         break;
 8001b06:	e0ab      	b.n	8001c60 <ESC_state+0x434>
      }
      case OP_TO_INIT:
      {
         ESC_stopoutput ();
 8001b08:	f7ff fdc4 	bl	8001694 <ESC_stopoutput>
         ESC_stopinput ();
 8001b0c:	f7ff fd84 	bl	8001618 <ESC_stopinput>
         ESC_stopmbx ();
 8001b10:	f7ff f98c 	bl	8000e2c <ESC_stopmbx>
         an = ESCinit;
 8001b14:	2301      	movs	r3, #1
 8001b16:	71bb      	strb	r3, [r7, #6]
         break;
 8001b18:	e0a2      	b.n	8001c60 <ESC_state+0x434>
      }
      case SAFEOP_TO_INIT:
      {
         ESC_stopinput ();
 8001b1a:	f7ff fd7d 	bl	8001618 <ESC_stopinput>
         ESC_stopmbx ();
 8001b1e:	f7ff f985 	bl	8000e2c <ESC_stopmbx>
         an = ESCinit;
 8001b22:	2301      	movs	r3, #1
 8001b24:	71bb      	strb	r3, [r7, #6]
         break;
 8001b26:	e09b      	b.n	8001c60 <ESC_state+0x434>
      }
      case PREOP_TO_INIT:
      {
         ESC_stopmbx ();
 8001b28:	f7ff f980 	bl	8000e2c <ESC_stopmbx>
         an = ESCinit;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	71bb      	strb	r3, [r7, #6]
         break;
 8001b30:	e096      	b.n	8001c60 <ESC_state+0x434>
      }
      case BOOT_TO_INIT:
      {
         ESC_stopmbx ();
 8001b32:	f7ff f97b 	bl	8000e2c <ESC_stopmbx>
         an = ESCinit;
 8001b36:	2301      	movs	r3, #1
 8001b38:	71bb      	strb	r3, [r7, #6]
         break;
 8001b3a:	e091      	b.n	8001c60 <ESC_state+0x434>
      case PREOP_TO_BOOT:
      case BOOT_TO_PREOP:
      case BOOT_TO_SAFEOP:
      case BOOT_TO_OP:
      {
         an = ESCpreop | ESCerror;
 8001b3c:	2312      	movs	r3, #18
 8001b3e:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 8001b40:	2011      	movs	r0, #17
 8001b42:	f7fe ff07 	bl	8000954 <ESC_ALerror>
         break;
 8001b46:	e08b      	b.n	8001c60 <ESC_state+0x434>
      }
      case PREOP_TO_SAFEOP:
      case SAFEOP_TO_SAFEOP:
      {
         ESCvar.ESC_SM2_sml = sizeOfPDO (RX_PDO_OBJIDX, &ESCvar.sm2mappings,
 8001b48:	2304      	movs	r3, #4
 8001b4a:	4a18      	ldr	r2, [pc, #96]	; (8001bac <ESC_state+0x380>)
 8001b4c:	4918      	ldr	r1, [pc, #96]	; (8001bb0 <ESC_state+0x384>)
 8001b4e:	f641 4012 	movw	r0, #7186	; 0x1c12
 8001b52:	f000 f9a7 	bl	8001ea4 <sizeOfPDO>
 8001b56:	4603      	mov	r3, r0
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <ESC_state+0x378>)
 8001b5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
                                         SMmap2, MAX_MAPPINGS_SM2);
         if (ESCvar.sm2mappings < 0)
 8001b60:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <ESC_state+0x378>)
 8001b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	da05      	bge.n	8001b76 <ESC_state+0x34a>
         {
            an = ESCpreop | ESCerror;
 8001b6a:	2312      	movs	r3, #18
 8001b6c:	71bb      	strb	r3, [r7, #6]
            ESC_ALerror (ALERR_INVALIDOUTPUTSM);
 8001b6e:	201d      	movs	r0, #29
 8001b70:	f7fe fef0 	bl	8000954 <ESC_ALerror>
            break;
 8001b74:	e074      	b.n	8001c60 <ESC_state+0x434>
         }

         ESCvar.ESC_SM3_sml = sizeOfPDO (TX_PDO_OBJIDX, &ESCvar.sm3mappings,
 8001b76:	2305      	movs	r3, #5
 8001b78:	4a0e      	ldr	r2, [pc, #56]	; (8001bb4 <ESC_state+0x388>)
 8001b7a:	490f      	ldr	r1, [pc, #60]	; (8001bb8 <ESC_state+0x38c>)
 8001b7c:	f641 4013 	movw	r0, #7187	; 0x1c13
 8001b80:	f000 f990 	bl	8001ea4 <sizeOfPDO>
 8001b84:	4603      	mov	r3, r0
 8001b86:	461a      	mov	r2, r3
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <ESC_state+0x378>)
 8001b8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
                                         SMmap3, MAX_MAPPINGS_SM3);
         if (ESCvar.sm3mappings < 0)
 8001b8e:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <ESC_state+0x378>)
 8001b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	da11      	bge.n	8001bbc <ESC_state+0x390>
         {
            an = ESCpreop | ESCerror;
 8001b98:	2312      	movs	r3, #18
 8001b9a:	71bb      	strb	r3, [r7, #6]
            ESC_ALerror (ALERR_INVALIDINPUTSM);
 8001b9c:	201e      	movs	r0, #30
 8001b9e:	f7fe fed9 	bl	8000954 <ESC_ALerror>
            break;
 8001ba2:	e05d      	b.n	8001c60 <ESC_state+0x434>
 8001ba4:	20000180 	.word	0x20000180
 8001ba8:	200001f2 	.word	0x200001f2
 8001bac:	200003cc 	.word	0x200003cc
 8001bb0:	20000210 	.word	0x20000210
 8001bb4:	200003ec 	.word	0x200003ec
 8001bb8:	20000214 	.word	0x20000214
         }

         an = ESC_startinput (ac);
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff fcbc 	bl	800153c <ESC_startinput>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	71bb      	strb	r3, [r7, #6]
         if (an == ac)
 8001bc8:	79bb      	ldrb	r3, [r7, #6]
 8001bca:	79fa      	ldrb	r2, [r7, #7]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d146      	bne.n	8001c5e <ESC_state+0x432>
         {
            ESC_SMenable (2);
 8001bd0:	2002      	movs	r0, #2
 8001bd2:	f7fe ffa3 	bl	8000b1c <ESC_SMenable>
         }
         break;
 8001bd6:	e042      	b.n	8001c5e <ESC_state+0x432>
      }
      case PREOP_TO_OP:
      {
         an = ESCpreop | ESCerror;
 8001bd8:	2312      	movs	r3, #18
 8001bda:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 8001bdc:	2011      	movs	r0, #17
 8001bde:	f7fe feb9 	bl	8000954 <ESC_ALerror>
         break;
 8001be2:	e03d      	b.n	8001c60 <ESC_state+0x434>
      }
      case OP_TO_PREOP:
      {
         ESC_stopoutput ();
 8001be4:	f7ff fd56 	bl	8001694 <ESC_stopoutput>
         ESC_stopinput ();
 8001be8:	f7ff fd16 	bl	8001618 <ESC_stopinput>
         an = ESCpreop;
 8001bec:	2302      	movs	r3, #2
 8001bee:	71bb      	strb	r3, [r7, #6]
         break;
 8001bf0:	e036      	b.n	8001c60 <ESC_state+0x434>
      }
      case SAFEOP_TO_PREOP:
      {
         ESC_stopinput ();
 8001bf2:	f7ff fd11 	bl	8001618 <ESC_stopinput>
         an = ESCpreop;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	71bb      	strb	r3, [r7, #6]
         break;
 8001bfa:	e031      	b.n	8001c60 <ESC_state+0x434>
      }
      case SAFEOP_TO_BOOT:
      {
         an = ESCsafeop | ESCerror;
 8001bfc:	2314      	movs	r3, #20
 8001bfe:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 8001c00:	2011      	movs	r0, #17
 8001c02:	f7fe fea7 	bl	8000954 <ESC_ALerror>
         break;
 8001c06:	e02b      	b.n	8001c60 <ESC_state+0x434>
      }
      case SAFEOP_TO_OP:
      {
         an = ESC_startoutput (ac);
 8001c08:	79fb      	ldrb	r3, [r7, #7]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fd26 	bl	800165c <ESC_startoutput>
 8001c10:	4603      	mov	r3, r0
 8001c12:	71bb      	strb	r3, [r7, #6]
         break;
 8001c14:	e024      	b.n	8001c60 <ESC_state+0x434>
      }
      case OP_TO_BOOT:
      {
         an = ESCsafeop | ESCerror;
 8001c16:	2314      	movs	r3, #20
 8001c18:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 8001c1a:	2011      	movs	r0, #17
 8001c1c:	f7fe fe9a 	bl	8000954 <ESC_ALerror>
         ESC_stopoutput ();
 8001c20:	f7ff fd38 	bl	8001694 <ESC_stopoutput>
         break;
 8001c24:	e01c      	b.n	8001c60 <ESC_state+0x434>
      }
      case OP_TO_SAFEOP:
      {
         an = ESCsafeop;
 8001c26:	2304      	movs	r3, #4
 8001c28:	71bb      	strb	r3, [r7, #6]
         ESC_stopoutput ();
 8001c2a:	f7ff fd33 	bl	8001694 <ESC_stopoutput>
         break;
 8001c2e:	e017      	b.n	8001c60 <ESC_state+0x434>
      }
      default:
      {
         if (an == ESCop)
 8001c30:	79bb      	ldrb	r3, [r7, #6]
 8001c32:	2b08      	cmp	r3, #8
 8001c34:	d103      	bne.n	8001c3e <ESC_state+0x412>
         {
            ESC_stopoutput ();
 8001c36:	f7ff fd2d 	bl	8001694 <ESC_stopoutput>
            an = ESCsafeop;
 8001c3a:	2304      	movs	r3, #4
 8001c3c:	71bb      	strb	r3, [r7, #6]
         }
         if (as == ESCsafeop)
 8001c3e:	797b      	ldrb	r3, [r7, #5]
 8001c40:	2b04      	cmp	r3, #4
 8001c42:	d101      	bne.n	8001c48 <ESC_state+0x41c>
         {
            ESC_stopinput ();
 8001c44:	f7ff fce8 	bl	8001618 <ESC_stopinput>
         }
         an |= ESCerror;
 8001c48:	79bb      	ldrb	r3, [r7, #6]
 8001c4a:	f043 0310 	orr.w	r3, r3, #16
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_UNKNOWNSTATE);
 8001c52:	2012      	movs	r0, #18
 8001c54:	f7fe fe7e 	bl	8000954 <ESC_ALerror>
         break;
 8001c58:	e002      	b.n	8001c60 <ESC_state+0x434>
         break;
 8001c5a:	bf00      	nop
 8001c5c:	e000      	b.n	8001c60 <ESC_state+0x434>
         break;
 8001c5e:	bf00      	nop
      }
   }

   /* Call post state change hook case it have been configured  */
   if (ESCvar.post_state_change_hook != NULL)
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <ESC_state+0x484>)
 8001c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <ESC_state+0x448>
   {
      ESCvar.post_state_change_hook (&as, &an);
 8001c68:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <ESC_state+0x484>)
 8001c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6c:	1db9      	adds	r1, r7, #6
 8001c6e:	1d7a      	adds	r2, r7, #5
 8001c70:	4610      	mov	r0, r2
 8001c72:	4798      	blx	r3
   }

   if (!(an & ESCerror) && (ESCvar.ALerror))
 8001c74:	79bb      	ldrb	r3, [r7, #6]
 8001c76:	f003 0310 	and.w	r3, r3, #16
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d107      	bne.n	8001c8e <ESC_state+0x462>
 8001c7e:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <ESC_state+0x484>)
 8001c80:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d002      	beq.n	8001c8e <ESC_state+0x462>
   {
      /* clear error */
      ESC_ALerror (ALERR_NONE);
 8001c88:	2000      	movs	r0, #0
 8001c8a:	f7fe fe63 	bl	8000954 <ESC_ALerror>
   }

   ESC_ALstatus (an);
 8001c8e:	79bb      	ldrb	r3, [r7, #6]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe fe79 	bl	8000988 <ESC_ALstatus>
   DPRINT ("state %x\n", an);
 8001c96:	79bb      	ldrb	r3, [r7, #6]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4806      	ldr	r0, [pc, #24]	; (8001cb4 <ESC_state+0x488>)
 8001c9c:	f008 fd8c 	bl	800a7b8 <iprintf>
 8001ca0:	e002      	b.n	8001ca8 <ESC_state+0x47c>
      return;
 8001ca2:	bf00      	nop
 8001ca4:	e000      	b.n	8001ca8 <ESC_state+0x47c>
      return;
 8001ca6:	bf00      	nop
}
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000180 	.word	0x20000180
 8001cb4:	0800b1e8 	.word	0x0800b1e8

08001cb8 <ESC_config>:
 *
 * @param[in] cfg   = Pointer to the Application configuration variable
 * holding application specific details. Data is copied.
 */
void ESC_config (esc_cfg_t * cfg)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
   static sm_cfg_t mb1 = {MBX1_sma, MBX1_sml, MBX1_sme, MBX1_smc, 0};
   static sm_cfg_t mbboot0 = {MBX0_sma_b, MBX0_sml_b, MBX0_sme_b, MBX0_smc_b, 0};
   static sm_cfg_t mbboot1 = {MBX1_sma_b, MBX1_sml_b, MBX1_sme_b, MBX1_smc_b, 0};

   /* Configure stack */
   ESCvar.use_interrupt = cfg->use_interrupt;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	4a2e      	ldr	r2, [pc, #184]	; (8001d80 <ESC_config+0xc8>)
 8001cc6:	6013      	str	r3, [r2, #0]
   ESCvar.watchdogcnt = cfg->watchdog_cnt;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	4a2c      	ldr	r2, [pc, #176]	; (8001d80 <ESC_config+0xc8>)
 8001cce:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

   ESCvar.mb[0] = mb0;
 8001cd2:	4b2b      	ldr	r3, [pc, #172]	; (8001d80 <ESC_config+0xc8>)
 8001cd4:	4a2b      	ldr	r2, [pc, #172]	; (8001d84 <ESC_config+0xcc>)
 8001cd6:	3304      	adds	r3, #4
 8001cd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cdc:	e883 0003 	stmia.w	r3, {r0, r1}
   ESCvar.mb[1] = mb1;
 8001ce0:	4b27      	ldr	r3, [pc, #156]	; (8001d80 <ESC_config+0xc8>)
 8001ce2:	4a29      	ldr	r2, [pc, #164]	; (8001d88 <ESC_config+0xd0>)
 8001ce4:	330c      	adds	r3, #12
 8001ce6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cea:	e883 0003 	stmia.w	r3, {r0, r1}
   ESCvar.mbboot[0] = mbboot0;
 8001cee:	4b24      	ldr	r3, [pc, #144]	; (8001d80 <ESC_config+0xc8>)
 8001cf0:	4a26      	ldr	r2, [pc, #152]	; (8001d8c <ESC_config+0xd4>)
 8001cf2:	3314      	adds	r3, #20
 8001cf4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cf8:	e883 0003 	stmia.w	r3, {r0, r1}
   ESCvar.mbboot[1] = mbboot1;
 8001cfc:	4b20      	ldr	r3, [pc, #128]	; (8001d80 <ESC_config+0xc8>)
 8001cfe:	4a24      	ldr	r2, [pc, #144]	; (8001d90 <ESC_config+0xd8>)
 8001d00:	331c      	adds	r3, #28
 8001d02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d06:	e883 0003 	stmia.w	r3, {r0, r1}

   ESCvar.set_defaults_hook = cfg->set_defaults_hook;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	4a1c      	ldr	r2, [pc, #112]	; (8001d80 <ESC_config+0xc8>)
 8001d10:	6253      	str	r3, [r2, #36]	; 0x24
   ESCvar.pre_state_change_hook = cfg->pre_state_change_hook;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	4a1a      	ldr	r2, [pc, #104]	; (8001d80 <ESC_config+0xc8>)
 8001d18:	6293      	str	r3, [r2, #40]	; 0x28
   ESCvar.post_state_change_hook = cfg->post_state_change_hook;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	4a18      	ldr	r2, [pc, #96]	; (8001d80 <ESC_config+0xc8>)
 8001d20:	62d3      	str	r3, [r2, #44]	; 0x2c
   ESCvar.application_hook = cfg->application_hook;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	4a16      	ldr	r2, [pc, #88]	; (8001d80 <ESC_config+0xc8>)
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
   ESCvar.safeoutput_override = cfg->safeoutput_override;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	4a14      	ldr	r2, [pc, #80]	; (8001d80 <ESC_config+0xc8>)
 8001d30:	6353      	str	r3, [r2, #52]	; 0x34
   ESCvar.pre_object_download_hook = cfg->pre_object_download_hook;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a1b      	ldr	r3, [r3, #32]
 8001d36:	4a12      	ldr	r2, [pc, #72]	; (8001d80 <ESC_config+0xc8>)
 8001d38:	6393      	str	r3, [r2, #56]	; 0x38
   ESCvar.post_object_download_hook = cfg->post_object_download_hook;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3e:	4a10      	ldr	r2, [pc, #64]	; (8001d80 <ESC_config+0xc8>)
 8001d40:	63d3      	str	r3, [r2, #60]	; 0x3c
   ESCvar.rxpdo_override = cfg->rxpdo_override;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d46:	4a0e      	ldr	r2, [pc, #56]	; (8001d80 <ESC_config+0xc8>)
 8001d48:	6413      	str	r3, [r2, #64]	; 0x40
   ESCvar.txpdo_override = cfg->txpdo_override;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4e:	4a0c      	ldr	r2, [pc, #48]	; (8001d80 <ESC_config+0xc8>)
 8001d50:	6453      	str	r3, [r2, #68]	; 0x44
   ESCvar.esc_hw_interrupt_enable = cfg->esc_hw_interrupt_enable;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <ESC_config+0xc8>)
 8001d58:	6493      	str	r3, [r2, #72]	; 0x48
   ESCvar.esc_hw_interrupt_disable = cfg->esc_hw_interrupt_disable;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d5e:	4a08      	ldr	r2, [pc, #32]	; (8001d80 <ESC_config+0xc8>)
 8001d60:	64d3      	str	r3, [r2, #76]	; 0x4c
   ESCvar.esc_hw_eep_handler = cfg->esc_hw_eep_handler;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d66:	4a06      	ldr	r2, [pc, #24]	; (8001d80 <ESC_config+0xc8>)
 8001d68:	6513      	str	r3, [r2, #80]	; 0x50
   ESCvar.esc_check_dc_handler = cfg->esc_check_dc_handler;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d6e:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <ESC_config+0xc8>)
 8001d70:	6553      	str	r3, [r2, #84]	; 0x54
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	20000180 	.word	0x20000180
 8001d84:	20000000 	.word	0x20000000
 8001d88:	20000008 	.word	0x20000008
 8001d8c:	20000010 	.word	0x20000010
 8001d90:	20000018 	.word	0x20000018

08001d94 <SDO_findsubindex>:
 * @param[in] nidx   = local array index of object we want to find sub-index to
 * @param[in] subindex   = value on sub-index of object we want to locate
 * @return local array index if we succeed, -1 if we didn't find the index.
 */
int16_t SDO_findsubindex (int16_t nidx, uint8_t subindex)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b087      	sub	sp, #28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	460a      	mov	r2, r1
 8001d9e:	80fb      	strh	r3, [r7, #6]
 8001da0:	4613      	mov	r3, r2
 8001da2:	717b      	strb	r3, [r7, #5]
   const _objd *objd;
   int16_t n = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	82fb      	strh	r3, [r7, #22]
   uint8_t maxsub;
   objd = SDOobjects[nidx].objdesc;
 8001da8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001dac:	4924      	ldr	r1, [pc, #144]	; (8001e40 <SDO_findsubindex+0xac>)
 8001dae:	4613      	mov	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	1a9b      	subs	r3, r3, r2
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	440b      	add	r3, r1
 8001db8:	3308      	adds	r3, #8
 8001dba:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8001dbe:	613b      	str	r3, [r7, #16]
   maxsub = SDOobjects[nidx].maxsub;
 8001dc0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001dc4:	491e      	ldr	r1, [pc, #120]	; (8001e40 <SDO_findsubindex+0xac>)
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	1a9b      	subs	r3, r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	440b      	add	r3, r1
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	73fb      	strb	r3, [r7, #15]
   while (((objd + n)->subindex < subindex) && (n < maxsub))
 8001dd6:	e005      	b.n	8001de4 <SDO_findsubindex+0x50>
   {
      n++;
 8001dd8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	3301      	adds	r3, #1
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	82fb      	strh	r3, [r7, #22]
   while (((objd + n)->subindex < subindex) && (n < maxsub))
 8001de4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	461a      	mov	r2, r3
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	4413      	add	r3, r2
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	797b      	ldrb	r3, [r7, #5]
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d204      	bcs.n	8001e0c <SDO_findsubindex+0x78>
 8001e02:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	dbe5      	blt.n	8001dd8 <SDO_findsubindex+0x44>
   }
   if ((objd + n)->subindex != subindex)
 8001e0c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001e10:	4613      	mov	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	461a      	mov	r2, r3
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	797b      	ldrb	r3, [r7, #5]
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d002      	beq.n	8001e30 <SDO_findsubindex+0x9c>
   {
      return -1;
 8001e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2e:	e001      	b.n	8001e34 <SDO_findsubindex+0xa0>
   }
   return n;
 8001e30:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	371c      	adds	r7, #28
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	0800bc44 	.word	0x0800bc44

08001e44 <SDO_findobject>:
 *
 * @param[in] index   = value on index of object we want to locate
 * @return local array index if we succeed, -1 if we didn't find the index.
 */
int32_t SDO_findobject (uint16_t index)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	80fb      	strh	r3, [r7, #6]
   int32_t n = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
   while (SDOobjects[n].index < index)
 8001e52:	e002      	b.n	8001e5a <SDO_findobject+0x16>
   {
      n++;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	3301      	adds	r3, #1
 8001e58:	60fb      	str	r3, [r7, #12]
   while (SDOobjects[n].index < index)
 8001e5a:	4911      	ldr	r1, [pc, #68]	; (8001ea0 <SDO_findobject+0x5c>)
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	1a9b      	subs	r3, r3, r2
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	440b      	add	r3, r1
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	88fa      	ldrh	r2, [r7, #6]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d8f0      	bhi.n	8001e54 <SDO_findobject+0x10>
   }
   if (SDOobjects[n].index != index)
 8001e72:	490b      	ldr	r1, [pc, #44]	; (8001ea0 <SDO_findobject+0x5c>)
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	4613      	mov	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	1a9b      	subs	r3, r3, r2
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	440b      	add	r3, r1
 8001e80:	881b      	ldrh	r3, [r3, #0]
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	88fa      	ldrh	r2, [r7, #6]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d002      	beq.n	8001e90 <SDO_findobject+0x4c>
   {
      return -1;
 8001e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e8e:	e000      	b.n	8001e92 <SDO_findobject+0x4e>
   }
   return n;
 8001e90:	68fb      	ldr	r3, [r7, #12]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	0800bc44 	.word	0x0800bc44

08001ea4 <sizeOfPDO>:
 * @param[out] max_mappings = max number of mapped objects in SM
 * @return size of RxPDO or TxPDOs in Bytes.
 */
uint16_t sizeOfPDO (uint16_t index, int * nmappings, _SMmap * mappings,
                    int max_mappings)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b090      	sub	sp, #64	; 0x40
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	603b      	str	r3, [r7, #0]
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	81fb      	strh	r3, [r7, #14]
   uint16_t offset = 0, hobj;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	87fb      	strh	r3, [r7, #62]	; 0x3e
   uint8_t si, sic, c;
   int16_t nidx;
   const _objd *objd;
   const _objd *objd1c1x;
   int mapIx = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	63bb      	str	r3, [r7, #56]	; 0x38

   if ((index != RX_PDO_OBJIDX) && (index != TX_PDO_OBJIDX))
 8001ebc:	89fb      	ldrh	r3, [r7, #14]
 8001ebe:	f641 4212 	movw	r2, #7186	; 0x1c12
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d006      	beq.n	8001ed4 <sizeOfPDO+0x30>
 8001ec6:	89fb      	ldrh	r3, [r7, #14]
 8001ec8:	f641 4213 	movw	r2, #7187	; 0x1c13
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d001      	beq.n	8001ed4 <sizeOfPDO+0x30>
   {
      return 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	e130      	b.n	8002136 <sizeOfPDO+0x292>
   }

   nidx = SDO_findobject (index);
 8001ed4:	89fb      	ldrh	r3, [r7, #14]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff ffb4 	bl	8001e44 <SDO_findobject>
 8001edc:	4603      	mov	r3, r0
 8001ede:	867b      	strh	r3, [r7, #50]	; 0x32
   if(nidx < 0)
 8001ee0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	da01      	bge.n	8001eec <sizeOfPDO+0x48>
   {
      return 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	e124      	b.n	8002136 <sizeOfPDO+0x292>
   }

   objd1c1x = SDOobjects[nidx].objdesc;
 8001eec:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8001ef0:	4993      	ldr	r1, [pc, #588]	; (8002140 <sizeOfPDO+0x29c>)
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	1a9b      	subs	r3, r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	440b      	add	r3, r1
 8001efc:	3308      	adds	r3, #8
 8001efe:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8001f02:	62fb      	str	r3, [r7, #44]	; 0x2c

   si = OBJ_VALUE_FETCH (si, objd1c1x[0]);
 8001f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <sizeOfPDO+0x70>
 8001f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	e002      	b.n	8001f1a <sizeOfPDO+0x76>
 8001f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   if (si)
 8001f1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 80f9 	beq.w	800211a <sizeOfPDO+0x276>
   {
      for (sic = 1; sic <= si; sic++)
 8001f28:	2301      	movs	r3, #1
 8001f2a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8001f2e:	e0ed      	b.n	800210c <sizeOfPDO+0x268>
      {
         hobj = OBJ_VALUE_FETCH (hobj, objd1c1x[sic]);
 8001f30:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001f34:	4613      	mov	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f40:	4413      	add	r3, r2
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00b      	beq.n	8001f60 <sizeOfPDO+0xbc>
 8001f48:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	461a      	mov	r2, r3
 8001f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f58:	4413      	add	r3, r2
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	e00a      	b.n	8001f76 <sizeOfPDO+0xd2>
 8001f60:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001f64:	4613      	mov	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4413      	add	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f70:	4413      	add	r3, r2
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	853b      	strh	r3, [r7, #40]	; 0x28
         nidx = SDO_findobject (hobj);
 8001f78:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff ff62 	bl	8001e44 <SDO_findobject>
 8001f80:	4603      	mov	r3, r0
 8001f82:	867b      	strh	r3, [r7, #50]	; 0x32
         if (nidx >= 0)
 8001f84:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f2c0 80ba 	blt.w	8002102 <sizeOfPDO+0x25e>
         {
            uint8_t maxsub;

            objd = SDOobjects[nidx].objdesc;
 8001f8e:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8001f92:	496b      	ldr	r1, [pc, #428]	; (8002140 <sizeOfPDO+0x29c>)
 8001f94:	4613      	mov	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	1a9b      	subs	r3, r3, r2
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	440b      	add	r3, r1
 8001f9e:	3308      	adds	r3, #8
 8001fa0:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
            maxsub = OBJ_VALUE_FETCH (maxsub, objd[0]);
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <sizeOfPDO+0x112>
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	e002      	b.n	8001fbc <sizeOfPDO+0x118>
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

            for (c = 1; c <= maxsub; c++)
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8001fc6:	e095      	b.n	80020f4 <sizeOfPDO+0x250>
            {
               uint32_t value = OBJ_VALUE_FETCH (value, objd[c]);
 8001fc8:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8001fcc:	4613      	mov	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	4413      	add	r3, r2
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00b      	beq.n	8001ff8 <sizeOfPDO+0x154>
 8001fe0:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	461a      	mov	r2, r3
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	4413      	add	r3, r2
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	e009      	b.n	800200c <sizeOfPDO+0x168>
 8001ff8:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	461a      	mov	r2, r3
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	4413      	add	r3, r2
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	61fb      	str	r3, [r7, #28]
               uint8_t bitlength = value & 0xFF;
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	76fb      	strb	r3, [r7, #27]

               if (max_mappings > 0)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	dd63      	ble.n	80020e0 <sizeOfPDO+0x23c>
               {
                  uint16_t index = value >> 16;
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	0c1b      	lsrs	r3, r3, #16
 800201c:	833b      	strh	r3, [r7, #24]
                  uint8_t subindex = (value >> 8) & 0xFF;
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	0a1b      	lsrs	r3, r3, #8
 8002022:	75fb      	strb	r3, [r7, #23]
                  const _objd * mapping;

                  if (mapIx == max_mappings)
 8002024:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	429a      	cmp	r2, r3
 800202a:	d105      	bne.n	8002038 <sizeOfPDO+0x194>
                  {
                     /* Too many mapped objects */
                     *nmappings = -1;
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	f04f 32ff 	mov.w	r2, #4294967295
 8002032:	601a      	str	r2, [r3, #0]
                     return 0;
 8002034:	2300      	movs	r3, #0
 8002036:	e07e      	b.n	8002136 <sizeOfPDO+0x292>
                  }

                  DPRINT ("%04x:%02x @ %d\n", index, subindex, offset);
 8002038:	8b39      	ldrh	r1, [r7, #24]
 800203a:	7dfa      	ldrb	r2, [r7, #23]
 800203c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800203e:	4841      	ldr	r0, [pc, #260]	; (8002144 <sizeOfPDO+0x2a0>)
 8002040:	f008 fbba 	bl	800a7b8 <iprintf>

                  if (index == 0 && subindex == 0)
 8002044:	8b3b      	ldrh	r3, [r7, #24]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d105      	bne.n	8002056 <sizeOfPDO+0x1b2>
 800204a:	7dfb      	ldrb	r3, [r7, #23]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d102      	bne.n	8002056 <sizeOfPDO+0x1b2>
                  {
                     /* Padding element */
                     mapping = NULL;
 8002050:	2300      	movs	r3, #0
 8002052:	637b      	str	r3, [r7, #52]	; 0x34
 8002054:	e036      	b.n	80020c4 <sizeOfPDO+0x220>
                  }
                  else
                  {
                     nidx = SDO_findobject (index);
 8002056:	8b3b      	ldrh	r3, [r7, #24]
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff fef3 	bl	8001e44 <SDO_findobject>
 800205e:	4603      	mov	r3, r0
 8002060:	867b      	strh	r3, [r7, #50]	; 0x32
                     if (nidx >= 0)
 8002062:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8002066:	2b00      	cmp	r3, #0
 8002068:	db26      	blt.n	80020b8 <sizeOfPDO+0x214>
                     {
                        int16_t nsub;

                        nsub = SDO_findsubindex (nidx, subindex);
 800206a:	7dfa      	ldrb	r2, [r7, #23]
 800206c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8002070:	4611      	mov	r1, r2
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fe8e 	bl	8001d94 <SDO_findsubindex>
 8002078:	4603      	mov	r3, r0
 800207a:	82bb      	strh	r3, [r7, #20]
                        if (nsub < 0)
 800207c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002080:	2b00      	cmp	r3, #0
 8002082:	da05      	bge.n	8002090 <sizeOfPDO+0x1ec>
                        {
                           /* Mapped subindex does not exist */
                           *nmappings = -1;
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f04f 32ff 	mov.w	r2, #4294967295
 800208a:	601a      	str	r2, [r3, #0]
                           return 0;
 800208c:	2300      	movs	r3, #0
 800208e:	e052      	b.n	8002136 <sizeOfPDO+0x292>
                        }

                        mapping = &SDOobjects[nidx].objdesc[nsub];
 8002090:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8002094:	492a      	ldr	r1, [pc, #168]	; (8002140 <sizeOfPDO+0x29c>)
 8002096:	4613      	mov	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	1a9b      	subs	r3, r3, r2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	440b      	add	r3, r1
 80020a0:	3308      	adds	r3, #8
 80020a2:	f8d3 1002 	ldr.w	r1, [r3, #2]
 80020a6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80020aa:	4613      	mov	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4413      	add	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	440b      	add	r3, r1
 80020b4:	637b      	str	r3, [r7, #52]	; 0x34
 80020b6:	e005      	b.n	80020c4 <sizeOfPDO+0x220>
                     }
                     else
                     {
                        /* Mapped index does not exist */
                        *nmappings = -1;
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	f04f 32ff 	mov.w	r2, #4294967295
 80020be:	601a      	str	r2, [r3, #0]
                        return 0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	e038      	b.n	8002136 <sizeOfPDO+0x292>
                     }
                  }

                  mappings[mapIx].obj = mapping;
 80020c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	4413      	add	r3, r2
 80020cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020ce:	601a      	str	r2, [r3, #0]
                  mappings[mapIx++].offset = offset;
 80020d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020d2:	1c5a      	adds	r2, r3, #1
 80020d4:	63ba      	str	r2, [r7, #56]	; 0x38
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	4413      	add	r3, r2
 80020dc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80020de:	809a      	strh	r2, [r3, #4]
               }

               offset += bitlength;
 80020e0:	7efb      	ldrb	r3, [r7, #27]
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80020e6:	4413      	add	r3, r2
 80020e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
            for (c = 1; c <= maxsub; c++)
 80020ea:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80020ee:	3301      	adds	r3, #1
 80020f0:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 80020f4:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80020f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020fc:	429a      	cmp	r2, r3
 80020fe:	f67f af63 	bls.w	8001fc8 <sizeOfPDO+0x124>
      for (sic = 1; sic <= si; sic++)
 8002102:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002106:	3301      	adds	r3, #1
 8002108:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800210c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002110:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002114:	429a      	cmp	r2, r3
 8002116:	f67f af0b 	bls.w	8001f30 <sizeOfPDO+0x8c>
            }
         }
      }
   }

   if (max_mappings > 0)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	dd03      	ble.n	8002128 <sizeOfPDO+0x284>
   {
      *nmappings = mapIx;
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	e002      	b.n	800212e <sizeOfPDO+0x28a>
   }
   else
   {
      *nmappings = 0;
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
   }

   return BITS2BYTES (offset);
 800212e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002130:	3307      	adds	r3, #7
 8002132:	10db      	asrs	r3, r3, #3
 8002134:	b29b      	uxth	r3, r3
}
 8002136:	4618      	mov	r0, r3
 8002138:	3740      	adds	r7, #64	; 0x40
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	0800bc44 	.word	0x0800bc44
 8002144:	0800b1f8 	.word	0x0800b1f8

08002148 <copy2mbx>:
 * @param[in] source = pointer to source
 * @param[in] dest   = pointer to destination
 * @param[in] size   = Size to copy
 */
void copy2mbx (void *source, void *dest, uint16_t size)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	4613      	mov	r3, r2
 8002154:	80fb      	strh	r3, [r7, #6]
   memcpy (dest, source, size);
 8002156:	88fb      	ldrh	r3, [r7, #6]
 8002158:	461a      	mov	r2, r3
 800215a:	68f9      	ldr	r1, [r7, #12]
 800215c:	68b8      	ldr	r0, [r7, #8]
 800215e:	f008 f851 	bl	800a204 <memcpy>
}
 8002162:	bf00      	nop
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
	...

0800216c <SDO_abort>:
 * @param[in] index      = index of object causing abort reply
 * @param[in] sub-index  = sub-index of object causing abort reply
 * @param[in] abortcode  = abort code to send in reply
 */
void SDO_abort (uint16_t index, uint8_t subindex, uint32_t abortcode)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	603a      	str	r2, [r7, #0]
 8002176:	80fb      	strh	r3, [r7, #6]
 8002178:	460b      	mov	r3, r1
 800217a:	717b      	strb	r3, [r7, #5]
   uint8_t MBXout;
   _COEsdo *coeres;
   MBXout = ESC_claimbuffer ();
 800217c:	f7fe ff46 	bl	800100c <ESC_claimbuffer>
 8002180:	4603      	mov	r3, r0
 8002182:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 8002184:	7bfb      	ldrb	r3, [r7, #15]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d02c      	beq.n	80021e4 <SDO_abort+0x78>
   {
      coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800218a:	7bfb      	ldrb	r3, [r7, #15]
 800218c:	4a17      	ldr	r2, [pc, #92]	; (80021ec <SDO_abort+0x80>)
 800218e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002190:	fb02 f303 	mul.w	r3, r2, r3
 8002194:	4a16      	ldr	r2, [pc, #88]	; (80021f0 <SDO_abort+0x84>)
 8002196:	4413      	add	r3, r2
 8002198:	60bb      	str	r3, [r7, #8]
      coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	2200      	movs	r2, #0
 800219e:	f042 020a 	orr.w	r2, r2, #10
 80021a2:	701a      	strb	r2, [r3, #0]
 80021a4:	2200      	movs	r2, #0
 80021a6:	705a      	strb	r2, [r3, #1]
      coeres->mbxheader.mbxtype = MBXCOE;
 80021a8:	68ba      	ldr	r2, [r7, #8]
 80021aa:	7953      	ldrb	r3, [r2, #5]
 80021ac:	2103      	movs	r1, #3
 80021ae:	f361 0303 	bfi	r3, r1, #0, #4
 80021b2:	7153      	strb	r3, [r2, #5]
      coeres->coeheader.numberservice =
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	2200      	movs	r2, #0
 80021b8:	719a      	strb	r2, [r3, #6]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f042 0220 	orr.w	r2, r2, #32
 80021c0:	71da      	strb	r2, [r3, #7]
         htoes ((0 & 0x01f) | (COE_SDOREQUEST << 12));
      coeres->index = htoes (index);
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	88fa      	ldrh	r2, [r7, #6]
 80021c6:	f8a3 2009 	strh.w	r2, [r3, #9]
      coeres->subindex = subindex;
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	797a      	ldrb	r2, [r7, #5]
 80021ce:	72da      	strb	r2, [r3, #11]
      coeres->command = COE_COMMAND_SDOABORT;
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	2280      	movs	r2, #128	; 0x80
 80021d4:	721a      	strb	r2, [r3, #8]
      coeres->size = htoel (abortcode);
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	60da      	str	r2, [r3, #12]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
 80021de:	4a05      	ldr	r2, [pc, #20]	; (80021f4 <SDO_abort+0x88>)
 80021e0:	2103      	movs	r1, #3
 80021e2:	54d1      	strb	r1, [r2, r3]
   }
}
 80021e4:	bf00      	nop
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20000180 	.word	0x20000180
 80021f0:	2000024c 	.word	0x2000024c
 80021f4:	20000414 	.word	0x20000414

080021f8 <SDO_upload>:
/** Function for responding on requested SDO Upload, sending the content
 *  requested in a free Mailbox buffer. Depending of size of data expedited,
 *  normal or segmented transfer is used. On error an SDO Abort will be sent.
 */
void SDO_upload (void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af00      	add	r7, sp, #0
   int16_t nidx, nsub;
   uint8_t MBXout;
   uint32_t size;
   uint8_t dss;
   const _objd *objd;
   coesdo = (_COEsdo *) &MBX[0];
 80021fe:	4b8d      	ldr	r3, [pc, #564]	; (8002434 <SDO_upload+0x23c>)
 8002200:	617b      	str	r3, [r7, #20]
   index = etohs (coesdo->index);
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	7a5a      	ldrb	r2, [r3, #9]
 8002206:	7a9b      	ldrb	r3, [r3, #10]
 8002208:	021b      	lsls	r3, r3, #8
 800220a:	4313      	orrs	r3, r2
 800220c:	827b      	strh	r3, [r7, #18]
   subindex = coesdo->subindex;
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	7adb      	ldrb	r3, [r3, #11]
 8002212:	747b      	strb	r3, [r7, #17]
   nidx = SDO_findobject (index);
 8002214:	8a7b      	ldrh	r3, [r7, #18]
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff fe14 	bl	8001e44 <SDO_findobject>
 800221c:	4603      	mov	r3, r0
 800221e:	81fb      	strh	r3, [r7, #14]
   if (nidx >= 0)
 8002220:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002224:	2b00      	cmp	r3, #0
 8002226:	f2c0 80f3 	blt.w	8002410 <SDO_upload+0x218>
   {
      nsub = SDO_findsubindex (nidx, subindex);
 800222a:	7c7a      	ldrb	r2, [r7, #17]
 800222c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002230:	4611      	mov	r1, r2
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff fdae 	bl	8001d94 <SDO_findsubindex>
 8002238:	4603      	mov	r3, r0
 800223a:	81bb      	strh	r3, [r7, #12]
      if (nsub >= 0)
 800223c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002240:	2b00      	cmp	r3, #0
 8002242:	f2c0 80de 	blt.w	8002402 <SDO_upload+0x20a>
      {
         objd = SDOobjects[nidx].objdesc;
 8002246:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800224a:	497b      	ldr	r1, [pc, #492]	; (8002438 <SDO_upload+0x240>)
 800224c:	4613      	mov	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	1a9b      	subs	r3, r3, r2
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	440b      	add	r3, r1
 8002256:	3308      	adds	r3, #8
 8002258:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800225c:	60bb      	str	r3, [r7, #8]
         MBXout = ESC_claimbuffer ();
 800225e:	f7fe fed5 	bl	800100c <ESC_claimbuffer>
 8002262:	4603      	mov	r3, r0
 8002264:	71fb      	strb	r3, [r7, #7]
         if (MBXout)
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 80d7 	beq.w	800241c <SDO_upload+0x224>
         {
            coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	4a72      	ldr	r2, [pc, #456]	; (800243c <SDO_upload+0x244>)
 8002272:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002274:	fb02 f303 	mul.w	r3, r2, r3
 8002278:	4a6e      	ldr	r2, [pc, #440]	; (8002434 <SDO_upload+0x23c>)
 800227a:	4413      	add	r3, r2
 800227c:	603b      	str	r3, [r7, #0]
            coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	2200      	movs	r2, #0
 8002282:	f042 020a 	orr.w	r2, r2, #10
 8002286:	701a      	strb	r2, [r3, #0]
 8002288:	2200      	movs	r2, #0
 800228a:	705a      	strb	r2, [r3, #1]
            coeres->mbxheader.mbxtype = MBXCOE;
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	7953      	ldrb	r3, [r2, #5]
 8002290:	2103      	movs	r1, #3
 8002292:	f361 0303 	bfi	r3, r1, #0, #4
 8002296:	7153      	strb	r3, [r2, #5]
            coeres->coeheader.numberservice =
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	2200      	movs	r2, #0
 800229c:	719a      	strb	r2, [r3, #6]
 800229e:	2200      	movs	r2, #0
 80022a0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80022a4:	71da      	strb	r2, [r3, #7]
               htoes ((0 & 0x01f) | (COE_SDORESPONSE << 12));
            size = (objd + nsub)->bitlength;
 80022a6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80022aa:	4613      	mov	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	461a      	mov	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	4413      	add	r3, r2
 80022b8:	889b      	ldrh	r3, [r3, #4]
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	61fb      	str	r3, [r7, #28]
            /* expedited bits used calculation */
            dss = 0x0c;
 80022be:	230c      	movs	r3, #12
 80022c0:	76fb      	strb	r3, [r7, #27]
            if (size > 8)
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d901      	bls.n	80022cc <SDO_upload+0xd4>
            {
               dss = 0x08;
 80022c8:	2308      	movs	r3, #8
 80022ca:	76fb      	strb	r3, [r7, #27]
            }
            if (size > 16)
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	2b10      	cmp	r3, #16
 80022d0:	d901      	bls.n	80022d6 <SDO_upload+0xde>
            {
               dss = 0x04;
 80022d2:	2304      	movs	r3, #4
 80022d4:	76fb      	strb	r3, [r7, #27]
            }
            if (size > 24)
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	2b18      	cmp	r3, #24
 80022da:	d901      	bls.n	80022e0 <SDO_upload+0xe8>
            {
               dss = 0x00;
 80022dc:	2300      	movs	r3, #0
 80022de:	76fb      	strb	r3, [r7, #27]
            }
            coeres->index = htoes (index);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	8a7a      	ldrh	r2, [r7, #18]
 80022e4:	f8a3 2009 	strh.w	r2, [r3, #9]
            coeres->subindex = subindex;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	7c7a      	ldrb	r2, [r7, #17]
 80022ec:	72da      	strb	r2, [r3, #11]
            if (size <= 32)
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	2b20      	cmp	r3, #32
 80022f2:	d833      	bhi.n	800235c <SDO_upload+0x164>
            {
               /* expedited response i.e. length<=4 bytes */
               coeres->command = COE_COMMAND_UPLOADRESPONSE +
                  COE_SIZE_INDICATOR + COE_EXPEDITED_INDICATOR + dss;
 80022f4:	7efb      	ldrb	r3, [r7, #27]
 80022f6:	3343      	adds	r3, #67	; 0x43
 80022f8:	b2da      	uxtb	r2, r3
               coeres->command = COE_COMMAND_UPLOADRESPONSE +
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	721a      	strb	r2, [r3, #8]
               if ((objd + nsub)->data == NULL)
 80022fe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002302:	4613      	mov	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	461a      	mov	r2, r3
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	4413      	add	r3, r2
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10c      	bne.n	8002330 <SDO_upload+0x138>
               {
                  /* use constant value */
                  coeres->size = htoel ((objd + nsub)->value);
 8002316:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800231a:	4613      	mov	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	461a      	mov	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	4413      	add	r3, r2
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	e063      	b.n	80023f8 <SDO_upload+0x200>
               }
               else
               {
                  /* convert bits to bytes */
                  size = (size + 7) >> 3;
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	3307      	adds	r3, #7
 8002334:	08db      	lsrs	r3, r3, #3
 8002336:	61fb      	str	r3, [r7, #28]
                  /* use dynamic data */
                  copy2mbx ((objd + nsub)->data, &(coeres->size), size);
 8002338:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	461a      	mov	r2, r3
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	4413      	add	r3, r2
 800234a:	6918      	ldr	r0, [r3, #16]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	330c      	adds	r3, #12
 8002350:	69fa      	ldr	r2, [r7, #28]
 8002352:	b292      	uxth	r2, r2
 8002354:	4619      	mov	r1, r3
 8002356:	f7ff fef7 	bl	8002148 <copy2mbx>
 800235a:	e04d      	b.n	80023f8 <SDO_upload+0x200>
               }
            }
            else
            {
               /* normal response i.e. length>4 bytes */
               coeres->command = COE_COMMAND_UPLOADRESPONSE +
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	2241      	movs	r2, #65	; 0x41
 8002360:	721a      	strb	r2, [r3, #8]
                  COE_SIZE_INDICATOR;
               /* convert bits to bytes */
               size = (size + 7) >> 3;
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3307      	adds	r3, #7
 8002366:	08db      	lsrs	r3, r3, #3
 8002368:	61fb      	str	r3, [r7, #28]
               coeres->size = htoel (size);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	69fa      	ldr	r2, [r7, #28]
 800236e:	60da      	str	r2, [r3, #12]
               if ((size + COE_HEADERSIZE) > ESC_MBXDSIZE)
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f103 020a 	add.w	r2, r3, #10
 8002376:	4b31      	ldr	r3, [pc, #196]	; (800243c <SDO_upload+0x244>)
 8002378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237a:	3b06      	subs	r3, #6
 800237c:	429a      	cmp	r2, r3
 800237e:	d91f      	bls.n	80023c0 <SDO_upload+0x1c8>
               {
                  /* segmented transfer needed */
                  /* set total size in bytes */
                  ESCvar.frags = size;
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	b29a      	uxth	r2, r3
 8002384:	4b2d      	ldr	r3, [pc, #180]	; (800243c <SDO_upload+0x244>)
 8002386:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
                  /* limit to mailbox size */
                  size = ESC_MBXDSIZE - COE_HEADERSIZE;
 800238a:	4b2c      	ldr	r3, [pc, #176]	; (800243c <SDO_upload+0x244>)
 800238c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238e:	3b10      	subs	r3, #16
 8002390:	61fb      	str	r3, [r7, #28]
                  /* number of bytes done */
                  ESCvar.fragsleft = size;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	b29a      	uxth	r2, r3
 8002396:	4b29      	ldr	r3, [pc, #164]	; (800243c <SDO_upload+0x244>)
 8002398:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
                  /* signal segmented transfer */
                  ESCvar.segmented = MBXSEU;
 800239c:	4b27      	ldr	r3, [pc, #156]	; (800243c <SDO_upload+0x244>)
 800239e:	2240      	movs	r2, #64	; 0x40
 80023a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                  ESCvar.data = (objd + nsub)->data;
 80023a4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80023a8:	4613      	mov	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	461a      	mov	r2, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	4413      	add	r3, r2
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	4a20      	ldr	r2, [pc, #128]	; (800243c <SDO_upload+0x244>)
 80023ba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 80023be:	e003      	b.n	80023c8 <SDO_upload+0x1d0>
               }
               else
               {
                  ESCvar.segmented = 0;
 80023c0:	4b1e      	ldr	r3, [pc, #120]	; (800243c <SDO_upload+0x244>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
               }
               coeres->mbxheader.length = htoes (COE_HEADERSIZE + size);
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	330a      	adds	r3, #10
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	801a      	strh	r2, [r3, #0]
               /* use dynamic data */
               copy2mbx ((objd + nsub)->data, (&(coeres->size)) + 1, size);
 80023d4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80023d8:	4613      	mov	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4413      	add	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	461a      	mov	r2, r3
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	4413      	add	r3, r2
 80023e6:	6918      	ldr	r0, [r3, #16]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	330c      	adds	r3, #12
 80023ec:	3304      	adds	r3, #4
 80023ee:	69fa      	ldr	r2, [r7, #28]
 80023f0:	b292      	uxth	r2, r2
 80023f2:	4619      	mov	r1, r3
 80023f4:	f7ff fea8 	bl	8002148 <copy2mbx>
            }
            MBXcontrol[MBXout].state = MBXstate_outreq;
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	4a11      	ldr	r2, [pc, #68]	; (8002440 <SDO_upload+0x248>)
 80023fc:	2103      	movs	r1, #3
 80023fe:	54d1      	strb	r1, [r2, r3]
 8002400:	e00c      	b.n	800241c <SDO_upload+0x224>
         }
      }
      else
      {
         SDO_abort (index, subindex, ABORT_NOSUBINDEX);
 8002402:	7c79      	ldrb	r1, [r7, #17]
 8002404:	8a7b      	ldrh	r3, [r7, #18]
 8002406:	4a0f      	ldr	r2, [pc, #60]	; (8002444 <SDO_upload+0x24c>)
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff feaf 	bl	800216c <SDO_abort>
 800240e:	e005      	b.n	800241c <SDO_upload+0x224>
      }
   }
   else
   {
      SDO_abort (index, subindex, ABORT_NOOBJECT);
 8002410:	7c79      	ldrb	r1, [r7, #17]
 8002412:	8a7b      	ldrh	r3, [r7, #18]
 8002414:	4a0c      	ldr	r2, [pc, #48]	; (8002448 <SDO_upload+0x250>)
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff fea8 	bl	800216c <SDO_abort>
   }
   MBXcontrol[0].state = MBXstate_idle;
 800241c:	4b08      	ldr	r3, [pc, #32]	; (8002440 <SDO_upload+0x248>)
 800241e:	2200      	movs	r2, #0
 8002420:	701a      	strb	r2, [r3, #0]
   ESCvar.xoe = 0;
 8002422:	4b06      	ldr	r3, [pc, #24]	; (800243c <SDO_upload+0x244>)
 8002424:	2200      	movs	r2, #0
 8002426:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
}
 800242a:	bf00      	nop
 800242c:	3720      	adds	r7, #32
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	2000024c 	.word	0x2000024c
 8002438:	0800bc44 	.word	0x0800bc44
 800243c:	20000180 	.word	0x20000180
 8002440:	20000414 	.word	0x20000414
 8002444:	06090011 	.word	0x06090011
 8002448:	06020000 	.word	0x06020000

0800244c <SDO_uploadsegment>:
/** Function for handling the following SDO Upload if previous SDOUpload
 * response was flagged it needed to be segmented.
 *
 */
void SDO_uploadsegment (void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
   _COEsdo *coesdo, *coeres;
   uint8_t MBXout;
   uint32_t size, offset;
   coesdo = (_COEsdo *) &MBX[0];
 8002452:	4b4d      	ldr	r3, [pc, #308]	; (8002588 <SDO_uploadsegment+0x13c>)
 8002454:	613b      	str	r3, [r7, #16]
   MBXout = ESC_claimbuffer ();
 8002456:	f7fe fdd9 	bl	800100c <ESC_claimbuffer>
 800245a:	4603      	mov	r3, r0
 800245c:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 8086 	beq.w	8002572 <SDO_uploadsegment+0x126>
   {
      coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	4a48      	ldr	r2, [pc, #288]	; (800258c <SDO_uploadsegment+0x140>)
 800246a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800246c:	fb02 f303 	mul.w	r3, r2, r3
 8002470:	4a45      	ldr	r2, [pc, #276]	; (8002588 <SDO_uploadsegment+0x13c>)
 8002472:	4413      	add	r3, r2
 8002474:	60bb      	str	r3, [r7, #8]
      offset = ESCvar.fragsleft;
 8002476:	4b45      	ldr	r3, [pc, #276]	; (800258c <SDO_uploadsegment+0x140>)
 8002478:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800247c:	607b      	str	r3, [r7, #4]
      size = ESCvar.frags - ESCvar.fragsleft;
 800247e:	4b43      	ldr	r3, [pc, #268]	; (800258c <SDO_uploadsegment+0x140>)
 8002480:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8002484:	461a      	mov	r2, r3
 8002486:	4b41      	ldr	r3, [pc, #260]	; (800258c <SDO_uploadsegment+0x140>)
 8002488:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	617b      	str	r3, [r7, #20]
      coeres->mbxheader.mbxtype = MBXCOE;
 8002490:	68ba      	ldr	r2, [r7, #8]
 8002492:	7953      	ldrb	r3, [r2, #5]
 8002494:	2103      	movs	r1, #3
 8002496:	f361 0303 	bfi	r3, r1, #0, #4
 800249a:	7153      	strb	r3, [r2, #5]
      coeres->coeheader.numberservice =
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	2200      	movs	r2, #0
 80024a0:	719a      	strb	r2, [r3, #6]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80024a8:	71da      	strb	r2, [r3, #7]
         htoes ((0 & 0x01f) | (COE_SDORESPONSE << 12));
      coeres->command = COE_COMMAND_UPLOADSEGMENT + (coesdo->command & COE_TOGGLEBIT);  // copy toggle bit
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	7a1b      	ldrb	r3, [r3, #8]
 80024ae:	f003 0310 	and.w	r3, r3, #16
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	721a      	strb	r2, [r3, #8]
      if ((size + COE_SEGMENTHEADERSIZE) > ESC_MBXDSIZE)
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	1cda      	adds	r2, r3, #3
 80024bc:	4b33      	ldr	r3, [pc, #204]	; (800258c <SDO_uploadsegment+0x140>)
 80024be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c0:	3b06      	subs	r3, #6
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d914      	bls.n	80024f0 <SDO_uploadsegment+0xa4>
      {
         /* more segmented transfer needed */
         /* limit to mailbox size */
         size = ESC_MBXDSIZE - COE_SEGMENTHEADERSIZE;
 80024c6:	4b31      	ldr	r3, [pc, #196]	; (800258c <SDO_uploadsegment+0x140>)
 80024c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ca:	3b09      	subs	r3, #9
 80024cc:	617b      	str	r3, [r7, #20]
         /* number of bytes done */
         ESCvar.fragsleft += size;
 80024ce:	4b2f      	ldr	r3, [pc, #188]	; (800258c <SDO_uploadsegment+0x140>)
 80024d0:	f8b3 208c 	ldrh.w	r2, [r3, #140]	; 0x8c
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	4413      	add	r3, r2
 80024da:	b29a      	uxth	r2, r3
 80024dc:	4b2b      	ldr	r3, [pc, #172]	; (800258c <SDO_uploadsegment+0x140>)
 80024de:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
         coeres->mbxheader.length = htoes (COE_SEGMENTHEADERSIZE + size);
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	3303      	adds	r3, #3
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	801a      	strh	r2, [r3, #0]
 80024ee:	e02f      	b.n	8002550 <SDO_uploadsegment+0x104>
      }
      else
      {
         /* last segment */
         ESCvar.segmented = 0;
 80024f0:	4b26      	ldr	r3, [pc, #152]	; (800258c <SDO_uploadsegment+0x140>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
         ESCvar.frags = 0;
 80024f8:	4b24      	ldr	r3, [pc, #144]	; (800258c <SDO_uploadsegment+0x140>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
         ESCvar.fragsleft = 0;
 8002500:	4b22      	ldr	r3, [pc, #136]	; (800258c <SDO_uploadsegment+0x140>)
 8002502:	2200      	movs	r2, #0
 8002504:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
         coeres->command += COE_COMMAND_LASTSEGMENTBIT;
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	7a1b      	ldrb	r3, [r3, #8]
 800250c:	3301      	adds	r3, #1
 800250e:	b2da      	uxtb	r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	721a      	strb	r2, [r3, #8]
         if (size >= 7)
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	2b06      	cmp	r3, #6
 8002518:	d906      	bls.n	8002528 <SDO_uploadsegment+0xdc>
         {
            coeres->mbxheader.length = htoes (COE_SEGMENTHEADERSIZE + size);
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	b29b      	uxth	r3, r3
 800251e:	3303      	adds	r3, #3
 8002520:	b29a      	uxth	r2, r3
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	801a      	strh	r2, [r3, #0]
 8002526:	e013      	b.n	8002550 <SDO_uploadsegment+0x104>
         }
         else
         {
            coeres->command += (7 - size) << 1;
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	7a1a      	ldrb	r2, [r3, #8]
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	b2db      	uxtb	r3, r3
 8002530:	f1c3 0307 	rsb	r3, r3, #7
 8002534:	b2db      	uxtb	r3, r3
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	b2db      	uxtb	r3, r3
 800253a:	4413      	add	r3, r2
 800253c:	b2da      	uxtb	r2, r3
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	721a      	strb	r2, [r3, #8]
            coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2200      	movs	r2, #0
 8002546:	f042 020a 	orr.w	r2, r2, #10
 800254a:	701a      	strb	r2, [r3, #0]
 800254c:	2200      	movs	r2, #0
 800254e:	705a      	strb	r2, [r3, #1]
         }
      }
      copy2mbx ((uint8_t *) ESCvar.data + offset, (&(coeres->command)) + 1, size);        //copy to mailbox
 8002550:	4b0e      	ldr	r3, [pc, #56]	; (800258c <SDO_uploadsegment+0x140>)
 8002552:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	18d0      	adds	r0, r2, r3
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	3308      	adds	r3, #8
 800255e:	3301      	adds	r3, #1
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	b292      	uxth	r2, r2
 8002564:	4619      	mov	r1, r3
 8002566:	f7ff fdef 	bl	8002148 <copy2mbx>

      MBXcontrol[MBXout].state = MBXstate_outreq;
 800256a:	7bfb      	ldrb	r3, [r7, #15]
 800256c:	4a08      	ldr	r2, [pc, #32]	; (8002590 <SDO_uploadsegment+0x144>)
 800256e:	2103      	movs	r1, #3
 8002570:	54d1      	strb	r1, [r2, r3]
   }
   MBXcontrol[0].state = MBXstate_idle;
 8002572:	4b07      	ldr	r3, [pc, #28]	; (8002590 <SDO_uploadsegment+0x144>)
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]
   ESCvar.xoe = 0;
 8002578:	4b04      	ldr	r3, [pc, #16]	; (800258c <SDO_uploadsegment+0x140>)
 800257a:	2200      	movs	r2, #0
 800257c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
}
 8002580:	bf00      	nop
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	2000024c 	.word	0x2000024c
 800258c:	20000180 	.word	0x20000180
 8002590:	20000414 	.word	0x20000414

08002594 <SDO_download>:

/** Function for handling incoming requested SDO Download, validating the
 * request and sending an response. On error an SDO Abort will be sent.
 */
void SDO_download (void)
{
 8002594:	b590      	push	{r4, r7, lr}
 8002596:	b08d      	sub	sp, #52	; 0x34
 8002598:	af02      	add	r7, sp, #8
   uint16_t size, actsize;
   const _objd *objd;
   uint32_t *mbxdata;
   uint32_t abort;

   coesdo = (_COEsdo *) &MBX[0];
 800259a:	4b93      	ldr	r3, [pc, #588]	; (80027e8 <SDO_download+0x254>)
 800259c:	61fb      	str	r3, [r7, #28]
   index = etohs (coesdo->index);
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	7a5a      	ldrb	r2, [r3, #9]
 80025a2:	7a9b      	ldrb	r3, [r3, #10]
 80025a4:	021b      	lsls	r3, r3, #8
 80025a6:	4313      	orrs	r3, r2
 80025a8:	837b      	strh	r3, [r7, #26]
   subindex = coesdo->subindex;
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	7adb      	ldrb	r3, [r3, #11]
 80025ae:	767b      	strb	r3, [r7, #25]
   nidx = SDO_findobject (index);
 80025b0:	8b7b      	ldrh	r3, [r7, #26]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff fc46 	bl	8001e44 <SDO_findobject>
 80025b8:	4603      	mov	r3, r0
 80025ba:	82fb      	strh	r3, [r7, #22]
   if (nidx >= 0)
 80025bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f2c0 80ff 	blt.w	80027c4 <SDO_download+0x230>
   {
      nsub = SDO_findsubindex (nidx, subindex);
 80025c6:	7e7a      	ldrb	r2, [r7, #25]
 80025c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80025cc:	4611      	mov	r1, r2
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff fbe0 	bl	8001d94 <SDO_findsubindex>
 80025d4:	4603      	mov	r3, r0
 80025d6:	82bb      	strh	r3, [r7, #20]
      if (nsub >= 0)
 80025d8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f2c0 80ea 	blt.w	80027b6 <SDO_download+0x222>
      {
         objd = SDOobjects[nidx].objdesc;
 80025e2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80025e6:	4981      	ldr	r1, [pc, #516]	; (80027ec <SDO_download+0x258>)
 80025e8:	4613      	mov	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	1a9b      	subs	r3, r3, r2
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	440b      	add	r3, r1
 80025f2:	3308      	adds	r3, #8
 80025f4:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80025f8:	613b      	str	r3, [r7, #16]
         uint8_t access = (objd + nsub)->flags & 0x3f;
 80025fa:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80025fe:	4613      	mov	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	461a      	mov	r2, r3
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	4413      	add	r3, r2
 800260c:	88db      	ldrh	r3, [r3, #6]
 800260e:	b29b      	uxth	r3, r3
 8002610:	b2db      	uxtb	r3, r3
 8002612:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002616:	73fb      	strb	r3, [r7, #15]
         uint8_t state = ESCvar.ALstatus & 0x0f;
 8002618:	4b75      	ldr	r3, [pc, #468]	; (80027f0 <SDO_download+0x25c>)
 800261a:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800261e:	b2db      	uxtb	r3, r3
 8002620:	f003 030f 	and.w	r3, r3, #15
 8002624:	73bb      	strb	r3, [r7, #14]
         if (access == ATYPE_RW ||
 8002626:	7bfb      	ldrb	r3, [r7, #15]
 8002628:	2b3f      	cmp	r3, #63	; 0x3f
 800262a:	d007      	beq.n	800263c <SDO_download+0xa8>
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	2b0f      	cmp	r3, #15
 8002630:	f040 80b0 	bne.w	8002794 <SDO_download+0x200>
             (access == ATYPE_RWpre && state == ESCpreop))
 8002634:	7bbb      	ldrb	r3, [r7, #14]
 8002636:	2b02      	cmp	r3, #2
 8002638:	f040 80ac 	bne.w	8002794 <SDO_download+0x200>
         {
            /* expedited? */
            if (coesdo->command & COE_EXPEDITED_INDICATOR)
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	7a1b      	ldrb	r3, [r3, #8]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00d      	beq.n	8002664 <SDO_download+0xd0>
            {
               size = 4 - ((coesdo->command & 0x0c) >> 2);
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	7a1b      	ldrb	r3, [r3, #8]
 800264c:	109b      	asrs	r3, r3, #2
 800264e:	b29b      	uxth	r3, r3
 8002650:	f003 0303 	and.w	r3, r3, #3
 8002654:	b29b      	uxth	r3, r3
 8002656:	f1c3 0304 	rsb	r3, r3, #4
 800265a:	84fb      	strh	r3, [r7, #38]	; 0x26
               mbxdata = &(coesdo->size);
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	330c      	adds	r3, #12
 8002660:	623b      	str	r3, [r7, #32]
 8002662:	e006      	b.n	8002672 <SDO_download+0xde>
            }
            else
            {
               /* normal download */
               size = (etohl (coesdo->size) & 0xffff);
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	84fb      	strh	r3, [r7, #38]	; 0x26
               mbxdata = (&(coesdo->size)) + 1;
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	330c      	adds	r3, #12
 800266e:	3304      	adds	r3, #4
 8002670:	623b      	str	r3, [r7, #32]
            }
            actsize = ((objd + nsub)->bitlength + 7) >> 3;
 8002672:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	461a      	mov	r2, r3
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4413      	add	r3, r2
 8002684:	889b      	ldrh	r3, [r3, #4]
 8002686:	b29b      	uxth	r3, r3
 8002688:	3307      	adds	r3, #7
 800268a:	10db      	asrs	r3, r3, #3
 800268c:	81bb      	strh	r3, [r7, #12]
            if (actsize == size)
 800268e:	89ba      	ldrh	r2, [r7, #12]
 8002690:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002692:	429a      	cmp	r2, r3
 8002694:	d177      	bne.n	8002786 <SDO_download+0x1f2>
            {
               abort = ESC_pre_objecthandler (
 8002696:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
                  index,
                  subindex,
                  mbxdata,
                  size,
                  (objd + nsub)->flags
 8002698:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800269c:	4613      	mov	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	461a      	mov	r2, r3
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4413      	add	r3, r2
               abort = ESC_pre_objecthandler (
 80026aa:	88db      	ldrh	r3, [r3, #6]
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	7e79      	ldrb	r1, [r7, #25]
 80026b0:	8b78      	ldrh	r0, [r7, #26]
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	4623      	mov	r3, r4
 80026b6:	6a3a      	ldr	r2, [r7, #32]
 80026b8:	f7fd ff72 	bl	80005a0 <ESC_pre_objecthandler>
 80026bc:	60b8      	str	r0, [r7, #8]
               );
               if (abort == 0)
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d159      	bne.n	8002778 <SDO_download+0x1e4>
               {
                  copy2mbx (mbxdata, (objd + nsub)->data, size);
 80026c4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80026c8:	4613      	mov	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	461a      	mov	r2, r3
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	4413      	add	r3, r2
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80026da:	4619      	mov	r1, r3
 80026dc:	6a38      	ldr	r0, [r7, #32]
 80026de:	f7ff fd33 	bl	8002148 <copy2mbx>
                  MBXout = ESC_claimbuffer ();
 80026e2:	f7fe fc93 	bl	800100c <ESC_claimbuffer>
 80026e6:	4603      	mov	r3, r0
 80026e8:	71fb      	strb	r3, [r7, #7]
                  if (MBXout)
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d032      	beq.n	8002756 <SDO_download+0x1c2>
                  {
                     coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 80026f0:	79fb      	ldrb	r3, [r7, #7]
 80026f2:	4a3f      	ldr	r2, [pc, #252]	; (80027f0 <SDO_download+0x25c>)
 80026f4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80026f6:	fb02 f303 	mul.w	r3, r2, r3
 80026fa:	4a3b      	ldr	r2, [pc, #236]	; (80027e8 <SDO_download+0x254>)
 80026fc:	4413      	add	r3, r2
 80026fe:	603b      	str	r3, [r7, #0]
                     coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	2200      	movs	r2, #0
 8002704:	f042 020a 	orr.w	r2, r2, #10
 8002708:	701a      	strb	r2, [r3, #0]
 800270a:	2200      	movs	r2, #0
 800270c:	705a      	strb	r2, [r3, #1]
                     coeres->mbxheader.mbxtype = MBXCOE;
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	7953      	ldrb	r3, [r2, #5]
 8002712:	2103      	movs	r1, #3
 8002714:	f361 0303 	bfi	r3, r1, #0, #4
 8002718:	7153      	strb	r3, [r2, #5]
                     coeres->coeheader.numberservice =
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	2200      	movs	r2, #0
 800271e:	719a      	strb	r2, [r3, #6]
 8002720:	2200      	movs	r2, #0
 8002722:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8002726:	71da      	strb	r2, [r3, #7]
                        htoes ((0 & 0x01f) | (COE_SDORESPONSE << 12));
                     coeres->index = htoes (index);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	8b7a      	ldrh	r2, [r7, #26]
 800272c:	f8a3 2009 	strh.w	r2, [r3, #9]
                     coeres->subindex = subindex;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	7e7a      	ldrb	r2, [r7, #25]
 8002734:	72da      	strb	r2, [r3, #11]
                     coeres->command = COE_COMMAND_DOWNLOADRESPONSE;
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2260      	movs	r2, #96	; 0x60
 800273a:	721a      	strb	r2, [r3, #8]
                     coeres->size = htoel (0);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	2200      	movs	r2, #0
 8002740:	731a      	strb	r2, [r3, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	735a      	strb	r2, [r3, #13]
 8002746:	2200      	movs	r2, #0
 8002748:	739a      	strb	r2, [r3, #14]
 800274a:	2200      	movs	r2, #0
 800274c:	73da      	strb	r2, [r3, #15]
                     MBXcontrol[MBXout].state = MBXstate_outreq;
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	4a28      	ldr	r2, [pc, #160]	; (80027f4 <SDO_download+0x260>)
 8002752:	2103      	movs	r1, #3
 8002754:	54d1      	strb	r1, [r2, r3]
                  }
                  /* external object write handler */
                  ESC_objecthandler (index, subindex, (objd + nsub)->flags);
 8002756:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800275a:	4613      	mov	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	461a      	mov	r2, r3
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4413      	add	r3, r2
 8002768:	88db      	ldrh	r3, [r3, #6]
 800276a:	b29a      	uxth	r2, r3
 800276c:	7e79      	ldrb	r1, [r7, #25]
 800276e:	8b7b      	ldrh	r3, [r7, #26]
 8002770:	4618      	mov	r0, r3
 8002772:	f7fd ff5d 	bl	8000630 <ESC_objecthandler>
            if (actsize == size)
 8002776:	e02b      	b.n	80027d0 <SDO_download+0x23c>
               }
               else
               {
                  SDO_abort (index, subindex, abort);
 8002778:	7e79      	ldrb	r1, [r7, #25]
 800277a:	8b7b      	ldrh	r3, [r7, #26]
 800277c:	68ba      	ldr	r2, [r7, #8]
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff fcf4 	bl	800216c <SDO_abort>
            if (actsize == size)
 8002784:	e024      	b.n	80027d0 <SDO_download+0x23c>
               }
            }
            else
            {
               SDO_abort (index, subindex, ABORT_TYPEMISMATCH);
 8002786:	7e79      	ldrb	r1, [r7, #25]
 8002788:	8b7b      	ldrh	r3, [r7, #26]
 800278a:	4a1b      	ldr	r2, [pc, #108]	; (80027f8 <SDO_download+0x264>)
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff fced 	bl	800216c <SDO_abort>
            if (actsize == size)
 8002792:	e01d      	b.n	80027d0 <SDO_download+0x23c>
            }
         }
         else
         {
            if (access == ATYPE_RWpre)
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	2b0f      	cmp	r3, #15
 8002798:	d106      	bne.n	80027a8 <SDO_download+0x214>
            {
               SDO_abort (index, subindex, ABORT_NOTINTHISSTATE);
 800279a:	7e79      	ldrb	r1, [r7, #25]
 800279c:	8b7b      	ldrh	r3, [r7, #26]
 800279e:	4a17      	ldr	r2, [pc, #92]	; (80027fc <SDO_download+0x268>)
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff fce3 	bl	800216c <SDO_abort>
 80027a6:	e013      	b.n	80027d0 <SDO_download+0x23c>
            }
            else
            {
               SDO_abort (index, subindex, ABORT_READONLY);
 80027a8:	7e79      	ldrb	r1, [r7, #25]
 80027aa:	8b7b      	ldrh	r3, [r7, #26]
 80027ac:	4a14      	ldr	r2, [pc, #80]	; (8002800 <SDO_download+0x26c>)
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff fcdc 	bl	800216c <SDO_abort>
 80027b4:	e00c      	b.n	80027d0 <SDO_download+0x23c>
            }
         }
      }
      else
      {
         SDO_abort (index, subindex, ABORT_NOSUBINDEX);
 80027b6:	7e79      	ldrb	r1, [r7, #25]
 80027b8:	8b7b      	ldrh	r3, [r7, #26]
 80027ba:	4a12      	ldr	r2, [pc, #72]	; (8002804 <SDO_download+0x270>)
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff fcd5 	bl	800216c <SDO_abort>
 80027c2:	e005      	b.n	80027d0 <SDO_download+0x23c>
      }
   }
   else
   {
      SDO_abort (index, subindex, ABORT_NOOBJECT);
 80027c4:	7e79      	ldrb	r1, [r7, #25]
 80027c6:	8b7b      	ldrh	r3, [r7, #26]
 80027c8:	4a0f      	ldr	r2, [pc, #60]	; (8002808 <SDO_download+0x274>)
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff fcce 	bl	800216c <SDO_abort>
   }
   MBXcontrol[0].state = MBXstate_idle;
 80027d0:	4b08      	ldr	r3, [pc, #32]	; (80027f4 <SDO_download+0x260>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	701a      	strb	r2, [r3, #0]
   ESCvar.xoe = 0;
 80027d6:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <SDO_download+0x25c>)
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
}
 80027de:	bf00      	nop
 80027e0:	372c      	adds	r7, #44	; 0x2c
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd90      	pop	{r4, r7, pc}
 80027e6:	bf00      	nop
 80027e8:	2000024c 	.word	0x2000024c
 80027ec:	0800bc44 	.word	0x0800bc44
 80027f0:	20000180 	.word	0x20000180
 80027f4:	20000414 	.word	0x20000414
 80027f8:	06070010 	.word	0x06070010
 80027fc:	08000022 	.word	0x08000022
 8002800:	06010002 	.word	0x06010002
 8002804:	06090011 	.word	0x06090011
 8002808:	06020000 	.word	0x06020000

0800280c <SDO_infoerror>:
/** Function for sending an SDO Info Error reply.
 *
 * @param[in] abortcode  = = abort code to send in reply
 */
void SDO_infoerror (uint32_t abortcode)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
   uint8_t MBXout;
   _COEobjdesc *coeres;
   MBXout = ESC_claimbuffer ();
 8002814:	f7fe fbfa 	bl	800100c <ESC_claimbuffer>
 8002818:	4603      	mov	r3, r0
 800281a:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 800281c:	7bfb      	ldrb	r3, [r7, #15]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d042      	beq.n	80028a8 <SDO_infoerror+0x9c>
   {
      coeres = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 8002822:	7bfb      	ldrb	r3, [r7, #15]
 8002824:	4a22      	ldr	r2, [pc, #136]	; (80028b0 <SDO_infoerror+0xa4>)
 8002826:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002828:	fb02 f303 	mul.w	r3, r2, r3
 800282c:	4a21      	ldr	r2, [pc, #132]	; (80028b4 <SDO_infoerror+0xa8>)
 800282e:	4413      	add	r3, r2
 8002830:	60bb      	str	r3, [r7, #8]
      coeres->mbxheader.length = htoes ((uint16_t) 0x0a);
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2200      	movs	r2, #0
 8002836:	f042 020a 	orr.w	r2, r2, #10
 800283a:	701a      	strb	r2, [r3, #0]
 800283c:	2200      	movs	r2, #0
 800283e:	705a      	strb	r2, [r3, #1]
      coeres->mbxheader.mbxtype = MBXCOE;
 8002840:	68ba      	ldr	r2, [r7, #8]
 8002842:	7953      	ldrb	r3, [r2, #5]
 8002844:	2103      	movs	r1, #3
 8002846:	f361 0303 	bfi	r3, r1, #0, #4
 800284a:	7153      	strb	r3, [r2, #5]
      coeres->coeheader.numberservice =
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2200      	movs	r2, #0
 8002850:	719a      	strb	r2, [r3, #6]
 8002852:	2200      	movs	r2, #0
 8002854:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002858:	71da      	strb	r2, [r3, #7]
         htoes ((0 & 0x01f) | (COE_SDOINFORMATION << 12));
      /* SDO info error request */
      coeres->infoheader.opcode = COE_INFOERROR;
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	7a13      	ldrb	r3, [r2, #8]
 800285e:	2107      	movs	r1, #7
 8002860:	f361 0306 	bfi	r3, r1, #0, #7
 8002864:	7213      	strb	r3, [r2, #8]
      coeres->infoheader.incomplete = 0;
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	7a13      	ldrb	r3, [r2, #8]
 800286a:	f36f 13c7 	bfc	r3, #7, #1
 800286e:	7213      	strb	r3, [r2, #8]
      coeres->infoheader.reserved = 0x00;
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2200      	movs	r2, #0
 8002874:	725a      	strb	r2, [r3, #9]
      coeres->infoheader.fragmentsleft = 0;
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2200      	movs	r2, #0
 800287a:	729a      	strb	r2, [r3, #10]
 800287c:	2200      	movs	r2, #0
 800287e:	72da      	strb	r2, [r3, #11]
      coeres->index = (uint16_t)htoel (abortcode);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	b29a      	uxth	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	819a      	strh	r2, [r3, #12]
      coeres->datatype = (uint16_t)(htoel (abortcode) >> 16);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	0c1b      	lsrs	r3, r3, #16
 800288c:	b29a      	uxth	r2, r3
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	81da      	strh	r2, [r3, #14]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 8002892:	7bfb      	ldrb	r3, [r7, #15]
 8002894:	4a08      	ldr	r2, [pc, #32]	; (80028b8 <SDO_infoerror+0xac>)
 8002896:	2103      	movs	r1, #3
 8002898:	54d1      	strb	r1, [r2, r3]
      MBXcontrol[0].state = MBXstate_idle;
 800289a:	4b07      	ldr	r3, [pc, #28]	; (80028b8 <SDO_infoerror+0xac>)
 800289c:	2200      	movs	r2, #0
 800289e:	701a      	strb	r2, [r3, #0]
      ESCvar.xoe = 0;
 80028a0:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <SDO_infoerror+0xa4>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
   }
}
 80028a8:	bf00      	nop
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	20000180 	.word	0x20000180
 80028b4:	2000024c 	.word	0x2000024c
 80028b8:	20000414 	.word	0x20000414

080028bc <SDO_getodlist>:

/** Function for handling incoming requested SDO Get OD List, validating the
 * request and sending an response. On error an SDO Info Error will be sent.
 */
void SDO_getodlist (void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
   uint16_t frags;
   uint8_t MBXout = 0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	75fb      	strb	r3, [r7, #23]
   uint16_t entries = 0;
 80028c6:	2300      	movs	r3, #0
 80028c8:	82bb      	strh	r3, [r7, #20]
   uint16_t i, n;
   uint16_t *p;
   _COEobjdesc *coel, *coer;

   while (SDOobjects[entries].index != 0xffff)
 80028ca:	e002      	b.n	80028d2 <SDO_getodlist+0x16>
   {
      entries++;
 80028cc:	8abb      	ldrh	r3, [r7, #20]
 80028ce:	3301      	adds	r3, #1
 80028d0:	82bb      	strh	r3, [r7, #20]
   while (SDOobjects[entries].index != 0xffff)
 80028d2:	8aba      	ldrh	r2, [r7, #20]
 80028d4:	4988      	ldr	r1, [pc, #544]	; (8002af8 <SDO_getodlist+0x23c>)
 80028d6:	4613      	mov	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	1a9b      	subs	r3, r3, r2
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	440b      	add	r3, r1
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d1ef      	bne.n	80028cc <SDO_getodlist+0x10>
   }
   ESCvar.entries = entries;
 80028ec:	4a83      	ldr	r2, [pc, #524]	; (8002afc <SDO_getodlist+0x240>)
 80028ee:	8abb      	ldrh	r3, [r7, #20]
 80028f0:	f8a2 3088 	strh.w	r3, [r2, #136]	; 0x88
   frags = ((entries << 1) + ODLISTSIZE - 1);
 80028f4:	8abb      	ldrh	r3, [r7, #20]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	4b80      	ldr	r3, [pc, #512]	; (8002afc <SDO_getodlist+0x240>)
 80028fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028fe:	885b      	ldrh	r3, [r3, #2]
 8002900:	3b0e      	subs	r3, #14
 8002902:	b29b      	uxth	r3, r3
 8002904:	f023 0301 	bic.w	r3, r3, #1
 8002908:	b29b      	uxth	r3, r3
 800290a:	4413      	add	r3, r2
 800290c:	b29b      	uxth	r3, r3
 800290e:	3b01      	subs	r3, #1
 8002910:	817b      	strh	r3, [r7, #10]
   frags /= ODLISTSIZE;
 8002912:	897a      	ldrh	r2, [r7, #10]
 8002914:	4b79      	ldr	r3, [pc, #484]	; (8002afc <SDO_getodlist+0x240>)
 8002916:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002918:	885b      	ldrh	r3, [r3, #2]
 800291a:	f1a3 010e 	sub.w	r1, r3, #14
 800291e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002922:	400b      	ands	r3, r1
 8002924:	fbb2 f3f3 	udiv	r3, r2, r3
 8002928:	817b      	strh	r3, [r7, #10]
   coer = (_COEobjdesc *) &MBX[0];
 800292a:	4b75      	ldr	r3, [pc, #468]	; (8002b00 <SDO_getodlist+0x244>)
 800292c:	607b      	str	r3, [r7, #4]
   /* check for unsupported opcodes */
   if (etohs (coer->index) > 0x01)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	899b      	ldrh	r3, [r3, #12]
 8002932:	b29b      	uxth	r3, r3
 8002934:	2b01      	cmp	r3, #1
 8002936:	d903      	bls.n	8002940 <SDO_getodlist+0x84>
   {
      SDO_infoerror (ABORT_UNSUPPORTED);
 8002938:	4872      	ldr	r0, [pc, #456]	; (8002b04 <SDO_getodlist+0x248>)
 800293a:	f7ff ff67 	bl	800280c <SDO_infoerror>
 800293e:	e003      	b.n	8002948 <SDO_getodlist+0x8c>
   }
   else
   {
      MBXout = ESC_claimbuffer ();
 8002940:	f7fe fb64 	bl	800100c <ESC_claimbuffer>
 8002944:	4603      	mov	r3, r0
 8002946:	75fb      	strb	r3, [r7, #23]
   }
   if (MBXout)
 8002948:	7dfb      	ldrb	r3, [r7, #23]
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 80d0 	beq.w	8002af0 <SDO_getodlist+0x234>
   {
      coel = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 8002950:	7dfb      	ldrb	r3, [r7, #23]
 8002952:	4a6a      	ldr	r2, [pc, #424]	; (8002afc <SDO_getodlist+0x240>)
 8002954:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002956:	fb02 f303 	mul.w	r3, r2, r3
 800295a:	4a69      	ldr	r2, [pc, #420]	; (8002b00 <SDO_getodlist+0x244>)
 800295c:	4413      	add	r3, r2
 800295e:	603b      	str	r3, [r7, #0]
      coel->mbxheader.mbxtype = MBXCOE;
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	7953      	ldrb	r3, [r2, #5]
 8002964:	2103      	movs	r1, #3
 8002966:	f361 0303 	bfi	r3, r1, #0, #4
 800296a:	7153      	strb	r3, [r2, #5]
      coel->coeheader.numberservice =
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	2200      	movs	r2, #0
 8002970:	719a      	strb	r2, [r3, #6]
 8002972:	2200      	movs	r2, #0
 8002974:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002978:	71da      	strb	r2, [r3, #7]
         htoes ((0 & 0x01f) | (COE_SDOINFORMATION << 12));
      coel->infoheader.opcode = COE_GETODLISTRESPONSE;
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	7a13      	ldrb	r3, [r2, #8]
 800297e:	2102      	movs	r1, #2
 8002980:	f361 0306 	bfi	r3, r1, #0, #7
 8002984:	7213      	strb	r3, [r2, #8]
      /* number of objects request */
      if (etohs (coer->index) == 0x00)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	899b      	ldrh	r3, [r3, #12]
 800298a:	b29b      	uxth	r3, r3
 800298c:	2b00      	cmp	r3, #0
 800298e:	d147      	bne.n	8002a20 <SDO_getodlist+0x164>
      {
         coel->index = htoes ((uint16_t) 0x00);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	2200      	movs	r2, #0
 8002994:	731a      	strb	r2, [r3, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	735a      	strb	r2, [r3, #13]
         coel->infoheader.incomplete = 0;
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	7a13      	ldrb	r3, [r2, #8]
 800299e:	f36f 13c7 	bfc	r3, #7, #1
 80029a2:	7213      	strb	r3, [r2, #8]
         coel->infoheader.reserved = 0x00;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	2200      	movs	r2, #0
 80029a8:	725a      	strb	r2, [r3, #9]
         coel->infoheader.fragmentsleft = htoes ((uint16_t) 0);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	2200      	movs	r2, #0
 80029ae:	729a      	strb	r2, [r3, #10]
 80029b0:	2200      	movs	r2, #0
 80029b2:	72da      	strb	r2, [r3, #11]
         MBXcontrol[0].state = MBXstate_idle;
 80029b4:	4b54      	ldr	r3, [pc, #336]	; (8002b08 <SDO_getodlist+0x24c>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	701a      	strb	r2, [r3, #0]
         ESCvar.xoe = 0;
 80029ba:	4b50      	ldr	r3, [pc, #320]	; (8002afc <SDO_getodlist+0x240>)
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
         ESCvar.frags = frags;
 80029c2:	4a4e      	ldr	r2, [pc, #312]	; (8002afc <SDO_getodlist+0x240>)
 80029c4:	897b      	ldrh	r3, [r7, #10]
 80029c6:	f8a2 308a 	strh.w	r3, [r2, #138]	; 0x8a
         ESCvar.fragsleft = frags - 1;
 80029ca:	897b      	ldrh	r3, [r7, #10]
 80029cc:	3b01      	subs	r3, #1
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	4b4a      	ldr	r3, [pc, #296]	; (8002afc <SDO_getodlist+0x240>)
 80029d2:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
         p = &(coel->datatype);
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	330e      	adds	r3, #14
 80029da:	60fb      	str	r3, [r7, #12]
         *p = htoes (entries);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8aba      	ldrh	r2, [r7, #20]
 80029e0:	801a      	strh	r2, [r3, #0]
         p++;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	3302      	adds	r3, #2
 80029e6:	60fb      	str	r3, [r7, #12]
         *p = 0;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	801a      	strh	r2, [r3, #0]
         p++;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	3302      	adds	r3, #2
 80029f2:	60fb      	str	r3, [r7, #12]
         *p = 0;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	801a      	strh	r2, [r3, #0]
         p++;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	3302      	adds	r3, #2
 80029fe:	60fb      	str	r3, [r7, #12]
         *p = 0;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	801a      	strh	r2, [r3, #0]
         p++;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	3302      	adds	r3, #2
 8002a0a:	60fb      	str	r3, [r7, #12]
         *p = 0;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	801a      	strh	r2, [r3, #0]
         coel->mbxheader.length = htoes (0x08 + (5 << 1));
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f042 0212 	orr.w	r2, r2, #18
 8002a1a:	701a      	strb	r2, [r3, #0]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	705a      	strb	r2, [r3, #1]
      }
      /* only return all objects */
      if (etohs (coer->index) == 0x01)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	899b      	ldrh	r3, [r3, #12]
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d15e      	bne.n	8002ae8 <SDO_getodlist+0x22c>
      {
         if (frags > 1)
 8002a2a:	897b      	ldrh	r3, [r7, #10]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d912      	bls.n	8002a56 <SDO_getodlist+0x19a>
         {
            coel->infoheader.incomplete = 1;
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	7a13      	ldrb	r3, [r2, #8]
 8002a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a38:	7213      	strb	r3, [r2, #8]
            ESCvar.xoe = MBXCOE + MBXODL;
 8002a3a:	4b30      	ldr	r3, [pc, #192]	; (8002afc <SDO_getodlist+0x240>)
 8002a3c:	2213      	movs	r2, #19
 8002a3e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
            n = ODLISTSIZE >> 1;
 8002a42:	4b2e      	ldr	r3, [pc, #184]	; (8002afc <SDO_getodlist+0x240>)
 8002a44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a46:	885b      	ldrh	r3, [r3, #2]
 8002a48:	3b0e      	subs	r3, #14
 8002a4a:	085b      	lsrs	r3, r3, #1
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002a52:	823b      	strh	r3, [r7, #16]
 8002a54:	e00d      	b.n	8002a72 <SDO_getodlist+0x1b6>
         }
         else
         {
            coel->infoheader.incomplete = 0;
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	7a13      	ldrb	r3, [r2, #8]
 8002a5a:	f36f 13c7 	bfc	r3, #7, #1
 8002a5e:	7213      	strb	r3, [r2, #8]
            MBXcontrol[0].state = MBXstate_idle;
 8002a60:	4b29      	ldr	r3, [pc, #164]	; (8002b08 <SDO_getodlist+0x24c>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	701a      	strb	r2, [r3, #0]
            ESCvar.xoe = 0;
 8002a66:	4b25      	ldr	r3, [pc, #148]	; (8002afc <SDO_getodlist+0x240>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
            n = entries;
 8002a6e:	8abb      	ldrh	r3, [r7, #20]
 8002a70:	823b      	strh	r3, [r7, #16]
         }
         coel->infoheader.reserved = 0x00;
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2200      	movs	r2, #0
 8002a76:	725a      	strb	r2, [r3, #9]
         ESCvar.frags = frags;
 8002a78:	4a20      	ldr	r2, [pc, #128]	; (8002afc <SDO_getodlist+0x240>)
 8002a7a:	897b      	ldrh	r3, [r7, #10]
 8002a7c:	f8a2 308a 	strh.w	r3, [r2, #138]	; 0x8a
         ESCvar.fragsleft = frags - 1;
 8002a80:	897b      	ldrh	r3, [r7, #10]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	4b1d      	ldr	r3, [pc, #116]	; (8002afc <SDO_getodlist+0x240>)
 8002a88:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
         coel->infoheader.fragmentsleft = htoes (ESCvar.fragsleft);
 8002a8c:	4b1b      	ldr	r3, [pc, #108]	; (8002afc <SDO_getodlist+0x240>)
 8002a8e:	f8b3 208c 	ldrh.w	r2, [r3, #140]	; 0x8c
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	815a      	strh	r2, [r3, #10]
         coel->index = htoes ((uint16_t) 0x01);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f042 0201 	orr.w	r2, r2, #1
 8002a9e:	731a      	strb	r2, [r3, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	735a      	strb	r2, [r3, #13]

         p = &(coel->datatype);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	330e      	adds	r3, #14
 8002aa8:	60fb      	str	r3, [r7, #12]
         for (i = 0; i < n; i++)
 8002aaa:	2300      	movs	r3, #0
 8002aac:	827b      	strh	r3, [r7, #18]
 8002aae:	e010      	b.n	8002ad2 <SDO_getodlist+0x216>
         {
            *p = htoes (SDOobjects[i].index);
 8002ab0:	8a7a      	ldrh	r2, [r7, #18]
 8002ab2:	4911      	ldr	r1, [pc, #68]	; (8002af8 <SDO_getodlist+0x23c>)
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	1a9b      	subs	r3, r3, r2
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	440b      	add	r3, r1
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	801a      	strh	r2, [r3, #0]
            p++;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	3302      	adds	r3, #2
 8002aca:	60fb      	str	r3, [r7, #12]
         for (i = 0; i < n; i++)
 8002acc:	8a7b      	ldrh	r3, [r7, #18]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	827b      	strh	r3, [r7, #18]
 8002ad2:	8a7a      	ldrh	r2, [r7, #18]
 8002ad4:	8a3b      	ldrh	r3, [r7, #16]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d3ea      	bcc.n	8002ab0 <SDO_getodlist+0x1f4>
         }

         coel->mbxheader.length = htoes (0x08 + (n << 1));
 8002ada:	8a3b      	ldrh	r3, [r7, #16]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	3308      	adds	r3, #8
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	801a      	strh	r2, [r3, #0]
      }
      MBXcontrol[MBXout].state = MBXstate_outreq;
 8002ae8:	7dfb      	ldrb	r3, [r7, #23]
 8002aea:	4a07      	ldr	r2, [pc, #28]	; (8002b08 <SDO_getodlist+0x24c>)
 8002aec:	2103      	movs	r1, #3
 8002aee:	54d1      	strb	r1, [r2, r3]
   }
}
 8002af0:	bf00      	nop
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	0800bc44 	.word	0x0800bc44
 8002afc:	20000180 	.word	0x20000180
 8002b00:	2000024c 	.word	0x2000024c
 8002b04:	06010000 	.word	0x06010000
 8002b08:	20000414 	.word	0x20000414

08002b0c <SDO_getodlistcont>:
/** Function for continuing sending left overs from previous requested
 * SDO Get OD List, validating the request and sending an response.
 *
 */
void SDO_getodlistcont (void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
   uint8_t MBXout;
   uint16_t i, n, s;
   uint16_t *p;
   _COEobjdesc *coel;

   MBXout = ESC_claimbuffer ();
 8002b12:	f7fe fa7b 	bl	800100c <ESC_claimbuffer>
 8002b16:	4603      	mov	r3, r0
 8002b18:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 8002b1a:	7bfb      	ldrb	r3, [r7, #15]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 808f 	beq.w	8002c40 <SDO_getodlistcont+0x134>
   {
      coel = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 8002b22:	7bfb      	ldrb	r3, [r7, #15]
 8002b24:	4a48      	ldr	r2, [pc, #288]	; (8002c48 <SDO_getodlistcont+0x13c>)
 8002b26:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002b28:	fb02 f303 	mul.w	r3, r2, r3
 8002b2c:	4a47      	ldr	r2, [pc, #284]	; (8002c4c <SDO_getodlistcont+0x140>)
 8002b2e:	4413      	add	r3, r2
 8002b30:	60bb      	str	r3, [r7, #8]
      coel->mbxheader.mbxtype = MBXCOE;
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	7953      	ldrb	r3, [r2, #5]
 8002b36:	2103      	movs	r1, #3
 8002b38:	f361 0303 	bfi	r3, r1, #0, #4
 8002b3c:	7153      	strb	r3, [r2, #5]
      coel->coeheader.numberservice =
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2200      	movs	r2, #0
 8002b42:	719a      	strb	r2, [r3, #6]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b4a:	71da      	strb	r2, [r3, #7]
         htoes ((0 & 0x01f) | (COE_SDOINFORMATION << 12));
      coel->infoheader.opcode = COE_GETODLISTRESPONSE;
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	7a13      	ldrb	r3, [r2, #8]
 8002b50:	2102      	movs	r1, #2
 8002b52:	f361 0306 	bfi	r3, r1, #0, #7
 8002b56:	7213      	strb	r3, [r2, #8]
      s = (ESCvar.frags - ESCvar.fragsleft) * (ODLISTSIZE >> 1);
 8002b58:	4b3b      	ldr	r3, [pc, #236]	; (8002c48 <SDO_getodlistcont+0x13c>)
 8002b5a:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 8002b5e:	4b3a      	ldr	r3, [pc, #232]	; (8002c48 <SDO_getodlistcont+0x13c>)
 8002b60:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	4b37      	ldr	r3, [pc, #220]	; (8002c48 <SDO_getodlistcont+0x13c>)
 8002b6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b6c:	885b      	ldrh	r3, [r3, #2]
 8002b6e:	3b0e      	subs	r3, #14
 8002b70:	085b      	lsrs	r3, r3, #1
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	fb12 f303 	smulbb	r3, r2, r3
 8002b7e:	80fb      	strh	r3, [r7, #6]
      if (ESCvar.fragsleft > 1)
 8002b80:	4b31      	ldr	r3, [pc, #196]	; (8002c48 <SDO_getodlistcont+0x13c>)
 8002b82:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d911      	bls.n	8002bae <SDO_getodlistcont+0xa2>
      {
         coel->infoheader.incomplete = 1;
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	7a13      	ldrb	r3, [r2, #8]
 8002b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b92:	7213      	strb	r3, [r2, #8]
         n = s + (ODLISTSIZE >> 1);
 8002b94:	4b2c      	ldr	r3, [pc, #176]	; (8002c48 <SDO_getodlistcont+0x13c>)
 8002b96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b98:	885b      	ldrh	r3, [r3, #2]
 8002b9a:	3b0e      	subs	r3, #14
 8002b9c:	085b      	lsrs	r3, r3, #1
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	88fb      	ldrh	r3, [r7, #6]
 8002ba8:	4413      	add	r3, r2
 8002baa:	82bb      	strh	r3, [r7, #20]
 8002bac:	e00f      	b.n	8002bce <SDO_getodlistcont+0xc2>
      }
      else
      {
         coel->infoheader.incomplete = 0;
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	7a13      	ldrb	r3, [r2, #8]
 8002bb2:	f36f 13c7 	bfc	r3, #7, #1
 8002bb6:	7213      	strb	r3, [r2, #8]
         MBXcontrol[0].state = MBXstate_idle;
 8002bb8:	4b25      	ldr	r3, [pc, #148]	; (8002c50 <SDO_getodlistcont+0x144>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	701a      	strb	r2, [r3, #0]
         ESCvar.xoe = 0;
 8002bbe:	4b22      	ldr	r3, [pc, #136]	; (8002c48 <SDO_getodlistcont+0x13c>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
         n = ESCvar.entries;
 8002bc6:	4b20      	ldr	r3, [pc, #128]	; (8002c48 <SDO_getodlistcont+0x13c>)
 8002bc8:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002bcc:	82bb      	strh	r3, [r7, #20]
      }
      coel->infoheader.reserved = 0x00;
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	725a      	strb	r2, [r3, #9]
      ESCvar.fragsleft--;
 8002bd4:	4b1c      	ldr	r3, [pc, #112]	; (8002c48 <SDO_getodlistcont+0x13c>)
 8002bd6:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	4b1a      	ldr	r3, [pc, #104]	; (8002c48 <SDO_getodlistcont+0x13c>)
 8002be0:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
      coel->infoheader.fragmentsleft = htoes (ESCvar.fragsleft);
 8002be4:	4b18      	ldr	r3, [pc, #96]	; (8002c48 <SDO_getodlistcont+0x13c>)
 8002be6:	f8b3 208c 	ldrh.w	r2, [r3, #140]	; 0x8c
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	815a      	strh	r2, [r3, #10]
      /* pointer 2 bytes back to exclude index */
      p = &(coel->index);
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	330c      	adds	r3, #12
 8002bf2:	613b      	str	r3, [r7, #16]
      for (i = s; i < n; i++)
 8002bf4:	88fb      	ldrh	r3, [r7, #6]
 8002bf6:	82fb      	strh	r3, [r7, #22]
 8002bf8:	e010      	b.n	8002c1c <SDO_getodlistcont+0x110>
      {
         *p = htoes (SDOobjects[i].index);
 8002bfa:	8afa      	ldrh	r2, [r7, #22]
 8002bfc:	4915      	ldr	r1, [pc, #84]	; (8002c54 <SDO_getodlistcont+0x148>)
 8002bfe:	4613      	mov	r3, r2
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	1a9b      	subs	r3, r3, r2
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	440b      	add	r3, r1
 8002c08:	881b      	ldrh	r3, [r3, #0]
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	801a      	strh	r2, [r3, #0]
         p++;
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	3302      	adds	r3, #2
 8002c14:	613b      	str	r3, [r7, #16]
      for (i = s; i < n; i++)
 8002c16:	8afb      	ldrh	r3, [r7, #22]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	82fb      	strh	r3, [r7, #22]
 8002c1c:	8afa      	ldrh	r2, [r7, #22]
 8002c1e:	8abb      	ldrh	r3, [r7, #20]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d3ea      	bcc.n	8002bfa <SDO_getodlistcont+0xee>
      }
      coel->mbxheader.length = htoes (0x06 + ((n - s) << 1));
 8002c24:	8aba      	ldrh	r2, [r7, #20]
 8002c26:	88fb      	ldrh	r3, [r7, #6]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	3306      	adds	r3, #6
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	801a      	strh	r2, [r3, #0]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	4a05      	ldr	r2, [pc, #20]	; (8002c50 <SDO_getodlistcont+0x144>)
 8002c3c:	2103      	movs	r1, #3
 8002c3e:	54d1      	strb	r1, [r2, r3]
   }
}
 8002c40:	bf00      	nop
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	20000180 	.word	0x20000180
 8002c4c:	2000024c 	.word	0x2000024c
 8002c50:	20000414 	.word	0x20000414
 8002c54:	0800bc44 	.word	0x0800bc44

08002c58 <SDO_getod>:
/** Function for handling incoming requested SDO Get Object Description,
 * validating the request and sending an response. On error an
 * SDO Info Error will be sent.
 */
void SDO_getod (void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08c      	sub	sp, #48	; 0x30
 8002c5c:	af00      	add	r7, sp, #0
   uint8_t MBXout;
   uint16_t index;
   int32_t nidx;
   uint8_t *d;
   const uint8_t *s;
   uint8_t n = 0;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   _COEobjdesc *coer, *coel;
   coer = (_COEobjdesc *) &MBX[0];
 8002c64:	4b8b      	ldr	r3, [pc, #556]	; (8002e94 <SDO_getod+0x23c>)
 8002c66:	623b      	str	r3, [r7, #32]
   index = etohs (coer->index);
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	7b1a      	ldrb	r2, [r3, #12]
 8002c6c:	7b5b      	ldrb	r3, [r3, #13]
 8002c6e:	021b      	lsls	r3, r3, #8
 8002c70:	4313      	orrs	r3, r2
 8002c72:	83fb      	strh	r3, [r7, #30]
   nidx = SDO_findobject (index);
 8002c74:	8bfb      	ldrh	r3, [r7, #30]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff f8e4 	bl	8001e44 <SDO_findobject>
 8002c7c:	61b8      	str	r0, [r7, #24]
   if (nidx >= 0)
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f2c0 8100 	blt.w	8002e86 <SDO_getod+0x22e>
   {
      MBXout = ESC_claimbuffer ();
 8002c86:	f7fe f9c1 	bl	800100c <ESC_claimbuffer>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	75fb      	strb	r3, [r7, #23]
      if (MBXout)
 8002c8e:	7dfb      	ldrb	r3, [r7, #23]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 80fb 	beq.w	8002e8c <SDO_getod+0x234>
      {
         coel = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 8002c96:	7dfb      	ldrb	r3, [r7, #23]
 8002c98:	4a7f      	ldr	r2, [pc, #508]	; (8002e98 <SDO_getod+0x240>)
 8002c9a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002c9c:	fb02 f303 	mul.w	r3, r2, r3
 8002ca0:	4a7c      	ldr	r2, [pc, #496]	; (8002e94 <SDO_getod+0x23c>)
 8002ca2:	4413      	add	r3, r2
 8002ca4:	613b      	str	r3, [r7, #16]
         coel->mbxheader.mbxtype = MBXCOE;
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	7953      	ldrb	r3, [r2, #5]
 8002caa:	2103      	movs	r1, #3
 8002cac:	f361 0303 	bfi	r3, r1, #0, #4
 8002cb0:	7153      	strb	r3, [r2, #5]
         coel->coeheader.numberservice =
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	719a      	strb	r2, [r3, #6]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002cbe:	71da      	strb	r2, [r3, #7]
            htoes ((0 & 0x01f) | (COE_SDOINFORMATION << 12));
         coel->infoheader.opcode = COE_GETODRESPONSE;
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	7a13      	ldrb	r3, [r2, #8]
 8002cc4:	2104      	movs	r1, #4
 8002cc6:	f361 0306 	bfi	r3, r1, #0, #7
 8002cca:	7213      	strb	r3, [r2, #8]
         coel->infoheader.incomplete = 0;
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	7a13      	ldrb	r3, [r2, #8]
 8002cd0:	f36f 13c7 	bfc	r3, #7, #1
 8002cd4:	7213      	strb	r3, [r2, #8]
         coel->infoheader.reserved = 0x00;
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	725a      	strb	r2, [r3, #9]
         coel->infoheader.fragmentsleft = htoes (0);
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	729a      	strb	r2, [r3, #10]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	72da      	strb	r2, [r3, #11]
         coel->index = htoes (index);
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	8bfa      	ldrh	r2, [r7, #30]
 8002cea:	819a      	strh	r2, [r3, #12]
         if (SDOobjects[nidx].objtype == OTYPE_VAR)
 8002cec:	496b      	ldr	r1, [pc, #428]	; (8002e9c <SDO_getod+0x244>)
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	1a9b      	subs	r3, r3, r2
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	440b      	add	r3, r1
 8002cfa:	885b      	ldrh	r3, [r3, #2]
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	2b07      	cmp	r3, #7
 8002d00:	d12a      	bne.n	8002d58 <SDO_getod+0x100>
         {
            int32_t nsub = SDO_findsubindex (nidx, 0);
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	b21b      	sxth	r3, r3
 8002d06:	2100      	movs	r1, #0
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff f843 	bl	8001d94 <SDO_findsubindex>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	607b      	str	r3, [r7, #4]
            const _objd *objd = SDOobjects[nidx].objdesc;
 8002d12:	4962      	ldr	r1, [pc, #392]	; (8002e9c <SDO_getod+0x244>)
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4613      	mov	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	1a9b      	subs	r3, r3, r2
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	440b      	add	r3, r1
 8002d20:	3308      	adds	r3, #8
 8002d22:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8002d26:	603b      	str	r3, [r7, #0]
            coel->datatype = htoes ((objd + nsub)->datatype);
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	461a      	mov	r2, r3
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	4413      	add	r3, r2
 8002d38:	885b      	ldrh	r3, [r3, #2]
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	81da      	strh	r2, [r3, #14]
            coel->maxsub = SDOobjects[nidx].maxsub;
 8002d40:	4956      	ldr	r1, [pc, #344]	; (8002e9c <SDO_getod+0x244>)
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4613      	mov	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	1a9b      	subs	r3, r3, r2
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	440b      	add	r3, r1
 8002d4e:	3304      	adds	r3, #4
 8002d50:	781a      	ldrb	r2, [r3, #0]
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	741a      	strb	r2, [r3, #16]
 8002d56:	e04b      	b.n	8002df0 <SDO_getod+0x198>
         }
         else if (SDOobjects[nidx].objtype == OTYPE_ARRAY)
 8002d58:	4950      	ldr	r1, [pc, #320]	; (8002e9c <SDO_getod+0x244>)
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	440b      	add	r3, r1
 8002d66:	885b      	ldrh	r3, [r3, #2]
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	d12d      	bne.n	8002dca <SDO_getod+0x172>
         {
            int32_t nsub = SDO_findsubindex (nidx, 0);
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	b21b      	sxth	r3, r3
 8002d72:	2100      	movs	r1, #0
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff f80d 	bl	8001d94 <SDO_findsubindex>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	60fb      	str	r3, [r7, #12]
            const _objd *objd = SDOobjects[nidx].objdesc;
 8002d7e:	4947      	ldr	r1, [pc, #284]	; (8002e9c <SDO_getod+0x244>)
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4613      	mov	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	440b      	add	r3, r1
 8002d8c:	3308      	adds	r3, #8
 8002d8e:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8002d92:	60bb      	str	r3, [r7, #8]
            coel->datatype = htoes ((objd + nsub)->datatype);
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	4613      	mov	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	461a      	mov	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	4413      	add	r3, r2
 8002da4:	885b      	ldrh	r3, [r3, #2]
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	81da      	strh	r2, [r3, #14]
            coel->maxsub = SDOobjects[nidx].objdesc->value;
 8002dac:	493b      	ldr	r1, [pc, #236]	; (8002e9c <SDO_getod+0x244>)
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4613      	mov	r3, r2
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	1a9b      	subs	r3, r3, r2
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	440b      	add	r3, r1
 8002dba:	3308      	adds	r3, #8
 8002dbc:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	741a      	strb	r2, [r3, #16]
 8002dc8:	e012      	b.n	8002df0 <SDO_getod+0x198>
         }
         else
         {
            coel->datatype = htoes (0);
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	739a      	strb	r2, [r3, #14]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	73da      	strb	r2, [r3, #15]
            coel->maxsub = SDOobjects[nidx].objdesc->value;
 8002dd4:	4931      	ldr	r1, [pc, #196]	; (8002e9c <SDO_getod+0x244>)
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	1a9b      	subs	r3, r3, r2
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	440b      	add	r3, r1
 8002de2:	3308      	adds	r3, #8
 8002de4:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	b2da      	uxtb	r2, r3
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	741a      	strb	r2, [r3, #16]
         }
         coel->objectcode = SDOobjects[nidx].objtype;
 8002df0:	492a      	ldr	r1, [pc, #168]	; (8002e9c <SDO_getod+0x244>)
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4613      	mov	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	1a9b      	subs	r3, r3, r2
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	440b      	add	r3, r1
 8002dfe:	885b      	ldrh	r3, [r3, #2]
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	745a      	strb	r2, [r3, #17]
         s = (uint8_t *) SDOobjects[nidx].name;
 8002e08:	4924      	ldr	r1, [pc, #144]	; (8002e9c <SDO_getod+0x244>)
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	1a9b      	subs	r3, r3, r2
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	440b      	add	r3, r1
 8002e16:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8002e1a:	62bb      	str	r3, [r7, #40]	; 0x28
         d = (uint8_t *) &(coel->name);
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	3312      	adds	r3, #18
 8002e20:	62fb      	str	r3, [r7, #44]	; 0x2c
         while (*s && (n < (ESC_MBXDSIZE - 0x0c)))
 8002e22:	e00e      	b.n	8002e42 <SDO_getod+0x1ea>
         {
            *d = *s;
 8002e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e26:	781a      	ldrb	r2, [r3, #0]
 8002e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2a:	701a      	strb	r2, [r3, #0]
            n++;
 8002e2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e30:	3301      	adds	r3, #1
 8002e32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            s++;
 8002e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e38:	3301      	adds	r3, #1
 8002e3a:	62bb      	str	r3, [r7, #40]	; 0x28
            d++;
 8002e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3e:	3301      	adds	r3, #1
 8002e40:	62fb      	str	r3, [r7, #44]	; 0x2c
         while (*s && (n < (ESC_MBXDSIZE - 0x0c)))
 8002e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d006      	beq.n	8002e58 <SDO_getod+0x200>
 8002e4a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002e4e:	4b12      	ldr	r3, [pc, #72]	; (8002e98 <SDO_getod+0x240>)
 8002e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e52:	3b12      	subs	r3, #18
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d3e5      	bcc.n	8002e24 <SDO_getod+0x1cc>
         }
         *d = *s;
 8002e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5a:	781a      	ldrb	r2, [r3, #0]
 8002e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5e:	701a      	strb	r2, [r3, #0]
         coel->mbxheader.length = htoes ((uint16_t) 0x0c + n);
 8002e60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	330c      	adds	r3, #12
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	801a      	strh	r2, [r3, #0]
         MBXcontrol[MBXout].state = MBXstate_outreq;
 8002e6e:	7dfb      	ldrb	r3, [r7, #23]
 8002e70:	4a0b      	ldr	r2, [pc, #44]	; (8002ea0 <SDO_getod+0x248>)
 8002e72:	2103      	movs	r1, #3
 8002e74:	54d1      	strb	r1, [r2, r3]
         MBXcontrol[0].state = MBXstate_idle;
 8002e76:	4b0a      	ldr	r3, [pc, #40]	; (8002ea0 <SDO_getod+0x248>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	701a      	strb	r2, [r3, #0]
         ESCvar.xoe = 0;
 8002e7c:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <SDO_getod+0x240>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
   }
   else
   {
      SDO_infoerror (ABORT_NOOBJECT);
   }
}
 8002e84:	e002      	b.n	8002e8c <SDO_getod+0x234>
      SDO_infoerror (ABORT_NOOBJECT);
 8002e86:	4807      	ldr	r0, [pc, #28]	; (8002ea4 <SDO_getod+0x24c>)
 8002e88:	f7ff fcc0 	bl	800280c <SDO_infoerror>
}
 8002e8c:	bf00      	nop
 8002e8e:	3730      	adds	r7, #48	; 0x30
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	2000024c 	.word	0x2000024c
 8002e98:	20000180 	.word	0x20000180
 8002e9c:	0800bc44 	.word	0x0800bc44
 8002ea0:	20000414 	.word	0x20000414
 8002ea4:	06020000 	.word	0x06020000

08002ea8 <SDO_geted>:
/** Function for handling incoming requested SDO Get Entry Description,
 * validating the request and sending an response. On error an
 * SDO Info Error will be sent.
 */
void SDO_geted (void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08a      	sub	sp, #40	; 0x28
 8002eac:	af00      	add	r7, sp, #0
   int32_t nidx, nsub;
   uint8_t subindex;
   uint8_t *d;
   const uint8_t *s;
   const _objd *objd;
   uint8_t n = 0;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	77fb      	strb	r3, [r7, #31]
   _COEentdesc *coer, *coel;
   coer = (_COEentdesc *) &MBX[0];
 8002eb2:	4b67      	ldr	r3, [pc, #412]	; (8003050 <SDO_geted+0x1a8>)
 8002eb4:	61bb      	str	r3, [r7, #24]
   index = etohs (coer->index);
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	7b1a      	ldrb	r2, [r3, #12]
 8002eba:	7b5b      	ldrb	r3, [r3, #13]
 8002ebc:	021b      	lsls	r3, r3, #8
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	82fb      	strh	r3, [r7, #22]
   subindex = coer->subindex;
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	7b9b      	ldrb	r3, [r3, #14]
 8002ec6:	757b      	strb	r3, [r7, #21]
   nidx = SDO_findobject (index);
 8002ec8:	8afb      	ldrh	r3, [r7, #22]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fe ffba 	bl	8001e44 <SDO_findobject>
 8002ed0:	6138      	str	r0, [r7, #16]
   if (nidx >= 0)
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f2c0 80b4 	blt.w	8003042 <SDO_geted+0x19a>
   {
      nsub = SDO_findsubindex (nidx, subindex);
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	b21b      	sxth	r3, r3
 8002ede:	7d7a      	ldrb	r2, [r7, #21]
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fe ff56 	bl	8001d94 <SDO_findsubindex>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	60fb      	str	r3, [r7, #12]
      if (nsub >= 0)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f2c0 80a3 	blt.w	800303a <SDO_geted+0x192>
      {
         objd = SDOobjects[nidx].objdesc;
 8002ef4:	4957      	ldr	r1, [pc, #348]	; (8003054 <SDO_geted+0x1ac>)
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	1a9b      	subs	r3, r3, r2
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	440b      	add	r3, r1
 8002f02:	3308      	adds	r3, #8
 8002f04:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8002f08:	60bb      	str	r3, [r7, #8]
         MBXout = ESC_claimbuffer ();
 8002f0a:	f7fe f87f 	bl	800100c <ESC_claimbuffer>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	71fb      	strb	r3, [r7, #7]
         if (MBXout)
 8002f12:	79fb      	ldrb	r3, [r7, #7]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 8097 	beq.w	8003048 <SDO_geted+0x1a0>
         {
            coel = (_COEentdesc *) &MBX[MBXout * ESC_MBXSIZE];
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
 8002f1c:	4a4e      	ldr	r2, [pc, #312]	; (8003058 <SDO_geted+0x1b0>)
 8002f1e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002f20:	fb02 f303 	mul.w	r3, r2, r3
 8002f24:	4a4a      	ldr	r2, [pc, #296]	; (8003050 <SDO_geted+0x1a8>)
 8002f26:	4413      	add	r3, r2
 8002f28:	603b      	str	r3, [r7, #0]
            coel->mbxheader.mbxtype = MBXCOE;
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	7953      	ldrb	r3, [r2, #5]
 8002f2e:	2103      	movs	r1, #3
 8002f30:	f361 0303 	bfi	r3, r1, #0, #4
 8002f34:	7153      	strb	r3, [r2, #5]
            coel->coeheader.numberservice =
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	719a      	strb	r2, [r3, #6]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f42:	71da      	strb	r2, [r3, #7]
               htoes ((0 & 0x01f) | (COE_SDOINFORMATION << 12));
            coel->infoheader.opcode = COE_ENTRYDESCRIPTIONRESPONSE;
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	7a13      	ldrb	r3, [r2, #8]
 8002f48:	2106      	movs	r1, #6
 8002f4a:	f361 0306 	bfi	r3, r1, #0, #7
 8002f4e:	7213      	strb	r3, [r2, #8]
            coel->infoheader.incomplete = 0;
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	7a13      	ldrb	r3, [r2, #8]
 8002f54:	f36f 13c7 	bfc	r3, #7, #1
 8002f58:	7213      	strb	r3, [r2, #8]
            coel->infoheader.reserved = 0x00;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	725a      	strb	r2, [r3, #9]
            coel->infoheader.fragmentsleft = htoes ((uint16_t) 0);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	2200      	movs	r2, #0
 8002f64:	729a      	strb	r2, [r3, #10]
 8002f66:	2200      	movs	r2, #0
 8002f68:	72da      	strb	r2, [r3, #11]
            coel->index = htoes (index);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	8afa      	ldrh	r2, [r7, #22]
 8002f6e:	819a      	strh	r2, [r3, #12]
            coel->subindex = subindex;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	7d7a      	ldrb	r2, [r7, #21]
 8002f74:	739a      	strb	r2, [r3, #14]
            coel->valueinfo = COE_VALUEINFO_ACCESS +
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2207      	movs	r2, #7
 8002f7a:	73da      	strb	r2, [r3, #15]
               COE_VALUEINFO_OBJECT + COE_VALUEINFO_MAPPABLE;
            coel->datatype = htoes ((objd + nsub)->datatype);
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	461a      	mov	r2, r3
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	885b      	ldrh	r3, [r3, #2]
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	821a      	strh	r2, [r3, #16]
            coel->bitlength = htoes ((objd + nsub)->bitlength);
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	889b      	ldrh	r3, [r3, #4]
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	825a      	strh	r2, [r3, #18]
            coel->access = htoes ((objd + nsub)->flags);
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4413      	add	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	4413      	add	r3, r2
 8002fbc:	88db      	ldrh	r3, [r3, #6]
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	829a      	strh	r2, [r3, #20]
            s = (uint8_t *) (objd + nsub)->name;
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	461a      	mov	r2, r3
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	623b      	str	r3, [r7, #32]
            d = (uint8_t *) &(coel->name);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	3316      	adds	r3, #22
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24
            while (*s && (n < (ESC_MBXDSIZE - 0x10)))
 8002fde:	e00c      	b.n	8002ffa <SDO_geted+0x152>
            {
               *d = *s;
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	781a      	ldrb	r2, [r3, #0]
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	701a      	strb	r2, [r3, #0]
               n++;
 8002fe8:	7ffb      	ldrb	r3, [r7, #31]
 8002fea:	3301      	adds	r3, #1
 8002fec:	77fb      	strb	r3, [r7, #31]
               s++;
 8002fee:	6a3b      	ldr	r3, [r7, #32]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	623b      	str	r3, [r7, #32]
               d++;
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	627b      	str	r3, [r7, #36]	; 0x24
            while (*s && (n < (ESC_MBXDSIZE - 0x10)))
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d005      	beq.n	800300e <SDO_geted+0x166>
 8003002:	7ffa      	ldrb	r2, [r7, #31]
 8003004:	4b14      	ldr	r3, [pc, #80]	; (8003058 <SDO_geted+0x1b0>)
 8003006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003008:	3b16      	subs	r3, #22
 800300a:	429a      	cmp	r2, r3
 800300c:	d3e8      	bcc.n	8002fe0 <SDO_geted+0x138>
            }
            *d = *s;
 800300e:	6a3b      	ldr	r3, [r7, #32]
 8003010:	781a      	ldrb	r2, [r3, #0]
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	701a      	strb	r2, [r3, #0]
            coel->mbxheader.length = htoes ((uint16_t) 0x10 + n);
 8003016:	7ffb      	ldrb	r3, [r7, #31]
 8003018:	b29b      	uxth	r3, r3
 800301a:	3310      	adds	r3, #16
 800301c:	b29a      	uxth	r2, r3
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	801a      	strh	r2, [r3, #0]
            MBXcontrol[MBXout].state = MBXstate_outreq;
 8003022:	79fb      	ldrb	r3, [r7, #7]
 8003024:	4a0d      	ldr	r2, [pc, #52]	; (800305c <SDO_geted+0x1b4>)
 8003026:	2103      	movs	r1, #3
 8003028:	54d1      	strb	r1, [r2, r3]
            MBXcontrol[0].state = MBXstate_idle;
 800302a:	4b0c      	ldr	r3, [pc, #48]	; (800305c <SDO_geted+0x1b4>)
 800302c:	2200      	movs	r2, #0
 800302e:	701a      	strb	r2, [r3, #0]
            ESCvar.xoe = 0;
 8003030:	4b09      	ldr	r3, [pc, #36]	; (8003058 <SDO_geted+0x1b0>)
 8003032:	2200      	movs	r2, #0
 8003034:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
   }
   else
   {
      SDO_infoerror (ABORT_NOOBJECT);
   }
}
 8003038:	e006      	b.n	8003048 <SDO_geted+0x1a0>
         SDO_infoerror (ABORT_NOSUBINDEX);
 800303a:	4809      	ldr	r0, [pc, #36]	; (8003060 <SDO_geted+0x1b8>)
 800303c:	f7ff fbe6 	bl	800280c <SDO_infoerror>
}
 8003040:	e002      	b.n	8003048 <SDO_geted+0x1a0>
      SDO_infoerror (ABORT_NOOBJECT);
 8003042:	4808      	ldr	r0, [pc, #32]	; (8003064 <SDO_geted+0x1bc>)
 8003044:	f7ff fbe2 	bl	800280c <SDO_infoerror>
}
 8003048:	bf00      	nop
 800304a:	3728      	adds	r7, #40	; 0x28
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	2000024c 	.word	0x2000024c
 8003054:	0800bc44 	.word	0x0800bc44
 8003058:	20000180 	.word	0x20000180
 800305c:	20000414 	.word	0x20000414
 8003060:	06090011 	.word	0x06090011
 8003064:	06020000 	.word	0x06020000

08003068 <ESC_coeprocess>:
/** Main CoE function checking the status on current mailbox buffers carrying
 * data, distributing the mailboxes to appropriate CoE functions.
 * On Error an MBX_error or SDO Abort will be sent depending on error cause.
 */
void ESC_coeprocess (void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
   _MBXh *mbh;
   _COEsdo *coesdo;
   _COEobjdesc *coeobjdesc;
   uint8_t service;
   if (ESCvar.MBXrun == 0)
 800306e:	4b5c      	ldr	r3, [pc, #368]	; (80031e0 <ESC_coeprocess+0x178>)
 8003070:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 80af 	beq.w	80031d8 <ESC_coeprocess+0x170>
   {
      return;
   }
   if (!ESCvar.xoe && (MBXcontrol[0].state == MBXstate_inclaim))
 800307a:	4b59      	ldr	r3, [pc, #356]	; (80031e0 <ESC_coeprocess+0x178>)
 800307c:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8003080:	2b00      	cmp	r3, #0
 8003082:	d119      	bne.n	80030b8 <ESC_coeprocess+0x50>
 8003084:	4b57      	ldr	r3, [pc, #348]	; (80031e4 <ESC_coeprocess+0x17c>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d115      	bne.n	80030b8 <ESC_coeprocess+0x50>
   {
      mbh = (_MBXh *) &MBX[0];
 800308c:	4b56      	ldr	r3, [pc, #344]	; (80031e8 <ESC_coeprocess+0x180>)
 800308e:	60fb      	str	r3, [r7, #12]
      if (mbh->mbxtype == MBXCOE)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	795b      	ldrb	r3, [r3, #5]
 8003094:	f003 030f 	and.w	r3, r3, #15
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b03      	cmp	r3, #3
 800309c:	d10c      	bne.n	80030b8 <ESC_coeprocess+0x50>
      {
         if (etohs (mbh->length) < COE_MINIMUM_LENGTH)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	2b07      	cmp	r3, #7
 80030a6:	d803      	bhi.n	80030b0 <ESC_coeprocess+0x48>
         {
            MBX_error (MBXERR_INVALIDSIZE);
 80030a8:	2008      	movs	r0, #8
 80030aa:	f7fe f833 	bl	8001114 <MBX_error>
 80030ae:	e003      	b.n	80030b8 <ESC_coeprocess+0x50>
         }
         else
         {
            ESCvar.xoe = MBXCOE;
 80030b0:	4b4b      	ldr	r3, [pc, #300]	; (80031e0 <ESC_coeprocess+0x178>)
 80030b2:	2203      	movs	r2, #3
 80030b4:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
         }
      }
   }
   if ((ESCvar.xoe == (MBXCOE + MBXODL)) && (!ESCvar.mbxoutpost))
 80030b8:	4b49      	ldr	r3, [pc, #292]	; (80031e0 <ESC_coeprocess+0x178>)
 80030ba:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80030be:	2b13      	cmp	r3, #19
 80030c0:	d106      	bne.n	80030d0 <ESC_coeprocess+0x68>
 80030c2:	4b47      	ldr	r3, [pc, #284]	; (80031e0 <ESC_coeprocess+0x178>)
 80030c4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <ESC_coeprocess+0x68>
   {
      /* continue get OD list */
      SDO_getodlistcont ();
 80030cc:	f7ff fd1e 	bl	8002b0c <SDO_getodlistcont>
   }
   if (ESCvar.xoe == MBXCOE)
 80030d0:	4b43      	ldr	r3, [pc, #268]	; (80031e0 <ESC_coeprocess+0x178>)
 80030d2:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80030d6:	2b03      	cmp	r3, #3
 80030d8:	d17f      	bne.n	80031da <ESC_coeprocess+0x172>
   {
      coesdo = (_COEsdo *) &MBX[0];
 80030da:	4b43      	ldr	r3, [pc, #268]	; (80031e8 <ESC_coeprocess+0x180>)
 80030dc:	60bb      	str	r3, [r7, #8]
      coeobjdesc = (_COEobjdesc *) &MBX[0];
 80030de:	4b42      	ldr	r3, [pc, #264]	; (80031e8 <ESC_coeprocess+0x180>)
 80030e0:	607b      	str	r3, [r7, #4]
      service = etohs (coesdo->coeheader.numberservice) >> 12;
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	88db      	ldrh	r3, [r3, #6]
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	0b1b      	lsrs	r3, r3, #12
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	70fb      	strb	r3, [r7, #3]
      /* initiate SDO upload request */
      if ((service == COE_SDOREQUEST)
 80030ee:	78fb      	ldrb	r3, [r7, #3]
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d10a      	bne.n	800310a <ESC_coeprocess+0xa2>
          && (coesdo->command == COE_COMMAND_UPLOADREQUEST)
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	7a1b      	ldrb	r3, [r3, #8]
 80030f8:	2b40      	cmp	r3, #64	; 0x40
 80030fa:	d106      	bne.n	800310a <ESC_coeprocess+0xa2>
          && (etohs (coesdo->mbxheader.length) == 0x0a))
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	b29b      	uxth	r3, r3
 8003102:	2b0a      	cmp	r3, #10
 8003104:	d101      	bne.n	800310a <ESC_coeprocess+0xa2>
      {
         SDO_upload ();
 8003106:	f7ff f877 	bl	80021f8 <SDO_upload>
      }
      /* SDO upload segment request */
      if ((service == COE_SDOREQUEST)
 800310a:	78fb      	ldrb	r3, [r7, #3]
 800310c:	2b02      	cmp	r3, #2
 800310e:	d112      	bne.n	8003136 <ESC_coeprocess+0xce>
          && ((coesdo->command & 0xef) == COE_COMMAND_UPLOADSEGREQ)
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	7a1b      	ldrb	r3, [r3, #8]
 8003114:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8003118:	2b60      	cmp	r3, #96	; 0x60
 800311a:	d10c      	bne.n	8003136 <ESC_coeprocess+0xce>
          && (etohs (coesdo->mbxheader.length) == 0x0a)
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	881b      	ldrh	r3, [r3, #0]
 8003120:	b29b      	uxth	r3, r3
 8003122:	2b0a      	cmp	r3, #10
 8003124:	d107      	bne.n	8003136 <ESC_coeprocess+0xce>
          && (ESCvar.segmented == MBXSEU))
 8003126:	4b2e      	ldr	r3, [pc, #184]	; (80031e0 <ESC_coeprocess+0x178>)
 8003128:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800312c:	2b40      	cmp	r3, #64	; 0x40
 800312e:	d102      	bne.n	8003136 <ESC_coeprocess+0xce>
      {
         SDO_uploadsegment ();
 8003130:	f7ff f98c 	bl	800244c <SDO_uploadsegment>
 8003134:	e051      	b.n	80031da <ESC_coeprocess+0x172>
      }
      /* initiate SDO download request */
      else
      {
         if ((service == COE_SDOREQUEST) && ((coesdo->command & 0xf1) == 0x21))
 8003136:	78fb      	ldrb	r3, [r7, #3]
 8003138:	2b02      	cmp	r3, #2
 800313a:	d108      	bne.n	800314e <ESC_coeprocess+0xe6>
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	7a1b      	ldrb	r3, [r3, #8]
 8003140:	f003 03f1 	and.w	r3, r3, #241	; 0xf1
 8003144:	2b21      	cmp	r3, #33	; 0x21
 8003146:	d102      	bne.n	800314e <ESC_coeprocess+0xe6>
         {
            SDO_download ();
 8003148:	f7ff fa24 	bl	8002594 <SDO_download>
 800314c:	e045      	b.n	80031da <ESC_coeprocess+0x172>
         }
         /* initiate SDO get OD list */
         else
         {
            if ((service == COE_SDOINFORMATION)
 800314e:	78fb      	ldrb	r3, [r7, #3]
 8003150:	2b08      	cmp	r3, #8
 8003152:	d109      	bne.n	8003168 <ESC_coeprocess+0x100>
                && (coeobjdesc->infoheader.opcode == 0x01))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	7a1b      	ldrb	r3, [r3, #8]
 8003158:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b01      	cmp	r3, #1
 8003160:	d102      	bne.n	8003168 <ESC_coeprocess+0x100>
            {
               SDO_getodlist ();
 8003162:	f7ff fbab 	bl	80028bc <SDO_getodlist>
 8003166:	e038      	b.n	80031da <ESC_coeprocess+0x172>
            }
            /* initiate SDO get OD */
            else
            {
               if ((service == COE_SDOINFORMATION)
 8003168:	78fb      	ldrb	r3, [r7, #3]
 800316a:	2b08      	cmp	r3, #8
 800316c:	d109      	bne.n	8003182 <ESC_coeprocess+0x11a>
                   && (coeobjdesc->infoheader.opcode == 0x03))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	7a1b      	ldrb	r3, [r3, #8]
 8003172:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b03      	cmp	r3, #3
 800317a:	d102      	bne.n	8003182 <ESC_coeprocess+0x11a>
               {
                  SDO_getod ();
 800317c:	f7ff fd6c 	bl	8002c58 <SDO_getod>
 8003180:	e02b      	b.n	80031da <ESC_coeprocess+0x172>
               }
               /* initiate SDO get ED */
               else
               {
                  if ((service == COE_SDOINFORMATION)
 8003182:	78fb      	ldrb	r3, [r7, #3]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d109      	bne.n	800319c <ESC_coeprocess+0x134>
                      && (coeobjdesc->infoheader.opcode == 0x05))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	7a1b      	ldrb	r3, [r3, #8]
 800318c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b05      	cmp	r3, #5
 8003194:	d102      	bne.n	800319c <ESC_coeprocess+0x134>
                  {
                     SDO_geted ();
 8003196:	f7ff fe87 	bl	8002ea8 <SDO_geted>
 800319a:	e01e      	b.n	80031da <ESC_coeprocess+0x172>
                  }
                  else
                  {
                     /* COE not recognised above */
                     if (ESCvar.xoe == MBXCOE)
 800319c:	4b10      	ldr	r3, [pc, #64]	; (80031e0 <ESC_coeprocess+0x178>)
 800319e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80031a2:	2b03      	cmp	r3, #3
 80031a4:	d119      	bne.n	80031da <ESC_coeprocess+0x172>
                     {
                        if (service == 0)
 80031a6:	78fb      	ldrb	r3, [r7, #3]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d103      	bne.n	80031b4 <ESC_coeprocess+0x14c>
                        {
                           MBX_error (MBXERR_INVALIDHEADER);
 80031ac:	2005      	movs	r0, #5
 80031ae:	f7fd ffb1 	bl	8001114 <MBX_error>
 80031b2:	e009      	b.n	80031c8 <ESC_coeprocess+0x160>
                        }
                        else
                        {
                           SDO_abort (etohs (coesdo->index), coesdo->subindex, ABORT_UNSUPPORTED);
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80031ba:	b298      	uxth	r0, r3
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	7adb      	ldrb	r3, [r3, #11]
 80031c0:	4a0a      	ldr	r2, [pc, #40]	; (80031ec <ESC_coeprocess+0x184>)
 80031c2:	4619      	mov	r1, r3
 80031c4:	f7fe ffd2 	bl	800216c <SDO_abort>
                        }
                        MBXcontrol[0].state = MBXstate_idle;
 80031c8:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <ESC_coeprocess+0x17c>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	701a      	strb	r2, [r3, #0]
                        ESCvar.xoe = 0;
 80031ce:	4b04      	ldr	r3, [pc, #16]	; (80031e0 <ESC_coeprocess+0x178>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80031d6:	e000      	b.n	80031da <ESC_coeprocess+0x172>
      return;
 80031d8:	bf00      	nop
               }
            }
         }
      }
   }
}
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	20000180 	.word	0x20000180
 80031e4:	20000414 	.word	0x20000414
 80031e8:	2000024c 	.word	0x2000024c
 80031ec:	06010000 	.word	0x06010000

080031f0 <COE_bitsliceGet>:
 * @param[in] offset = start offset
 * @param[in] length = number of bits to get
 * @return bitslice value
 */
static uint64_t COE_bitsliceGet (uint64_t * bitmap, int offset, int length)
{
 80031f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031f4:	b08d      	sub	sp, #52	; 0x34
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	60f8      	str	r0, [r7, #12]
 80031fa:	60b9      	str	r1, [r7, #8]
 80031fc:	607a      	str	r2, [r7, #4]
   const int word_offset = offset / 64;
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	2a00      	cmp	r2, #0
 8003202:	da00      	bge.n	8003206 <COE_bitsliceGet+0x16>
 8003204:	323f      	adds	r2, #63	; 0x3f
 8003206:	1192      	asrs	r2, r2, #6
 8003208:	627a      	str	r2, [r7, #36]	; 0x24
   const int bit_offset = offset % 64;
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	4251      	negs	r1, r2
 800320e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003212:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003216:	bf58      	it	pl
 8003218:	424a      	negpl	r2, r1
 800321a:	623a      	str	r2, [r7, #32]
   const uint64_t mask = (length == 64) ? UINT64_MAX : (1ULL << length) - 1;
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	2a40      	cmp	r2, #64	; 0x40
 8003220:	d019      	beq.n	8003256 <COE_bitsliceGet+0x66>
 8003222:	f04f 0101 	mov.w	r1, #1
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f1a0 0e20 	sub.w	lr, r0, #32
 8003230:	f1c0 0c20 	rsb	ip, r0, #32
 8003234:	fa02 f900 	lsl.w	r9, r2, r0
 8003238:	fa01 fe0e 	lsl.w	lr, r1, lr
 800323c:	ea49 090e 	orr.w	r9, r9, lr
 8003240:	fa21 fc0c 	lsr.w	ip, r1, ip
 8003244:	ea49 090c 	orr.w	r9, r9, ip
 8003248:	fa01 f800 	lsl.w	r8, r1, r0
 800324c:	f118 31ff 	adds.w	r1, r8, #4294967295
 8003250:	f149 32ff 	adc.w	r2, r9, #4294967295
 8003254:	e003      	b.n	800325e <COE_bitsliceGet+0x6e>
 8003256:	f04f 31ff 	mov.w	r1, #4294967295
 800325a:	f04f 32ff 	mov.w	r2, #4294967295
 800325e:	e9c7 1206 	strd	r1, r2, [r7, #24]
   uint64_t w0;
   uint64_t w1 = 0;
 8003262:	f04f 0100 	mov.w	r1, #0
 8003266:	f04f 0200 	mov.w	r2, #0
 800326a:	e9c7 120a 	strd	r1, r2, [r7, #40]	; 0x28

   /* Get the least significant word */
   w0 = bitmap[word_offset];
 800326e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003270:	00d2      	lsls	r2, r2, #3
 8003272:	68f9      	ldr	r1, [r7, #12]
 8003274:	440a      	add	r2, r1
 8003276:	e9d2 1200 	ldrd	r1, r2, [r2]
 800327a:	e9c7 1204 	strd	r1, r2, [r7, #16]
   w0 = w0 >> bit_offset;
 800327e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003282:	6a38      	ldr	r0, [r7, #32]
 8003284:	f1c0 0e20 	rsb	lr, r0, #32
 8003288:	f1a0 0c20 	sub.w	ip, r0, #32
 800328c:	fa21 f500 	lsr.w	r5, r1, r0
 8003290:	fa02 fe0e 	lsl.w	lr, r2, lr
 8003294:	ea45 050e 	orr.w	r5, r5, lr
 8003298:	fa22 fc0c 	lsr.w	ip, r2, ip
 800329c:	ea45 050c 	orr.w	r5, r5, ip
 80032a0:	fa22 f600 	lsr.w	r6, r2, r0
 80032a4:	e9c7 5604 	strd	r5, r6, [r7, #16]

   /* Get the most significant word, if required */
   if (length + bit_offset > 64)
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	6a3a      	ldr	r2, [r7, #32]
 80032ac:	440a      	add	r2, r1
 80032ae:	2a40      	cmp	r2, #64	; 0x40
 80032b0:	dd1d      	ble.n	80032ee <COE_bitsliceGet+0xfe>
   {
      w1 = bitmap[word_offset + 1];
 80032b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b4:	3201      	adds	r2, #1
 80032b6:	00d2      	lsls	r2, r2, #3
 80032b8:	68f9      	ldr	r1, [r7, #12]
 80032ba:	440a      	add	r2, r1
 80032bc:	e9d2 1200 	ldrd	r1, r2, [r2]
 80032c0:	e9c7 120a 	strd	r1, r2, [r7, #40]	; 0x28
      w1 = w1 << (64 - bit_offset);
 80032c4:	6a3a      	ldr	r2, [r7, #32]
 80032c6:	f1c2 0040 	rsb	r0, r2, #64	; 0x40
 80032ca:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80032ce:	f1a0 0620 	sub.w	r6, r0, #32
 80032d2:	f1c0 0520 	rsb	r5, r0, #32
 80032d6:	fa02 f400 	lsl.w	r4, r2, r0
 80032da:	fa01 f606 	lsl.w	r6, r1, r6
 80032de:	4334      	orrs	r4, r6
 80032e0:	fa21 f505 	lsr.w	r5, r1, r5
 80032e4:	432c      	orrs	r4, r5
 80032e6:	fa01 f300 	lsl.w	r3, r1, r0
 80032ea:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
   }

   w0 = (w1 | w0);
 80032ee:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80032f2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80032f6:	ea43 0501 	orr.w	r5, r3, r1
 80032fa:	ea44 0602 	orr.w	r6, r4, r2
 80032fe:	e9c7 5604 	strd	r5, r6, [r7, #16]
   return (w0 & mask);
 8003302:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003306:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800330a:	ea03 0501 	and.w	r5, r3, r1
 800330e:	ea04 0602 	and.w	r6, r4, r2
 8003312:	462b      	mov	r3, r5
 8003314:	4634      	mov	r4, r6
}
 8003316:	4618      	mov	r0, r3
 8003318:	4621      	mov	r1, r4
 800331a:	3734      	adds	r7, #52	; 0x34
 800331c:	46bd      	mov	sp, r7
 800331e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003322 <COE_bitsliceSet>:
 * @param[in] length = number of bits to set
 * @param[in] value  = value to set
 */
static void COE_bitsliceSet (uint64_t * bitmap, int offset, int length,
                             uint64_t value)
{
 8003322:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003326:	b09a      	sub	sp, #104	; 0x68
 8003328:	af00      	add	r7, sp, #0
 800332a:	6278      	str	r0, [r7, #36]	; 0x24
 800332c:	6239      	str	r1, [r7, #32]
 800332e:	61fa      	str	r2, [r7, #28]
   const int word_offset = offset / 64;
 8003330:	6a3b      	ldr	r3, [r7, #32]
 8003332:	2b00      	cmp	r3, #0
 8003334:	da00      	bge.n	8003338 <COE_bitsliceSet+0x16>
 8003336:	333f      	adds	r3, #63	; 0x3f
 8003338:	119b      	asrs	r3, r3, #6
 800333a:	667b      	str	r3, [r7, #100]	; 0x64
   const int bit_offset = offset % 64;
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	425a      	negs	r2, r3
 8003340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003344:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003348:	bf58      	it	pl
 800334a:	4253      	negpl	r3, r2
 800334c:	663b      	str	r3, [r7, #96]	; 0x60
   const uint64_t mask = (length == 64) ? UINT64_MAX : (1ULL << length) - 1;
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	2b40      	cmp	r3, #64	; 0x40
 8003352:	d01e      	beq.n	8003392 <COE_bitsliceSet+0x70>
 8003354:	f04f 0301 	mov.w	r3, #1
 8003358:	f04f 0400 	mov.w	r4, #0
 800335c:	69f9      	ldr	r1, [r7, #28]
 800335e:	f1a1 0020 	sub.w	r0, r1, #32
 8003362:	f1c1 0220 	rsb	r2, r1, #32
 8003366:	fa04 f501 	lsl.w	r5, r4, r1
 800336a:	617d      	str	r5, [r7, #20]
 800336c:	fa03 f000 	lsl.w	r0, r3, r0
 8003370:	697d      	ldr	r5, [r7, #20]
 8003372:	4305      	orrs	r5, r0
 8003374:	617d      	str	r5, [r7, #20]
 8003376:	fa23 f202 	lsr.w	r2, r3, r2
 800337a:	6978      	ldr	r0, [r7, #20]
 800337c:	4310      	orrs	r0, r2
 800337e:	6178      	str	r0, [r7, #20]
 8003380:	408b      	lsls	r3, r1
 8003382:	613b      	str	r3, [r7, #16]
 8003384:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003388:	f113 33ff 	adds.w	r3, r3, #4294967295
 800338c:	f144 34ff 	adc.w	r4, r4, #4294967295
 8003390:	e003      	b.n	800339a <COE_bitsliceSet+0x78>
 8003392:	f04f 33ff 	mov.w	r3, #4294967295
 8003396:	f04f 34ff 	mov.w	r4, #4294967295
 800339a:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
   const uint64_t mask0 = mask << bit_offset;
 800339e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80033a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80033a4:	f1a2 0020 	sub.w	r0, r2, #32
 80033a8:	f1c2 0120 	rsb	r1, r2, #32
 80033ac:	fa04 f502 	lsl.w	r5, r4, r2
 80033b0:	60fd      	str	r5, [r7, #12]
 80033b2:	fa03 f000 	lsl.w	r0, r3, r0
 80033b6:	68fd      	ldr	r5, [r7, #12]
 80033b8:	4305      	orrs	r5, r0
 80033ba:	60fd      	str	r5, [r7, #12]
 80033bc:	fa23 f101 	lsr.w	r1, r3, r1
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	4308      	orrs	r0, r1
 80033c4:	60f8      	str	r0, [r7, #12]
 80033c6:	4093      	lsls	r3, r2
 80033c8:	60bb      	str	r3, [r7, #8]
 80033ca:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80033ce:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
   uint64_t v0 = value << bit_offset;
 80033d2:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80033d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80033d8:	f1a2 0020 	sub.w	r0, r2, #32
 80033dc:	f1c2 0120 	rsb	r1, r2, #32
 80033e0:	fa04 f502 	lsl.w	r5, r4, r2
 80033e4:	607d      	str	r5, [r7, #4]
 80033e6:	fa03 f000 	lsl.w	r0, r3, r0
 80033ea:	687d      	ldr	r5, [r7, #4]
 80033ec:	4305      	orrs	r5, r0
 80033ee:	607d      	str	r5, [r7, #4]
 80033f0:	fa23 f101 	lsr.w	r1, r3, r1
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	4308      	orrs	r0, r1
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	4093      	lsls	r3, r2
 80033fc:	603b      	str	r3, [r7, #0]
 80033fe:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003402:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
   uint64_t w0 = bitmap[word_offset];
 8003406:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800340c:	4413      	add	r3, r2
 800340e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003412:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

   /* Set the least significant word */
   w0 = (w0 & ~mask0) | (v0 & mask0);
 8003416:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800341a:	ea6f 0503 	mvn.w	r5, r3
 800341e:	ea6f 0604 	mvn.w	r6, r4
 8003422:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003426:	ea05 0103 	and.w	r1, r5, r3
 800342a:	ea06 0204 	and.w	r2, r6, r4
 800342e:	e9c7 1204 	strd	r1, r2, [r7, #16]
 8003432:	e9d7 5612 	ldrd	r5, r6, [r7, #72]	; 0x48
 8003436:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800343a:	ea03 0105 	and.w	r1, r3, r5
 800343e:	ea04 0206 	and.w	r2, r4, r6
 8003442:	460b      	mov	r3, r1
 8003444:	4614      	mov	r4, r2
 8003446:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800344a:	ea41 0103 	orr.w	r1, r1, r3
 800344e:	ea42 0204 	orr.w	r2, r2, r4
 8003452:	460b      	mov	r3, r1
 8003454:	4614      	mov	r4, r2
 8003456:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
   bitmap[word_offset] = w0;
 800345a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003460:	441a      	add	r2, r3
 8003462:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003466:	e9c2 3400 	strd	r3, r4, [r2]

   /* Set the most significant word, if required */
   if (length + bit_offset > 64)
 800346a:	69fa      	ldr	r2, [r7, #28]
 800346c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800346e:	4413      	add	r3, r2
 8003470:	2b40      	cmp	r3, #64	; 0x40
 8003472:	dd59      	ble.n	8003528 <COE_bitsliceSet+0x206>
   {
      const uint64_t mask1 = mask >> (64 - bit_offset);
 8003474:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003476:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 800347a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800347e:	f1c2 0020 	rsb	r0, r2, #32
 8003482:	f1a2 0120 	sub.w	r1, r2, #32
 8003486:	fa23 fa02 	lsr.w	sl, r3, r2
 800348a:	fa04 f000 	lsl.w	r0, r4, r0
 800348e:	ea4a 0a00 	orr.w	sl, sl, r0
 8003492:	fa24 f101 	lsr.w	r1, r4, r1
 8003496:	ea4a 0a01 	orr.w	sl, sl, r1
 800349a:	fa24 fb02 	lsr.w	fp, r4, r2
 800349e:	e9c7 ab0e 	strd	sl, fp, [r7, #56]	; 0x38
      uint64_t v1 = value >> (64 - bit_offset);
 80034a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034a4:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 80034a8:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80034ac:	f1c2 0020 	rsb	r0, r2, #32
 80034b0:	f1a2 0120 	sub.w	r1, r2, #32
 80034b4:	fa23 f802 	lsr.w	r8, r3, r2
 80034b8:	fa04 f000 	lsl.w	r0, r4, r0
 80034bc:	ea48 0800 	orr.w	r8, r8, r0
 80034c0:	fa24 f101 	lsr.w	r1, r4, r1
 80034c4:	ea48 0801 	orr.w	r8, r8, r1
 80034c8:	fa24 f902 	lsr.w	r9, r4, r2
 80034cc:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
      uint64_t w1 = bitmap[word_offset + 1];
 80034d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034d2:	3301      	adds	r3, #1
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d8:	4413      	add	r3, r2
 80034da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80034de:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

      w1 = (w1 & ~mask1) | (v1 & mask1);
 80034e2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80034e6:	ea6f 0503 	mvn.w	r5, r3
 80034ea:	ea6f 0604 	mvn.w	r6, r4
 80034ee:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80034f2:	ea05 0103 	and.w	r1, r5, r3
 80034f6:	ea06 0204 	and.w	r2, r6, r4
 80034fa:	e9d7 560c 	ldrd	r5, r6, [r7, #48]	; 0x30
 80034fe:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8003502:	ea03 0805 	and.w	r8, r3, r5
 8003506:	ea04 0906 	and.w	r9, r4, r6
 800350a:	ea48 0301 	orr.w	r3, r8, r1
 800350e:	ea49 0402 	orr.w	r4, r9, r2
 8003512:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      bitmap[word_offset + 1] = w1;
 8003516:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003518:	3301      	adds	r3, #1
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800351e:	441a      	add	r2, r3
 8003520:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8003524:	e9c2 3400 	strd	r3, r4, [r2]
   }
}
 8003528:	bf00      	nop
 800352a:	3768      	adds	r7, #104	; 0x68
 800352c:	46bd      	mov	sp, r7
 800352e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003532:	4770      	bx	lr

08003534 <COE_getValue>:
 *
 * @param[in] obj   = object description
 * @return object value
 */
static uint64_t COE_getValue (const _objd * obj)
{
 8003534:	b590      	push	{r4, r7, lr}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
   uint64_t value = 0;
 800353c:	f04f 0300 	mov.w	r3, #0
 8003540:	f04f 0400 	mov.w	r4, #0
 8003544:	e9c7 3402 	strd	r3, r4, [r7, #8]

   /* TODO: const data */

   switch(obj->datatype)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	885b      	ldrh	r3, [r3, #2]
 800354c:	b29b      	uxth	r3, r3
 800354e:	3b01      	subs	r3, #1
 8003550:	2b36      	cmp	r3, #54	; 0x36
 8003552:	f200 8092 	bhi.w	800367a <COE_getValue+0x146>
 8003556:	a201      	add	r2, pc, #4	; (adr r2, 800355c <COE_getValue+0x28>)
 8003558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355c:	08003639 	.word	0x08003639
 8003560:	08003639 	.word	0x08003639
 8003564:	0800364b 	.word	0x0800364b
 8003568:	0800365d 	.word	0x0800365d
 800356c:	08003639 	.word	0x08003639
 8003570:	0800364b 	.word	0x0800364b
 8003574:	0800365d 	.word	0x0800365d
 8003578:	0800365d 	.word	0x0800365d
 800357c:	0800367b 	.word	0x0800367b
 8003580:	0800367b 	.word	0x0800367b
 8003584:	0800367b 	.word	0x0800367b
 8003588:	0800367b 	.word	0x0800367b
 800358c:	0800367b 	.word	0x0800367b
 8003590:	0800367b 	.word	0x0800367b
 8003594:	0800367b 	.word	0x0800367b
 8003598:	0800367b 	.word	0x0800367b
 800359c:	0800366d 	.word	0x0800366d
 80035a0:	0800367b 	.word	0x0800367b
 80035a4:	0800367b 	.word	0x0800367b
 80035a8:	0800367b 	.word	0x0800367b
 80035ac:	0800366d 	.word	0x0800366d
 80035b0:	0800367b 	.word	0x0800367b
 80035b4:	0800367b 	.word	0x0800367b
 80035b8:	0800367b 	.word	0x0800367b
 80035bc:	0800367b 	.word	0x0800367b
 80035c0:	0800367b 	.word	0x0800367b
 80035c4:	0800366d 	.word	0x0800366d
 80035c8:	0800367b 	.word	0x0800367b
 80035cc:	0800367b 	.word	0x0800367b
 80035d0:	0800367b 	.word	0x0800367b
 80035d4:	0800367b 	.word	0x0800367b
 80035d8:	0800367b 	.word	0x0800367b
 80035dc:	0800367b 	.word	0x0800367b
 80035e0:	0800367b 	.word	0x0800367b
 80035e4:	0800367b 	.word	0x0800367b
 80035e8:	0800367b 	.word	0x0800367b
 80035ec:	0800367b 	.word	0x0800367b
 80035f0:	0800367b 	.word	0x0800367b
 80035f4:	0800367b 	.word	0x0800367b
 80035f8:	0800367b 	.word	0x0800367b
 80035fc:	0800367b 	.word	0x0800367b
 8003600:	0800367b 	.word	0x0800367b
 8003604:	0800367b 	.word	0x0800367b
 8003608:	0800367b 	.word	0x0800367b
 800360c:	0800367b 	.word	0x0800367b
 8003610:	0800367b 	.word	0x0800367b
 8003614:	0800367b 	.word	0x0800367b
 8003618:	08003639 	.word	0x08003639
 800361c:	08003639 	.word	0x08003639
 8003620:	08003639 	.word	0x08003639
 8003624:	08003639 	.word	0x08003639
 8003628:	08003639 	.word	0x08003639
 800362c:	08003639 	.word	0x08003639
 8003630:	08003639 	.word	0x08003639
 8003634:	08003639 	.word	0x08003639
   case DTYPE_BIT7:
   case DTYPE_BIT8:
   case DTYPE_BOOLEAN:
   case DTYPE_UNSIGNED8:
   case DTYPE_INTEGER8:
      value = *(uint8_t *)obj->data;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	b2db      	uxtb	r3, r3
 8003640:	f04f 0400 	mov.w	r4, #0
 8003644:	e9c7 3402 	strd	r3, r4, [r7, #8]
      break;
 8003648:	e01e      	b.n	8003688 <COE_getValue+0x154>

   case DTYPE_UNSIGNED16:
   case DTYPE_INTEGER16:
      value = *(uint16_t *)obj->data;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	b29b      	uxth	r3, r3
 8003652:	f04f 0400 	mov.w	r4, #0
 8003656:	e9c7 3402 	strd	r3, r4, [r7, #8]
      break;
 800365a:	e015      	b.n	8003688 <COE_getValue+0x154>

   case DTYPE_REAL32:
   case DTYPE_UNSIGNED32:
   case DTYPE_INTEGER32:
      value = *(uint32_t *)obj->data;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f04f 0400 	mov.w	r4, #0
 8003666:	e9c7 3402 	strd	r3, r4, [r7, #8]
      break;
 800366a:	e00d      	b.n	8003688 <COE_getValue+0x154>

   case DTYPE_REAL64:
   case DTYPE_UNSIGNED64:
   case DTYPE_INTEGER64:
      /* FIXME: must be atomic */
      value = *(uint64_t *)obj->data;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003674:	e9c7 3402 	strd	r3, r4, [r7, #8]
      break;
 8003678:	e006      	b.n	8003688 <COE_getValue+0x154>

   default:
      CC_ASSERT (0);
 800367a:	4b07      	ldr	r3, [pc, #28]	; (8003698 <COE_getValue+0x164>)
 800367c:	4a07      	ldr	r2, [pc, #28]	; (800369c <COE_getValue+0x168>)
 800367e:	f240 4119 	movw	r1, #1049	; 0x419
 8003682:	4807      	ldr	r0, [pc, #28]	; (80036a0 <COE_getValue+0x16c>)
 8003684:	f006 fd64 	bl	800a150 <__assert_func>
   }

   return value;
 8003688:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 800368c:	4618      	mov	r0, r3
 800368e:	4621      	mov	r1, r4
 8003690:	3714      	adds	r7, #20
 8003692:	46bd      	mov	sp, r7
 8003694:	bd90      	pop	{r4, r7, pc}
 8003696:	bf00      	nop
 8003698:	0800b210 	.word	0x0800b210
 800369c:	0800b4d8 	.word	0x0800b4d8
 80036a0:	0800b214 	.word	0x0800b214

080036a4 <COE_setValue>:
 *
 * @param[in] obj   = object description
 * @param[in] value = new value
 */
static void COE_setValue (const _objd * obj, uint64_t value)
{
 80036a4:	b590      	push	{r4, r7, lr}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	e9c7 2300 	strd	r2, r3, [r7]
   switch(obj->datatype)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	885b      	ldrh	r3, [r3, #2]
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	3b01      	subs	r3, #1
 80036b8:	2b36      	cmp	r3, #54	; 0x36
 80036ba:	f200 8087 	bhi.w	80037cc <COE_setValue+0x128>
 80036be:	a201      	add	r2, pc, #4	; (adr r2, 80036c4 <COE_setValue+0x20>)
 80036c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c4:	080037a1 	.word	0x080037a1
 80036c8:	080037a1 	.word	0x080037a1
 80036cc:	080037ab 	.word	0x080037ab
 80036d0:	080037b5 	.word	0x080037b5
 80036d4:	080037a1 	.word	0x080037a1
 80036d8:	080037ab 	.word	0x080037ab
 80036dc:	080037b5 	.word	0x080037b5
 80036e0:	080037b5 	.word	0x080037b5
 80036e4:	080037cd 	.word	0x080037cd
 80036e8:	080037cd 	.word	0x080037cd
 80036ec:	080037cd 	.word	0x080037cd
 80036f0:	080037cd 	.word	0x080037cd
 80036f4:	080037cd 	.word	0x080037cd
 80036f8:	080037cd 	.word	0x080037cd
 80036fc:	080037cd 	.word	0x080037cd
 8003700:	080037cd 	.word	0x080037cd
 8003704:	080037bf 	.word	0x080037bf
 8003708:	080037cd 	.word	0x080037cd
 800370c:	080037cd 	.word	0x080037cd
 8003710:	080037cd 	.word	0x080037cd
 8003714:	080037bf 	.word	0x080037bf
 8003718:	080037cd 	.word	0x080037cd
 800371c:	080037cd 	.word	0x080037cd
 8003720:	080037cd 	.word	0x080037cd
 8003724:	080037cd 	.word	0x080037cd
 8003728:	080037cd 	.word	0x080037cd
 800372c:	080037bf 	.word	0x080037bf
 8003730:	080037cd 	.word	0x080037cd
 8003734:	080037cd 	.word	0x080037cd
 8003738:	080037cd 	.word	0x080037cd
 800373c:	080037cd 	.word	0x080037cd
 8003740:	080037cd 	.word	0x080037cd
 8003744:	080037cd 	.word	0x080037cd
 8003748:	080037cd 	.word	0x080037cd
 800374c:	080037cd 	.word	0x080037cd
 8003750:	080037cd 	.word	0x080037cd
 8003754:	080037cd 	.word	0x080037cd
 8003758:	080037cd 	.word	0x080037cd
 800375c:	080037cd 	.word	0x080037cd
 8003760:	080037cd 	.word	0x080037cd
 8003764:	080037cd 	.word	0x080037cd
 8003768:	080037cd 	.word	0x080037cd
 800376c:	080037cd 	.word	0x080037cd
 8003770:	080037cd 	.word	0x080037cd
 8003774:	080037cd 	.word	0x080037cd
 8003778:	080037cd 	.word	0x080037cd
 800377c:	080037cd 	.word	0x080037cd
 8003780:	080037a1 	.word	0x080037a1
 8003784:	080037a1 	.word	0x080037a1
 8003788:	080037a1 	.word	0x080037a1
 800378c:	080037a1 	.word	0x080037a1
 8003790:	080037a1 	.word	0x080037a1
 8003794:	080037a1 	.word	0x080037a1
 8003798:	080037a1 	.word	0x080037a1
 800379c:	080037a1 	.word	0x080037a1
   case DTYPE_BIT7:
   case DTYPE_BIT8:
   case DTYPE_BOOLEAN:
   case DTYPE_UNSIGNED8:
   case DTYPE_INTEGER8:
      *(uint8_t *)obj->data = value & UINT8_MAX;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	783a      	ldrb	r2, [r7, #0]
 80037a6:	701a      	strb	r2, [r3, #0]
      break;
 80037a8:	e014      	b.n	80037d4 <COE_setValue+0x130>

   case DTYPE_UNSIGNED16:
   case DTYPE_INTEGER16:
      *(uint16_t *)obj->data = value & UINT16_MAX;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	883a      	ldrh	r2, [r7, #0]
 80037b0:	801a      	strh	r2, [r3, #0]
      break;
 80037b2:	e00f      	b.n	80037d4 <COE_setValue+0x130>

   case DTYPE_REAL32:
   case DTYPE_UNSIGNED32:
   case DTYPE_INTEGER32:
      *(uint32_t *)obj->data = value & UINT32_MAX;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	601a      	str	r2, [r3, #0]
      break;
 80037bc:	e00a      	b.n	80037d4 <COE_setValue+0x130>

   case DTYPE_REAL64:
   case DTYPE_UNSIGNED64:
   case DTYPE_INTEGER64:
      /* FIXME: must be atomic */
      *(uint64_t *)obj->data = value;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	691a      	ldr	r2, [r3, #16]
 80037c2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80037c6:	e9c2 3400 	strd	r3, r4, [r2]
      break;
 80037ca:	e003      	b.n	80037d4 <COE_setValue+0x130>

   default:
      DPRINT ("ignored\n");
 80037cc:	4803      	ldr	r0, [pc, #12]	; (80037dc <COE_setValue+0x138>)
 80037ce:	f007 f867 	bl	800a8a0 <puts>
      break;
 80037d2:	bf00      	nop
   }
}
 80037d4:	bf00      	nop
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd90      	pop	{r4, r7, pc}
 80037dc:	0800b230 	.word	0x0800b230

080037e0 <COE_initDefaultValues>:

/**
 * Init default values for SDO objects
 */
void COE_initDefaultValues (void)
{
 80037e0:	b590      	push	{r4, r7, lr}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
   const _objd *objd;
   int n;
   uint8_t maxsub;

   /* Set default values from object descriptor */
   for (n = 0; SDOobjects[n].index != 0xffff; n++)
 80037e6:	2300      	movs	r3, #0
 80037e8:	60bb      	str	r3, [r7, #8]
 80037ea:	e06f      	b.n	80038cc <COE_initDefaultValues+0xec>
   {
      objd = SDOobjects[n].objdesc;
 80037ec:	4943      	ldr	r1, [pc, #268]	; (80038fc <COE_initDefaultValues+0x11c>)
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	4613      	mov	r3, r2
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	1a9b      	subs	r3, r3, r2
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	440b      	add	r3, r1
 80037fa:	3308      	adds	r3, #8
 80037fc:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003800:	607b      	str	r3, [r7, #4]
      maxsub = SDOobjects[n].maxsub;
 8003802:	493e      	ldr	r1, [pc, #248]	; (80038fc <COE_initDefaultValues+0x11c>)
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	4613      	mov	r3, r2
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	1a9b      	subs	r3, r3, r2
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	440b      	add	r3, r1
 8003810:	3304      	adds	r3, #4
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	70fb      	strb	r3, [r7, #3]

      i = 0;
 8003816:	2300      	movs	r3, #0
 8003818:	60fb      	str	r3, [r7, #12]
      do
      {
         if (objd[i].data != NULL)
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	4613      	mov	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	461a      	mov	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4413      	add	r3, r2
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d039      	beq.n	80038a4 <COE_initDefaultValues+0xc4>
         {
            COE_setValue (&objd[i], objd[i].value);
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	4613      	mov	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	461a      	mov	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	1899      	adds	r1, r3, r2
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	4613      	mov	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	461a      	mov	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4413      	add	r3, r2
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f04f 0400 	mov.w	r4, #0
 8003856:	461a      	mov	r2, r3
 8003858:	4623      	mov	r3, r4
 800385a:	4608      	mov	r0, r1
 800385c:	f7ff ff22 	bl	80036a4 <COE_setValue>
            DPRINT ("%04x:%02x = %x\n", SDOobjects[n].index, objd[i].subindex, objd[i].value);
 8003860:	4926      	ldr	r1, [pc, #152]	; (80038fc <COE_initDefaultValues+0x11c>)
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	4613      	mov	r3, r2
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	1a9b      	subs	r3, r3, r2
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	440b      	add	r3, r1
 800386e:	881b      	ldrh	r3, [r3, #0]
 8003870:	b29b      	uxth	r3, r3
 8003872:	4619      	mov	r1, r3
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	4613      	mov	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4413      	add	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	461a      	mov	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4413      	add	r3, r2
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	b29b      	uxth	r3, r3
 8003888:	4618      	mov	r0, r3
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	4613      	mov	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	461a      	mov	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4413      	add	r3, r2
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	4602      	mov	r2, r0
 800389e:	4818      	ldr	r0, [pc, #96]	; (8003900 <COE_initDefaultValues+0x120>)
 80038a0:	f006 ff8a 	bl	800a7b8 <iprintf>
         }
      } while (objd[i++].subindex < maxsub);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	60fa      	str	r2, [r7, #12]
 80038aa:	461a      	mov	r2, r3
 80038ac:	4613      	mov	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	461a      	mov	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4413      	add	r3, r2
 80038ba:	881b      	ldrh	r3, [r3, #0]
 80038bc:	b29a      	uxth	r2, r3
 80038be:	78fb      	ldrb	r3, [r7, #3]
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d3a9      	bcc.n	800381a <COE_initDefaultValues+0x3a>
   for (n = 0; SDOobjects[n].index != 0xffff; n++)
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	3301      	adds	r3, #1
 80038ca:	60bb      	str	r3, [r7, #8]
 80038cc:	490b      	ldr	r1, [pc, #44]	; (80038fc <COE_initDefaultValues+0x11c>)
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	4613      	mov	r3, r2
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	1a9b      	subs	r3, r3, r2
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	440b      	add	r3, r1
 80038da:	881b      	ldrh	r3, [r3, #0]
 80038dc:	b29b      	uxth	r3, r3
 80038de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d182      	bne.n	80037ec <COE_initDefaultValues+0xc>
   }

   /* Let application override default values */
   if (ESCvar.set_defaults_hook != NULL)
 80038e6:	4b07      	ldr	r3, [pc, #28]	; (8003904 <COE_initDefaultValues+0x124>)
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d002      	beq.n	80038f4 <COE_initDefaultValues+0x114>
   {
      ESCvar.set_defaults_hook();
 80038ee:	4b05      	ldr	r3, [pc, #20]	; (8003904 <COE_initDefaultValues+0x124>)
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	4798      	blx	r3
   }
}
 80038f4:	bf00      	nop
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd90      	pop	{r4, r7, pc}
 80038fc:	0800bc44 	.word	0x0800bc44
 8003900:	0800b240 	.word	0x0800b240
 8003904:	20000180 	.word	0x20000180

08003908 <COE_pdoPack>:
 * @param[in] buffer     = input process data
 * @param[in] nmappings  = number of mappings in sync manager
 * @param[in] mappings   = list of mapped objects in sync manager
 */
void COE_pdoPack (uint8_t * buffer, int nmappings, _SMmap * mappings)
{
 8003908:	b590      	push	{r4, r7, lr}
 800390a:	b08d      	sub	sp, #52	; 0x34
 800390c:	af02      	add	r7, sp, #8
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
   int ix;

   /* Check that buffer is aligned on 64-bit boundary */
   CC_ASSERT (((uintptr_t)buffer & 0x07) == 0);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	2b00      	cmp	r3, #0
 800391c:	d006      	beq.n	800392c <COE_pdoPack+0x24>
 800391e:	4b25      	ldr	r3, [pc, #148]	; (80039b4 <COE_pdoPack+0xac>)
 8003920:	4a25      	ldr	r2, [pc, #148]	; (80039b8 <COE_pdoPack+0xb0>)
 8003922:	f240 4182 	movw	r1, #1154	; 0x482
 8003926:	4825      	ldr	r0, [pc, #148]	; (80039bc <COE_pdoPack+0xb4>)
 8003928:	f006 fc12 	bl	800a150 <__assert_func>

   for (ix = 0; ix < nmappings; ix++)
 800392c:	2300      	movs	r3, #0
 800392e:	627b      	str	r3, [r7, #36]	; 0x24
 8003930:	e038      	b.n	80039a4 <COE_pdoPack+0x9c>
   {
      const _objd * obj = mappings[ix].obj;
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	4413      	add	r3, r2
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	623b      	str	r3, [r7, #32]
      uint16_t offset = mappings[ix].offset;
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	4413      	add	r3, r2
 8003946:	889b      	ldrh	r3, [r3, #4]
 8003948:	83fb      	strh	r3, [r7, #30]

      if (obj != NULL)
 800394a:	6a3b      	ldr	r3, [r7, #32]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d026      	beq.n	800399e <COE_pdoPack+0x96>
      {
         if (obj->bitlength > 64)
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	889b      	ldrh	r3, [r3, #4]
 8003954:	b29b      	uxth	r3, r3
 8003956:	2b40      	cmp	r3, #64	; 0x40
 8003958:	d910      	bls.n	800397c <COE_pdoPack+0x74>
         {
            memcpy (
               &buffer[BITS2BYTES (offset)],
 800395a:	8bfb      	ldrh	r3, [r7, #30]
 800395c:	3307      	adds	r3, #7
 800395e:	10db      	asrs	r3, r3, #3
 8003960:	461a      	mov	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	1898      	adds	r0, r3, r2
               obj->data,
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	6919      	ldr	r1, [r3, #16]
               BITS2BYTES (obj->bitlength)
 800396a:	6a3b      	ldr	r3, [r7, #32]
 800396c:	889b      	ldrh	r3, [r3, #4]
 800396e:	b29b      	uxth	r3, r3
 8003970:	3307      	adds	r3, #7
 8003972:	10db      	asrs	r3, r3, #3
            memcpy (
 8003974:	461a      	mov	r2, r3
 8003976:	f006 fc45 	bl	800a204 <memcpy>
 800397a:	e010      	b.n	800399e <COE_pdoPack+0x96>
            );
         }
         else
         {
            /* Atomically get object value */
            uint64_t value = COE_getValue (obj);
 800397c:	6a38      	ldr	r0, [r7, #32]
 800397e:	f7ff fdd9 	bl	8003534 <COE_getValue>
 8003982:	e9c7 0104 	strd	r0, r1, [r7, #16]
            COE_bitsliceSet (
 8003986:	8bf9      	ldrh	r1, [r7, #30]
               (uint64_t *)buffer,
               offset,
               obj->bitlength,
 8003988:	6a3b      	ldr	r3, [r7, #32]
 800398a:	889b      	ldrh	r3, [r3, #4]
 800398c:	b29b      	uxth	r3, r3
            COE_bitsliceSet (
 800398e:	461a      	mov	r2, r3
 8003990:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003994:	e9cd 3400 	strd	r3, r4, [sp]
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f7ff fcc2 	bl	8003322 <COE_bitsliceSet>
   for (ix = 0; ix < nmappings; ix++)
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	3301      	adds	r3, #1
 80039a2:	627b      	str	r3, [r7, #36]	; 0x24
 80039a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	dbc2      	blt.n	8003932 <COE_pdoPack+0x2a>
               value
            );
         }
      }
   }
}
 80039ac:	bf00      	nop
 80039ae:	372c      	adds	r7, #44	; 0x2c
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd90      	pop	{r4, r7, pc}
 80039b4:	0800b258 	.word	0x0800b258
 80039b8:	0800b4e8 	.word	0x0800b4e8
 80039bc:	0800b214 	.word	0x0800b214

080039c0 <COE_pdoUnpack>:
 * @param[in] buffer    = output process data
 * @param[in] nmappings = number of mappings in sync manager
 * @param[in] mappings  = list of mapped objects in sync manager
 */
void COE_pdoUnpack (uint8_t * buffer, int nmappings, _SMmap * mappings)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08a      	sub	sp, #40	; 0x28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
   int ix;

   /* Check that buffer is aligned on 64-bit boundary */
   CC_ASSERT (((uintptr_t)buffer & 0x07) == 0);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d006      	beq.n	80039e4 <COE_pdoUnpack+0x24>
 80039d6:	4b24      	ldr	r3, [pc, #144]	; (8003a68 <COE_pdoUnpack+0xa8>)
 80039d8:	4a24      	ldr	r2, [pc, #144]	; (8003a6c <COE_pdoUnpack+0xac>)
 80039da:	f240 41b1 	movw	r1, #1201	; 0x4b1
 80039de:	4824      	ldr	r0, [pc, #144]	; (8003a70 <COE_pdoUnpack+0xb0>)
 80039e0:	f006 fbb6 	bl	800a150 <__assert_func>

   for (ix = 0; ix < nmappings; ix++)
 80039e4:	2300      	movs	r3, #0
 80039e6:	627b      	str	r3, [r7, #36]	; 0x24
 80039e8:	e036      	b.n	8003a58 <COE_pdoUnpack+0x98>
   {
      const _objd * obj = mappings[ix].obj;
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	4413      	add	r3, r2
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	623b      	str	r3, [r7, #32]
      uint16_t offset = mappings[ix].offset;
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	4413      	add	r3, r2
 80039fe:	889b      	ldrh	r3, [r3, #4]
 8003a00:	83fb      	strh	r3, [r7, #30]

      if (obj != NULL)
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d024      	beq.n	8003a52 <COE_pdoUnpack+0x92>
      {
         if (obj->bitlength > 64)
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	889b      	ldrh	r3, [r3, #4]
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	2b40      	cmp	r3, #64	; 0x40
 8003a10:	d910      	bls.n	8003a34 <COE_pdoUnpack+0x74>
         {
            memcpy (
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	6918      	ldr	r0, [r3, #16]
               obj->data,
               &buffer[BITS2BYTES (offset)],
 8003a16:	8bfb      	ldrh	r3, [r7, #30]
 8003a18:	3307      	adds	r3, #7
 8003a1a:	10db      	asrs	r3, r3, #3
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	1899      	adds	r1, r3, r2
               BITS2BYTES (obj->bitlength)
 8003a22:	6a3b      	ldr	r3, [r7, #32]
 8003a24:	889b      	ldrh	r3, [r3, #4]
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	3307      	adds	r3, #7
 8003a2a:	10db      	asrs	r3, r3, #3
            memcpy (
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	f006 fbe9 	bl	800a204 <memcpy>
 8003a32:	e00e      	b.n	8003a52 <COE_pdoUnpack+0x92>
            );
         }
         else
         {
            /* Atomically set object value */
            uint64_t value = COE_bitsliceGet (
 8003a34:	8bf9      	ldrh	r1, [r7, #30]
               (uint64_t *)buffer,
               offset,
               obj->bitlength
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	889b      	ldrh	r3, [r3, #4]
 8003a3a:	b29b      	uxth	r3, r3
            uint64_t value = COE_bitsliceGet (
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f7ff fbd6 	bl	80031f0 <COE_bitsliceGet>
 8003a44:	e9c7 0104 	strd	r0, r1, [r7, #16]
            );
            COE_setValue (obj, value);
 8003a48:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003a4c:	6a38      	ldr	r0, [r7, #32]
 8003a4e:	f7ff fe29 	bl	80036a4 <COE_setValue>
   for (ix = 0; ix < nmappings; ix++)
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	3301      	adds	r3, #1
 8003a56:	627b      	str	r3, [r7, #36]	; 0x24
 8003a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	dbc4      	blt.n	80039ea <COE_pdoUnpack+0x2a>
         }
      }
   }
}
 8003a60:	bf00      	nop
 8003a62:	3728      	adds	r7, #40	; 0x28
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	0800b258 	.word	0x0800b258
 8003a6c:	0800b4f4 	.word	0x0800b4f4
 8003a70:	0800b214 	.word	0x0800b214

08003a74 <COE_maxSub>:
 * This function fetches the value of subindex 0 (max subindex).
 *
 * @param[in] index = object index
 */
uint8_t COE_maxSub (uint16_t index)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	80fb      	strh	r3, [r7, #6]
   int nidx;
   uint8_t maxsub;

   nidx = SDO_findobject (index);
 8003a7e:	88fb      	ldrh	r3, [r7, #6]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fe f9df 	bl	8001e44 <SDO_findobject>
 8003a86:	60f8      	str	r0, [r7, #12]
   if (nidx == -1)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8e:	d101      	bne.n	8003a94 <COE_maxSub+0x20>
      return 0;
 8003a90:	2300      	movs	r3, #0
 8003a92:	e027      	b.n	8003ae4 <COE_maxSub+0x70>

   maxsub = OBJ_VALUE_FETCH (maxsub, SDOobjects[nidx].objdesc[0]);
 8003a94:	4915      	ldr	r1, [pc, #84]	; (8003aec <COE_maxSub+0x78>)
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	1a9b      	subs	r3, r3, r2
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	440b      	add	r3, r1
 8003aa2:	3308      	adds	r3, #8
 8003aa4:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00c      	beq.n	8003ac8 <COE_maxSub+0x54>
 8003aae:	490f      	ldr	r1, [pc, #60]	; (8003aec <COE_maxSub+0x78>)
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	1a9b      	subs	r3, r3, r2
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	440b      	add	r3, r1
 8003abc:	3308      	adds	r3, #8
 8003abe:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	e00b      	b.n	8003ae0 <COE_maxSub+0x6c>
 8003ac8:	4908      	ldr	r1, [pc, #32]	; (8003aec <COE_maxSub+0x78>)
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	4613      	mov	r3, r2
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	1a9b      	subs	r3, r3, r2
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	440b      	add	r3, r1
 8003ad6:	3308      	adds	r3, #8
 8003ad8:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	72fb      	strb	r3, [r7, #11]
   return maxsub;
 8003ae2:	7afb      	ldrb	r3, [r7, #11]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	0800bc44 	.word	0x0800bc44

08003af0 <FOE_fopen>:
 * @param[in] op        = Request op-code
 * @return 0= if we succeed, FOE_ERR_NOTFOUND something wrong with filename or
 * password
 */
int FOE_fopen (char *name, uint8_t num_chars, uint32_t pass, uint8_t op)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	607a      	str	r2, [r7, #4]
 8003afa:	461a      	mov	r2, r3
 8003afc:	460b      	mov	r3, r1
 8003afe:	72fb      	strb	r3, [r7, #11]
 8003b00:	4613      	mov	r3, r2
 8003b02:	72bb      	strb	r3, [r7, #10]
   uint32_t i;

   /* Unpack the file name into characters we can look at. */
   if (num_chars > FOE_FN_MAX)
 8003b04:	7afb      	ldrb	r3, [r7, #11]
 8003b06:	2b0f      	cmp	r3, #15
 8003b08:	d901      	bls.n	8003b0e <FOE_fopen+0x1e>
   {
      num_chars = FOE_FN_MAX;
 8003b0a:	230f      	movs	r3, #15
 8003b0c:	72fb      	strb	r3, [r7, #11]
   }

   for (i = 0; i < num_chars; i++)
 8003b0e:	2300      	movs	r3, #0
 8003b10:	617b      	str	r3, [r7, #20]
 8003b12:	e00b      	b.n	8003b2c <FOE_fopen+0x3c>
   {
      foe_file_name[i] = name[i];
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	4413      	add	r3, r2
 8003b1a:	7819      	ldrb	r1, [r3, #0]
 8003b1c:	4a42      	ldr	r2, [pc, #264]	; (8003c28 <FOE_fopen+0x138>)
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	4413      	add	r3, r2
 8003b22:	460a      	mov	r2, r1
 8003b24:	701a      	strb	r2, [r3, #0]
   for (i = 0; i < num_chars; i++)
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	7afb      	ldrb	r3, [r7, #11]
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d3ef      	bcc.n	8003b14 <FOE_fopen+0x24>
   }
   foe_file_name[i] = '\0';
 8003b34:	4a3c      	ldr	r2, [pc, #240]	; (8003c28 <FOE_fopen+0x138>)
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	4413      	add	r3, r2
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	701a      	strb	r2, [r3, #0]

   /* Figure out what file they're talking about. */
   for (i = 0; i < foe_cfg->n_files; i++)
 8003b3e:	2300      	movs	r3, #0
 8003b40:	617b      	str	r3, [r7, #20]
 8003b42:	e065      	b.n	8003c10 <FOE_fopen+0x120>
   {
      if ((0 == strncmp (foe_file_name, foe_files[i].name, num_chars)) &&
 8003b44:	4b39      	ldr	r3, [pc, #228]	; (8003c2c <FOE_fopen+0x13c>)
 8003b46:	6819      	ldr	r1, [r3, #0]
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	1a9b      	subs	r3, r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	440b      	add	r3, r1
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	7afa      	ldrb	r2, [r7, #11]
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4833      	ldr	r0, [pc, #204]	; (8003c28 <FOE_fopen+0x138>)
 8003b5c:	f006 fea8 	bl	800a8b0 <strncmp>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d151      	bne.n	8003c0a <FOE_fopen+0x11a>
          (pass == foe_files[i].filepass))
 8003b66:	4b31      	ldr	r3, [pc, #196]	; (8003c2c <FOE_fopen+0x13c>)
 8003b68:	6819      	ldr	r1, [r3, #0]
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	1a9b      	subs	r3, r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	440b      	add	r3, r1
 8003b76:	695b      	ldr	r3, [r3, #20]
      if ((0 == strncmp (foe_file_name, foe_files[i].name, num_chars)) &&
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d145      	bne.n	8003c0a <FOE_fopen+0x11a>
      {
         foe_file = &foe_files[i];
 8003b7e:	4b2b      	ldr	r3, [pc, #172]	; (8003c2c <FOE_fopen+0x13c>)
 8003b80:	6819      	ldr	r1, [r3, #0]
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	4613      	mov	r3, r2
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	1a9b      	subs	r3, r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	440b      	add	r3, r1
 8003b8e:	4a28      	ldr	r2, [pc, #160]	; (8003c30 <FOE_fopen+0x140>)
 8003b90:	6013      	str	r3, [r2, #0]
         foe_file->address_offset = 0;
 8003b92:	4b27      	ldr	r3, [pc, #156]	; (8003c30 <FOE_fopen+0x140>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2200      	movs	r2, #0
 8003b98:	60da      	str	r2, [r3, #12]
         foe_file->total_size = 0;
 8003b9a:	4b25      	ldr	r3, [pc, #148]	; (8003c30 <FOE_fopen+0x140>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	611a      	str	r2, [r3, #16]
         switch (op)
 8003ba2:	7abb      	ldrb	r3, [r7, #10]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d002      	beq.n	8003bae <FOE_fopen+0xbe>
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d017      	beq.n	8003bdc <FOE_fopen+0xec>
 8003bac:	e02d      	b.n	8003c0a <FOE_fopen+0x11a>
         {
            case FOE_OP_RRQ:
            {
               FOEvar.fposition = 0;
 8003bae:	4b21      	ldr	r3, [pc, #132]	; (8003c34 <FOE_fopen+0x144>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	71da      	strb	r2, [r3, #7]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	721a      	strb	r2, [r3, #8]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	725a      	strb	r2, [r3, #9]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	729a      	strb	r2, [r3, #10]
               FOEvar.fend = foe_files[i].max_data;
 8003bc0:	4b1a      	ldr	r3, [pc, #104]	; (8003c2c <FOE_fopen+0x13c>)
 8003bc2:	6819      	ldr	r1, [r3, #0]
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	1a9b      	subs	r3, r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	440b      	add	r3, r1
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	4a18      	ldr	r2, [pc, #96]	; (8003c34 <FOE_fopen+0x144>)
 8003bd4:	f8c2 300f 	str.w	r3, [r2, #15]
               return 0;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	e021      	b.n	8003c20 <FOE_fopen+0x130>
            }
            case FOE_OP_WRQ:
            {
               FOEvar.fposition = 0;
 8003bdc:	4b15      	ldr	r3, [pc, #84]	; (8003c34 <FOE_fopen+0x144>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	71da      	strb	r2, [r3, #7]
 8003be2:	2200      	movs	r2, #0
 8003be4:	721a      	strb	r2, [r3, #8]
 8003be6:	2200      	movs	r2, #0
 8003be8:	725a      	strb	r2, [r3, #9]
 8003bea:	2200      	movs	r2, #0
 8003bec:	729a      	strb	r2, [r3, #10]
               FOEvar.fend = foe_files[i].max_data;
 8003bee:	4b0f      	ldr	r3, [pc, #60]	; (8003c2c <FOE_fopen+0x13c>)
 8003bf0:	6819      	ldr	r1, [r3, #0]
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	1a9b      	subs	r3, r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	4a0c      	ldr	r2, [pc, #48]	; (8003c34 <FOE_fopen+0x144>)
 8003c02:	f8c2 300f 	str.w	r3, [r2, #15]
               return 0;
 8003c06:	2300      	movs	r3, #0
 8003c08:	e00a      	b.n	8003c20 <FOE_fopen+0x130>
   for (i = 0; i < foe_cfg->n_files; i++)
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	617b      	str	r3, [r7, #20]
 8003c10:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <FOE_fopen+0x148>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d393      	bcc.n	8003b44 <FOE_fopen+0x54>
            }
         }
      }
   }

   return FOE_ERR_NOTFOUND;
 8003c1c:	f248 0301 	movw	r3, #32769	; 0x8001
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	20000418 	.word	0x20000418
 8003c2c:	20000158 	.word	0x20000158
 8003c30:	2000015c 	.word	0x2000015c
 8003c34:	20000160 	.word	0x20000160
 8003c38:	20000154 	.word	0x20000154

08003c3c <FOE_fwrite>:
 * @param[in] length = Length of data to read

 * @return Number of copied bytes.
 */
uint16_t FOE_fwrite (uint8_t *data, uint16_t length)
{
 8003c3c:	b590      	push	{r4, r7, lr}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	460b      	mov	r3, r1
 8003c46:	807b      	strh	r3, [r7, #2]
    uint16_t ncopied = 0;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	81fb      	strh	r3, [r7, #14]
    uint32_t failed = 0;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	60bb      	str	r3, [r7, #8]

    DPRINT("FOE_fwrite\n");
 8003c50:	4837      	ldr	r0, [pc, #220]	; (8003d30 <FOE_fwrite+0xf4>)
 8003c52:	f006 fe25 	bl	800a8a0 <puts>
    FOEvar.fprevposition = FOEvar.fposition;
 8003c56:	4b37      	ldr	r3, [pc, #220]	; (8003d34 <FOE_fwrite+0xf8>)
 8003c58:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8003c5c:	4a35      	ldr	r2, [pc, #212]	; (8003d34 <FOE_fwrite+0xf8>)
 8003c5e:	f8c2 300b 	str.w	r3, [r2, #11]
    while (length && (FOEvar.fend - FOEvar.fposition) && !failed)
 8003c62:	e045      	b.n	8003cf0 <FOE_fwrite+0xb4>
    {
       length--;
 8003c64:	887b      	ldrh	r3, [r7, #2]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	807b      	strh	r3, [r7, #2]
       foe_cfg->fbuffer[FOEvar.fbufposition++] = *(data++);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	1c5a      	adds	r2, r3, #1
 8003c6e:	607a      	str	r2, [r7, #4]
 8003c70:	4a31      	ldr	r2, [pc, #196]	; (8003d38 <FOE_fwrite+0xfc>)
 8003c72:	6812      	ldr	r2, [r2, #0]
 8003c74:	6811      	ldr	r1, [r2, #0]
 8003c76:	4a2f      	ldr	r2, [pc, #188]	; (8003d34 <FOE_fwrite+0xf8>)
 8003c78:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 8003c7c:	b292      	uxth	r2, r2
 8003c7e:	1c50      	adds	r0, r2, #1
 8003c80:	b284      	uxth	r4, r0
 8003c82:	482c      	ldr	r0, [pc, #176]	; (8003d34 <FOE_fwrite+0xf8>)
 8003c84:	f8a0 4001 	strh.w	r4, [r0, #1]
 8003c88:	440a      	add	r2, r1
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	7013      	strb	r3, [r2, #0]
       if(FOEvar.fbufposition >= foe_cfg->buffer_size)
 8003c8e:	4b29      	ldr	r3, [pc, #164]	; (8003d34 <FOE_fwrite+0xf8>)
 8003c90:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	461a      	mov	r2, r3
 8003c98:	4b27      	ldr	r3, [pc, #156]	; (8003d38 <FOE_fwrite+0xfc>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d31c      	bcc.n	8003cdc <FOE_fwrite+0xa0>
       {
          failed = foe_file->write_function (foe_file, foe_cfg->fbuffer, FOEvar.fbufposition);
 8003ca2:	4b26      	ldr	r3, [pc, #152]	; (8003d3c <FOE_fwrite+0x100>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	4a24      	ldr	r2, [pc, #144]	; (8003d3c <FOE_fwrite+0x100>)
 8003caa:	6810      	ldr	r0, [r2, #0]
 8003cac:	4a22      	ldr	r2, [pc, #136]	; (8003d38 <FOE_fwrite+0xfc>)
 8003cae:	6812      	ldr	r2, [r2, #0]
 8003cb0:	6811      	ldr	r1, [r2, #0]
 8003cb2:	4a20      	ldr	r2, [pc, #128]	; (8003d34 <FOE_fwrite+0xf8>)
 8003cb4:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 8003cb8:	b292      	uxth	r2, r2
 8003cba:	4798      	blx	r3
 8003cbc:	60b8      	str	r0, [r7, #8]
          FOEvar.fbufposition = 0;
 8003cbe:	4b1d      	ldr	r3, [pc, #116]	; (8003d34 <FOE_fwrite+0xf8>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	705a      	strb	r2, [r3, #1]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	709a      	strb	r2, [r3, #2]
          foe_file->address_offset += foe_cfg->buffer_size;
 8003cc8:	4b1c      	ldr	r3, [pc, #112]	; (8003d3c <FOE_fwrite+0x100>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68d9      	ldr	r1, [r3, #12]
 8003cce:	4b1a      	ldr	r3, [pc, #104]	; (8003d38 <FOE_fwrite+0xfc>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	4b19      	ldr	r3, [pc, #100]	; (8003d3c <FOE_fwrite+0x100>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	440a      	add	r2, r1
 8003cda:	60da      	str	r2, [r3, #12]
       }
       FOEvar.fposition++;
 8003cdc:	4b15      	ldr	r3, [pc, #84]	; (8003d34 <FOE_fwrite+0xf8>)
 8003cde:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	4a13      	ldr	r2, [pc, #76]	; (8003d34 <FOE_fwrite+0xf8>)
 8003ce6:	f8c2 3007 	str.w	r3, [r2, #7]
       ncopied++;
 8003cea:	89fb      	ldrh	r3, [r7, #14]
 8003cec:	3301      	adds	r3, #1
 8003cee:	81fb      	strh	r3, [r7, #14]
    while (length && (FOEvar.fend - FOEvar.fposition) && !failed)
 8003cf0:	887b      	ldrh	r3, [r7, #2]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <FOE_fwrite+0xd0>
 8003cf6:	4b0f      	ldr	r3, [pc, #60]	; (8003d34 <FOE_fwrite+0xf8>)
 8003cf8:	f8d3 200f 	ldr.w	r2, [r3, #15]
 8003cfc:	4b0d      	ldr	r3, [pc, #52]	; (8003d34 <FOE_fwrite+0xf8>)
 8003cfe:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d002      	beq.n	8003d0c <FOE_fwrite+0xd0>
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d0ab      	beq.n	8003c64 <FOE_fwrite+0x28>
    }

    foe_file->total_size += ncopied;
 8003d0c:	4b0b      	ldr	r3, [pc, #44]	; (8003d3c <FOE_fwrite+0x100>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6919      	ldr	r1, [r3, #16]
 8003d12:	89fa      	ldrh	r2, [r7, #14]
 8003d14:	4b09      	ldr	r3, [pc, #36]	; (8003d3c <FOE_fwrite+0x100>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	440a      	add	r2, r1
 8003d1a:	611a      	str	r2, [r3, #16]

    DPRINT("FOE_fwrite END with : %d\n",ncopied);
 8003d1c:	89fb      	ldrh	r3, [r7, #14]
 8003d1e:	4619      	mov	r1, r3
 8003d20:	4807      	ldr	r0, [pc, #28]	; (8003d40 <FOE_fwrite+0x104>)
 8003d22:	f006 fd49 	bl	800a7b8 <iprintf>
    return ncopied;
 8003d26:	89fb      	ldrh	r3, [r7, #14]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd90      	pop	{r4, r7, pc}
 8003d30:	0800b278 	.word	0x0800b278
 8003d34:	20000160 	.word	0x20000160
 8003d38:	20000154 	.word	0x20000154
 8003d3c:	2000015c 	.word	0x2000015c
 8003d40:	0800b28c 	.word	0x0800b28c

08003d44 <FOE_fclose>:
 * if we have filled the buffers or not.
 *
 * @return Number of copied bytes on success, 0= if failed.
 */
uint32_t FOE_fclose (void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
   uint32_t failed = 0;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	607b      	str	r3, [r7, #4]

   DPRINT("FOE_fclose\n");
 8003d4e:	4813      	ldr	r0, [pc, #76]	; (8003d9c <FOE_fclose+0x58>)
 8003d50:	f006 fda6 	bl	800a8a0 <puts>
   
   failed = foe_file->write_function (foe_file, foe_cfg->fbuffer, FOEvar.fbufposition);
 8003d54:	4b12      	ldr	r3, [pc, #72]	; (8003da0 <FOE_fclose+0x5c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	4a11      	ldr	r2, [pc, #68]	; (8003da0 <FOE_fclose+0x5c>)
 8003d5c:	6810      	ldr	r0, [r2, #0]
 8003d5e:	4a11      	ldr	r2, [pc, #68]	; (8003da4 <FOE_fclose+0x60>)
 8003d60:	6812      	ldr	r2, [r2, #0]
 8003d62:	6811      	ldr	r1, [r2, #0]
 8003d64:	4a10      	ldr	r2, [pc, #64]	; (8003da8 <FOE_fclose+0x64>)
 8003d66:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 8003d6a:	b292      	uxth	r2, r2
 8003d6c:	4798      	blx	r3
 8003d6e:	6078      	str	r0, [r7, #4]
   foe_file->address_offset += FOEvar.fbufposition;
 8003d70:	4b0b      	ldr	r3, [pc, #44]	; (8003da0 <FOE_fclose+0x5c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68da      	ldr	r2, [r3, #12]
 8003d76:	4b0c      	ldr	r3, [pc, #48]	; (8003da8 <FOE_fclose+0x64>)
 8003d78:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	4619      	mov	r1, r3
 8003d80:	4b07      	ldr	r3, [pc, #28]	; (8003da0 <FOE_fclose+0x5c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	440a      	add	r2, r1
 8003d86:	60da      	str	r2, [r3, #12]
   FOEvar.fbufposition = 0;
 8003d88:	4b07      	ldr	r3, [pc, #28]	; (8003da8 <FOE_fclose+0x64>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	705a      	strb	r2, [r3, #1]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	709a      	strb	r2, [r3, #2]

   return failed;
 8003d92:	687b      	ldr	r3, [r7, #4]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	0800b2ac 	.word	0x0800b2ac
 8003da0:	2000015c 	.word	0x2000015c
 8003da4:	20000154 	.word	0x20000154
 8003da8:	20000160 	.word	0x20000160

08003dac <FOE_init>:

/** Initialize by clearing all current status variables.
 *
 */
void FOE_init ()
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
   DPRINT("FOE_init\n");
 8003db0:	4813      	ldr	r0, [pc, #76]	; (8003e00 <FOE_init+0x54>)
 8003db2:	f006 fd75 	bl	800a8a0 <puts>
   FOEvar.foepacket = 0;
 8003db6:	4b13      	ldr	r3, [pc, #76]	; (8003e04 <FOE_init+0x58>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	70da      	strb	r2, [r3, #3]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	711a      	strb	r2, [r3, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	715a      	strb	r2, [r3, #5]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	719a      	strb	r2, [r3, #6]
   FOEvar.foestate = FOE_READY;
 8003dc8:	4b0e      	ldr	r3, [pc, #56]	; (8003e04 <FOE_init+0x58>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	701a      	strb	r2, [r3, #0]
   FOEvar.fposition = 0;
 8003dce:	4b0d      	ldr	r3, [pc, #52]	; (8003e04 <FOE_init+0x58>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	71da      	strb	r2, [r3, #7]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	721a      	strb	r2, [r3, #8]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	725a      	strb	r2, [r3, #9]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	729a      	strb	r2, [r3, #10]
   FOEvar.fprevposition = 0;
 8003de0:	4b08      	ldr	r3, [pc, #32]	; (8003e04 <FOE_init+0x58>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	72da      	strb	r2, [r3, #11]
 8003de6:	2200      	movs	r2, #0
 8003de8:	731a      	strb	r2, [r3, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	735a      	strb	r2, [r3, #13]
 8003dee:	2200      	movs	r2, #0
 8003df0:	739a      	strb	r2, [r3, #14]
   FOEvar.fbufposition = 0;
 8003df2:	4b04      	ldr	r3, [pc, #16]	; (8003e04 <FOE_init+0x58>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	705a      	strb	r2, [r3, #1]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	709a      	strb	r2, [r3, #2]
}
 8003dfc:	bf00      	nop
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	0800b2c0 	.word	0x0800b2c0
 8003e04:	20000160 	.word	0x20000160

08003e08 <FOE_abort>:
/** Function for sending an FOE abort frame.
 *
 * @param[in] code   = abort code
 */
void FOE_abort (uint32_t code)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
   _FOE *foembx;
   uint8_t mbxhandle;

   if (code)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d025      	beq.n	8003e62 <FOE_abort+0x5a>
   {
      /* Send back an error packet. */
      mbxhandle = ESC_claimbuffer ();
 8003e16:	f7fd f8f9 	bl	800100c <ESC_claimbuffer>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	73fb      	strb	r3, [r7, #15]
      if (mbxhandle)
 8003e1e:	7bfb      	ldrb	r3, [r7, #15]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d01e      	beq.n	8003e62 <FOE_abort+0x5a>
      {
         foembx = (_FOE *) &MBX[mbxhandle * ESC_MBXSIZE];
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
 8003e26:	4a14      	ldr	r2, [pc, #80]	; (8003e78 <FOE_abort+0x70>)
 8003e28:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e2a:	fb02 f303 	mul.w	r3, r2, r3
 8003e2e:	4a13      	ldr	r2, [pc, #76]	; (8003e7c <FOE_abort+0x74>)
 8003e30:	4413      	add	r3, r2
 8003e32:	60bb      	str	r3, [r7, #8]
         foembx->mbxheader.length = htoes (ESC_FOEHSIZE);   /* Don't bother with error text for now. */
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f042 0206 	orr.w	r2, r2, #6
 8003e3c:	701a      	strb	r2, [r3, #0]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	705a      	strb	r2, [r3, #1]
         foembx->mbxheader.mbxtype = MBXFOE;
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	7953      	ldrb	r3, [r2, #5]
 8003e46:	2104      	movs	r1, #4
 8003e48:	f361 0303 	bfi	r3, r1, #0, #4
 8003e4c:	7153      	strb	r3, [r2, #5]
         foembx->foeheader.opcode = FOE_OP_ERR;
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2205      	movs	r2, #5
 8003e52:	719a      	strb	r2, [r3, #6]
         foembx->foeheader.errorcode = htoel (code);
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	609a      	str	r2, [r3, #8]
         MBXcontrol[mbxhandle].state = MBXstate_outreq;
 8003e5a:	7bfb      	ldrb	r3, [r7, #15]
 8003e5c:	4a08      	ldr	r2, [pc, #32]	; (8003e80 <FOE_abort+0x78>)
 8003e5e:	2103      	movs	r1, #3
 8003e60:	54d1      	strb	r1, [r2, r3]
      }
      /* Nothing we can do if we can't get an outbound mailbox. */
   }
   DPRINT("FOE_abort: 0x%X\n", code);
 8003e62:	6879      	ldr	r1, [r7, #4]
 8003e64:	4807      	ldr	r0, [pc, #28]	; (8003e84 <FOE_abort+0x7c>)
 8003e66:	f006 fca7 	bl	800a7b8 <iprintf>
   FOE_init ();
 8003e6a:	f7ff ff9f 	bl	8003dac <FOE_init>
}
 8003e6e:	bf00      	nop
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	20000180 	.word	0x20000180
 8003e7c:	2000024c 	.word	0x2000024c
 8003e80:	20000414 	.word	0x20000414
 8003e84:	0800b2d0 	.word	0x0800b2d0

08003e88 <FOE_send_ack>:
/** Sends an FoE ack data frame.

 * @return 0= or error number.
 */
int FOE_send_ack ()
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
   _FOE *foembx;
   uint8_t mbxhandle;

   mbxhandle = ESC_claimbuffer ();
 8003e8e:	f7fd f8bd 	bl	800100c <ESC_claimbuffer>
 8003e92:	4603      	mov	r3, r0
 8003e94:	71fb      	strb	r3, [r7, #7]
   if (mbxhandle)
 8003e96:	79fb      	ldrb	r3, [r7, #7]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d02c      	beq.n	8003ef6 <FOE_send_ack+0x6e>
   {
      DPRINT("FOE_send_ack\n");
 8003e9c:	481a      	ldr	r0, [pc, #104]	; (8003f08 <FOE_send_ack+0x80>)
 8003e9e:	f006 fcff 	bl	800a8a0 <puts>
      foembx = (_FOE *) &MBX[mbxhandle * ESC_MBXSIZE];
 8003ea2:	79fb      	ldrb	r3, [r7, #7]
 8003ea4:	4a19      	ldr	r2, [pc, #100]	; (8003f0c <FOE_send_ack+0x84>)
 8003ea6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ea8:	fb02 f303 	mul.w	r3, r2, r3
 8003eac:	4a18      	ldr	r2, [pc, #96]	; (8003f10 <FOE_send_ack+0x88>)
 8003eae:	4413      	add	r3, r2
 8003eb0:	603b      	str	r3, [r7, #0]
      foembx->mbxheader.length = htoes (ESC_FOEHSIZE);
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f042 0206 	orr.w	r2, r2, #6
 8003eba:	701a      	strb	r2, [r3, #0]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	705a      	strb	r2, [r3, #1]
      foembx->mbxheader.mbxtype = MBXFOE;
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	7953      	ldrb	r3, [r2, #5]
 8003ec4:	2104      	movs	r1, #4
 8003ec6:	f361 0303 	bfi	r3, r1, #0, #4
 8003eca:	7153      	strb	r3, [r2, #5]
      foembx->foeheader.opcode = FOE_OP_ACK;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	2204      	movs	r2, #4
 8003ed0:	719a      	strb	r2, [r3, #6]
      foembx->foeheader.packetnumber = htoel (FOEvar.foepacket);
 8003ed2:	4b10      	ldr	r3, [pc, #64]	; (8003f14 <FOE_send_ack+0x8c>)
 8003ed4:	f8d3 2003 	ldr.w	r2, [r3, #3]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	609a      	str	r2, [r3, #8]
      FOEvar.foepacket++;
 8003edc:	4b0d      	ldr	r3, [pc, #52]	; (8003f14 <FOE_send_ack+0x8c>)
 8003ede:	f8d3 3003 	ldr.w	r3, [r3, #3]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	4a0b      	ldr	r2, [pc, #44]	; (8003f14 <FOE_send_ack+0x8c>)
 8003ee6:	f8c2 3003 	str.w	r3, [r2, #3]
      MBXcontrol[mbxhandle].state = MBXstate_outreq;
 8003eea:	79fb      	ldrb	r3, [r7, #7]
 8003eec:	4a0a      	ldr	r2, [pc, #40]	; (8003f18 <FOE_send_ack+0x90>)
 8003eee:	2103      	movs	r1, #3
 8003ef0:	54d1      	strb	r1, [r2, r3]
      return 0;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	e004      	b.n	8003f00 <FOE_send_ack+0x78>
   }
   else
   {
      DPRINT("ERROR:FOE_send_ack\n");
 8003ef6:	4809      	ldr	r0, [pc, #36]	; (8003f1c <FOE_send_ack+0x94>)
 8003ef8:	f006 fcd2 	bl	800a8a0 <puts>
      return FOE_ERR_PROGERROR;
 8003efc:	f248 030b 	movw	r3, #32779	; 0x800b
   }
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	0800b2e8 	.word	0x0800b2e8
 8003f0c:	20000180 	.word	0x20000180
 8003f10:	2000024c 	.word	0x2000024c
 8003f14:	20000160 	.word	0x20000160
 8003f18:	20000414 	.word	0x20000414
 8003f1c:	0800b2fc 	.word	0x0800b2fc

08003f20 <FOE_write>:
/** FoE write request handler. Starts with Initialize, Open and Ack that we can/will
 * receive data. On error we will send FOE Abort.
 *
 */
void FOE_write ()
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
   _FOE *foembx;
   uint32_t data_len;
   uint32_t password;
   int res;

   if (FOEvar.foestate != FOE_READY)
 8003f26:	4b1d      	ldr	r3, [pc, #116]	; (8003f9c <FOE_write+0x7c>)
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d004      	beq.n	8003f38 <FOE_write+0x18>
   {
      FOE_abort (FOE_ERR_ILLEGAL);
 8003f2e:	f248 0004 	movw	r0, #32772	; 0x8004
 8003f32:	f7ff ff69 	bl	8003e08 <FOE_abort>
      return;
 8003f36:	e02e      	b.n	8003f96 <FOE_write+0x76>
   }

   FOE_init ();
 8003f38:	f7ff ff38 	bl	8003dac <FOE_init>
   foembx = (_FOE *) &MBX[0];
 8003f3c:	4b18      	ldr	r3, [pc, #96]	; (8003fa0 <FOE_write+0x80>)
 8003f3e:	60fb      	str	r3, [r7, #12]
   data_len = etohs (foembx->mbxheader.length) - ESC_FOEHSIZE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	881b      	ldrh	r3, [r3, #0]
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	3b06      	subs	r3, #6
 8003f48:	60bb      	str	r3, [r7, #8]
   password = etohl (foembx->foeheader.password);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	607b      	str	r3, [r7, #4]

   /* Get an address we can write the file to, if possible. */
   res = FOE_fopen (foembx->filename, data_len, password, FOE_OP_WRQ);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f103 000c 	add.w	r0, r3, #12
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	b2d9      	uxtb	r1, r3
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	f7ff fdc7 	bl	8003af0 <FOE_fopen>
 8003f62:	6038      	str	r0, [r7, #0]
   DPRINT("FOE_write\n");
 8003f64:	480f      	ldr	r0, [pc, #60]	; (8003fa4 <FOE_write+0x84>)
 8003f66:	f006 fc9b 	bl	800a8a0 <puts>
   if (res == 0)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d10e      	bne.n	8003f8e <FOE_write+0x6e>
   {
      res = FOE_send_ack ();
 8003f70:	f7ff ff8a 	bl	8003e88 <FOE_send_ack>
 8003f74:	6038      	str	r0, [r7, #0]
      if (res)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d004      	beq.n	8003f86 <FOE_write+0x66>
      {
         FOE_abort (res);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7ff ff42 	bl	8003e08 <FOE_abort>
 8003f84:	e007      	b.n	8003f96 <FOE_write+0x76>
      }
      else
      {
         FOEvar.foestate = FOE_WAIT_FOR_DATA;
 8003f86:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <FOE_write+0x7c>)
 8003f88:	2203      	movs	r2, #3
 8003f8a:	701a      	strb	r2, [r3, #0]
 8003f8c:	e003      	b.n	8003f96 <FOE_write+0x76>
      }
   }
   else
   {
      FOE_abort (res);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff ff39 	bl	8003e08 <FOE_abort>
   }
}
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	20000160 	.word	0x20000160
 8003fa0:	2000024c 	.word	0x2000024c
 8003fa4:	0800b318 	.word	0x0800b318

08003fa8 <FOE_data>:
/** FoE data request handler. Validates and reads data until we're finsihed. Every
 * read frame follwed by an Ack frame. On error we will send FOE Abort.
 *
 */
void FOE_data ()
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
   _FOE *foembx;
   uint32_t packet;
   uint16_t data_len, ncopied;
   int res;

   if(FOEvar.foestate != FOE_WAIT_FOR_DATA)
 8003fae:	4b4c      	ldr	r3, [pc, #304]	; (80040e0 <FOE_data+0x138>)
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	d004      	beq.n	8003fc0 <FOE_data+0x18>
   {
      FOE_abort(FOE_ERR_ILLEGAL);
 8003fb6:	f248 0004 	movw	r0, #32772	; 0x8004
 8003fba:	f7ff ff25 	bl	8003e08 <FOE_abort>
      return;
 8003fbe:	e08b      	b.n	80040d8 <FOE_data+0x130>
   }

   foembx = (_FOE*)&MBX[0];
 8003fc0:	4b48      	ldr	r3, [pc, #288]	; (80040e4 <FOE_data+0x13c>)
 8003fc2:	617b      	str	r3, [r7, #20]
   data_len = etohs(foembx->mbxheader.length) - ESC_FOEHSIZE;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	881b      	ldrh	r3, [r3, #0]
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	3b06      	subs	r3, #6
 8003fcc:	827b      	strh	r3, [r7, #18]
   packet = etohl(foembx->foeheader.packetnumber);
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	60fb      	str	r3, [r7, #12]

   if (packet != FOEvar.foepacket)
 8003fd4:	4b42      	ldr	r3, [pc, #264]	; (80040e0 <FOE_data+0x138>)
 8003fd6:	f8d3 3003 	ldr.w	r3, [r3, #3]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d00c      	beq.n	8003ffa <FOE_data+0x52>
   {
      DPRINT("FOE_data packet error,packet: %d foeheader.packet: %d\n",packet,FOEvar.foepacket);
 8003fe0:	4b3f      	ldr	r3, [pc, #252]	; (80040e0 <FOE_data+0x138>)
 8003fe2:	f8d3 3003 	ldr.w	r3, [r3, #3]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	68f9      	ldr	r1, [r7, #12]
 8003fea:	483f      	ldr	r0, [pc, #252]	; (80040e8 <FOE_data+0x140>)
 8003fec:	f006 fbe4 	bl	800a7b8 <iprintf>
      FOE_abort (FOE_ERR_PACKETNO);
 8003ff0:	f248 0005 	movw	r0, #32773	; 0x8005
 8003ff4:	f7ff ff08 	bl	8003e08 <FOE_abort>
 8003ff8:	e06e      	b.n	80040d8 <FOE_data+0x130>
   }
   else if (data_len == 0)
 8003ffa:	8a7b      	ldrh	r3, [r7, #18]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10a      	bne.n	8004016 <FOE_data+0x6e>
   {
      DPRINT("FOE_data completed\n");
 8004000:	483a      	ldr	r0, [pc, #232]	; (80040ec <FOE_data+0x144>)
 8004002:	f006 fc4d 	bl	800a8a0 <puts>
      FOE_fclose ();
 8004006:	f7ff fe9d 	bl	8003d44 <FOE_fclose>
      res = FOE_send_ack ();
 800400a:	f7ff ff3d 	bl	8003e88 <FOE_send_ack>
 800400e:	6078      	str	r0, [r7, #4]
      FOE_init ();
 8004010:	f7ff fecc 	bl	8003dac <FOE_init>
 8004014:	e060      	b.n	80040d8 <FOE_data+0x130>
   }
   else if (FOEvar.fposition + data_len > FOEvar.fend)
 8004016:	4b32      	ldr	r3, [pc, #200]	; (80040e0 <FOE_data+0x138>)
 8004018:	f8d3 2007 	ldr.w	r2, [r3, #7]
 800401c:	8a7b      	ldrh	r3, [r7, #18]
 800401e:	441a      	add	r2, r3
 8004020:	4b2f      	ldr	r3, [pc, #188]	; (80040e0 <FOE_data+0x138>)
 8004022:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8004026:	429a      	cmp	r2, r3
 8004028:	d907      	bls.n	800403a <FOE_data+0x92>
   {
      DPRINT("FOE_data disk full\n");
 800402a:	4831      	ldr	r0, [pc, #196]	; (80040f0 <FOE_data+0x148>)
 800402c:	f006 fc38 	bl	800a8a0 <puts>
      FOE_abort (FOE_ERR_DISKFULL);
 8004030:	f248 0003 	movw	r0, #32771	; 0x8003
 8004034:	f7ff fee8 	bl	8003e08 <FOE_abort>
 8004038:	e04e      	b.n	80040d8 <FOE_data+0x130>
   }
   else
   {
      ncopied = FOE_fwrite (foembx->data, data_len);
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	330c      	adds	r3, #12
 800403e:	8a7a      	ldrh	r2, [r7, #18]
 8004040:	4611      	mov	r1, r2
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff fdfa 	bl	8003c3c <FOE_fwrite>
 8004048:	4603      	mov	r3, r0
 800404a:	817b      	strh	r3, [r7, #10]
      if (!ncopied)
 800404c:	897b      	ldrh	r3, [r7, #10]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d107      	bne.n	8004062 <FOE_data+0xba>
      {
         DPRINT("FOE_data no copied\n");
 8004052:	4828      	ldr	r0, [pc, #160]	; (80040f4 <FOE_data+0x14c>)
 8004054:	f006 fc24 	bl	800a8a0 <puts>
         FOE_abort (FOE_ERR_PROGERROR);
 8004058:	f248 000b 	movw	r0, #32779	; 0x800b
 800405c:	f7ff fed4 	bl	8003e08 <FOE_abort>
 8004060:	e03a      	b.n	80040d8 <FOE_data+0x130>
      }
      else if (data_len == ESC_FOE_DATA_SIZE)
 8004062:	8a7a      	ldrh	r2, [r7, #18]
 8004064:	4b24      	ldr	r3, [pc, #144]	; (80040f8 <FOE_data+0x150>)
 8004066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004068:	3b0c      	subs	r3, #12
 800406a:	429a      	cmp	r2, r3
 800406c:	d11b      	bne.n	80040a6 <FOE_data+0xfe>
      {
         DPRINT("FOE_data data_len == FOE_DATA_SIZE\n");
 800406e:	4823      	ldr	r0, [pc, #140]	; (80040fc <FOE_data+0x154>)
 8004070:	f006 fc16 	bl	800a8a0 <puts>
         if (ncopied != data_len)
 8004074:	897a      	ldrh	r2, [r7, #10]
 8004076:	8a7b      	ldrh	r3, [r7, #18]
 8004078:	429a      	cmp	r2, r3
 800407a:	d009      	beq.n	8004090 <FOE_data+0xe8>
         {
            DPRINT("FOE_data only %d of %d copied\n",ncopied, data_len);
 800407c:	897b      	ldrh	r3, [r7, #10]
 800407e:	8a7a      	ldrh	r2, [r7, #18]
 8004080:	4619      	mov	r1, r3
 8004082:	481f      	ldr	r0, [pc, #124]	; (8004100 <FOE_data+0x158>)
 8004084:	f006 fb98 	bl	800a7b8 <iprintf>
            FOE_abort (FOE_ERR_PROGERROR);
 8004088:	f248 000b 	movw	r0, #32779	; 0x800b
 800408c:	f7ff febc 	bl	8003e08 <FOE_abort>
         }
         res = FOE_send_ack ();
 8004090:	f7ff fefa 	bl	8003e88 <FOE_send_ack>
 8004094:	6078      	str	r0, [r7, #4]
         if (res)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d01d      	beq.n	80040d8 <FOE_data+0x130>
         {
            FOE_abort (res);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4618      	mov	r0, r3
 80040a0:	f7ff feb2 	bl	8003e08 <FOE_abort>
 80040a4:	e018      	b.n	80040d8 <FOE_data+0x130>
         }
      }
      else
      {
         if ((ncopied != data_len) || FOE_fclose ())
 80040a6:	897a      	ldrh	r2, [r7, #10]
 80040a8:	8a7b      	ldrh	r3, [r7, #18]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d104      	bne.n	80040b8 <FOE_data+0x110>
 80040ae:	f7ff fe49 	bl	8003d44 <FOE_fclose>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d007      	beq.n	80040c8 <FOE_data+0x120>
         {
            DPRINT("FOE_fclose failed to write extra buffer\n");
 80040b8:	4812      	ldr	r0, [pc, #72]	; (8004104 <FOE_data+0x15c>)
 80040ba:	f006 fbf1 	bl	800a8a0 <puts>
            FOE_abort (FOE_ERR_PROGERROR);
 80040be:	f248 000b 	movw	r0, #32779	; 0x800b
 80040c2:	f7ff fea1 	bl	8003e08 <FOE_abort>
         {
 80040c6:	e007      	b.n	80040d8 <FOE_data+0x130>
         }
         else
         {
            DPRINT("FOE_data completed\n");
 80040c8:	4808      	ldr	r0, [pc, #32]	; (80040ec <FOE_data+0x144>)
 80040ca:	f006 fbe9 	bl	800a8a0 <puts>
            res = FOE_send_ack ();
 80040ce:	f7ff fedb 	bl	8003e88 <FOE_send_ack>
 80040d2:	6078      	str	r0, [r7, #4]
            FOE_init ();
 80040d4:	f7ff fe6a 	bl	8003dac <FOE_init>
         }
      }
   }
}
 80040d8:	3718      	adds	r7, #24
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	20000160 	.word	0x20000160
 80040e4:	2000024c 	.word	0x2000024c
 80040e8:	0800b328 	.word	0x0800b328
 80040ec:	0800b368 	.word	0x0800b368
 80040f0:	0800b384 	.word	0x0800b384
 80040f4:	0800b3a0 	.word	0x0800b3a0
 80040f8:	20000180 	.word	0x20000180
 80040fc:	0800b3bc 	.word	0x0800b3bc
 8004100:	0800b3e8 	.word	0x0800b3e8
 8004104:	0800b410 	.word	0x0800b410

08004108 <FOE_error>:

/** FoE error requesthandler. Send an FOE Abort.
 *
 */
void FOE_error ()
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
   /* Master panic! abort the transfer. */
   FOE_abort (0);
 800410c:	2000      	movs	r0, #0
 800410e:	f7ff fe7b 	bl	8003e08 <FOE_abort>
}
 8004112:	bf00      	nop
 8004114:	bd80      	pop	{r7, pc}
	...

08004118 <ESC_foeprocess>:
 * data, distributing the mailboxes to appropriate FOE functions depending
 * on requested opcode.
 * On Error an FoE Error or FoE Abort will be sent.
 */
void ESC_foeprocess (void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
   _MBXh *mbh;
   _FOE *foembx;

   if (ESCvar.MBXrun == 0)
 800411e:	4b2c      	ldr	r3, [pc, #176]	; (80041d0 <ESC_foeprocess+0xb8>)
 8004120:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004124:	2b00      	cmp	r3, #0
 8004126:	d04f      	beq.n	80041c8 <ESC_foeprocess+0xb0>
   {
      return;
   }
   if (!ESCvar.xoe && (MBXcontrol[0].state == MBXstate_inclaim))
 8004128:	4b29      	ldr	r3, [pc, #164]	; (80041d0 <ESC_foeprocess+0xb8>)
 800412a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800412e:	2b00      	cmp	r3, #0
 8004130:	d110      	bne.n	8004154 <ESC_foeprocess+0x3c>
 8004132:	4b28      	ldr	r3, [pc, #160]	; (80041d4 <ESC_foeprocess+0xbc>)
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d10c      	bne.n	8004154 <ESC_foeprocess+0x3c>
   {
      mbh = (_MBXh *) &MBX[0];
 800413a:	4b27      	ldr	r3, [pc, #156]	; (80041d8 <ESC_foeprocess+0xc0>)
 800413c:	607b      	str	r3, [r7, #4]
      if (mbh->mbxtype == MBXFOE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	795b      	ldrb	r3, [r3, #5]
 8004142:	f003 030f 	and.w	r3, r3, #15
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b04      	cmp	r3, #4
 800414a:	d103      	bne.n	8004154 <ESC_foeprocess+0x3c>
      {
         ESCvar.xoe = MBXFOE;
 800414c:	4b20      	ldr	r3, [pc, #128]	; (80041d0 <ESC_foeprocess+0xb8>)
 800414e:	2204      	movs	r2, #4
 8004150:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
      }
   }
   if (ESCvar.xoe == MBXFOE)
 8004154:	4b1e      	ldr	r3, [pc, #120]	; (80041d0 <ESC_foeprocess+0xb8>)
 8004156:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800415a:	2b04      	cmp	r3, #4
 800415c:	d135      	bne.n	80041ca <ESC_foeprocess+0xb2>
   {
      foembx = (_FOE *) &MBX[0];
 800415e:	4b1e      	ldr	r3, [pc, #120]	; (80041d8 <ESC_foeprocess+0xc0>)
 8004160:	603b      	str	r3, [r7, #0]
      /* Verify the size of the file data. */
      if (etohs (foembx->mbxheader.length) < ESC_FOEHSIZE)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	b29b      	uxth	r3, r3
 8004168:	2b05      	cmp	r3, #5
 800416a:	d803      	bhi.n	8004174 <ESC_foeprocess+0x5c>
      {
         FOE_abort (MBXERR_SIZETOOSHORT);
 800416c:	2006      	movs	r0, #6
 800416e:	f7ff fe4b 	bl	8003e08 <FOE_abort>
 8004172:	e021      	b.n	80041b8 <ESC_foeprocess+0xa0>
      }
      else
      {
         switch (foembx->foeheader.opcode)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	799b      	ldrb	r3, [r3, #6]
 8004178:	2b03      	cmp	r3, #3
 800417a:	d009      	beq.n	8004190 <ESC_foeprocess+0x78>
 800417c:	2b05      	cmp	r3, #5
 800417e:	d00d      	beq.n	800419c <ESC_foeprocess+0x84>
 8004180:	2b02      	cmp	r3, #2
 8004182:	d111      	bne.n	80041a8 <ESC_foeprocess+0x90>
         {
            case FOE_OP_WRQ:
            {
               DPRINT("FOE_OP_WRQ\n");
 8004184:	4815      	ldr	r0, [pc, #84]	; (80041dc <ESC_foeprocess+0xc4>)
 8004186:	f006 fb8b 	bl	800a8a0 <puts>
               FOE_write ();
 800418a:	f7ff fec9 	bl	8003f20 <FOE_write>
               break;
 800418e:	e013      	b.n	80041b8 <ESC_foeprocess+0xa0>
            }
            case FOE_OP_DATA:
            {
               DPRINT("FOE_OP_DATA\n");
 8004190:	4813      	ldr	r0, [pc, #76]	; (80041e0 <ESC_foeprocess+0xc8>)
 8004192:	f006 fb85 	bl	800a8a0 <puts>
               FOE_data ();
 8004196:	f7ff ff07 	bl	8003fa8 <FOE_data>
               break;
 800419a:	e00d      	b.n	80041b8 <ESC_foeprocess+0xa0>
               break;
            }
#endif
            case FOE_OP_ERR:
            {
               DPRINT("FOE_OP_ERR\n");
 800419c:	4811      	ldr	r0, [pc, #68]	; (80041e4 <ESC_foeprocess+0xcc>)
 800419e:	f006 fb7f 	bl	800a8a0 <puts>
               FOE_error ();
 80041a2:	f7ff ffb1 	bl	8004108 <FOE_error>
               break;
 80041a6:	e007      	b.n	80041b8 <ESC_foeprocess+0xa0>
            }
            default:
            {
               DPRINT("FOE_ERR_NOTDEFINED\n");
 80041a8:	480f      	ldr	r0, [pc, #60]	; (80041e8 <ESC_foeprocess+0xd0>)
 80041aa:	f006 fb79 	bl	800a8a0 <puts>
               FOE_abort (FOE_ERR_NOTDEFINED);
 80041ae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80041b2:	f7ff fe29 	bl	8003e08 <FOE_abort>
               break;
 80041b6:	bf00      	nop
            }
         }
      }
      MBXcontrol[0].state = MBXstate_idle;
 80041b8:	4b06      	ldr	r3, [pc, #24]	; (80041d4 <ESC_foeprocess+0xbc>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	701a      	strb	r2, [r3, #0]
      ESCvar.xoe = 0;
 80041be:	4b04      	ldr	r3, [pc, #16]	; (80041d0 <ESC_foeprocess+0xb8>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80041c6:	e000      	b.n	80041ca <ESC_foeprocess+0xb2>
      return;
 80041c8:	bf00      	nop
   }
}
 80041ca:	3708      	adds	r7, #8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	20000180 	.word	0x20000180
 80041d4:	20000414 	.word	0x20000414
 80041d8:	2000024c 	.word	0x2000024c
 80041dc:	0800b440 	.word	0x0800b440
 80041e0:	0800b454 	.word	0x0800b454
 80041e4:	0800b468 	.word	0x0800b468
 80041e8:	0800b47c 	.word	0x0800b47c

080041ec <lan9252_write_32>:

static int lan9252 = -1;

/* lan9252 singel write */
static void lan9252_write_32 (uint16_t address, uint32_t val)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	4603      	mov	r3, r0
 80041f4:	6039      	str	r1, [r7, #0]
 80041f6:	80fb      	strh	r3, [r7, #6]
    uint8_t data[7];

    data[0] = ESC_CMD_SERIAL_WRITE;
 80041f8:	2302      	movs	r3, #2
 80041fa:	723b      	strb	r3, [r7, #8]
    data[1] = ((address >> 8) & 0xFF);
 80041fc:	88fb      	ldrh	r3, [r7, #6]
 80041fe:	0a1b      	lsrs	r3, r3, #8
 8004200:	b29b      	uxth	r3, r3
 8004202:	b2db      	uxtb	r3, r3
 8004204:	727b      	strb	r3, [r7, #9]
    data[2] = (address & 0xFF);
 8004206:	88fb      	ldrh	r3, [r7, #6]
 8004208:	b2db      	uxtb	r3, r3
 800420a:	72bb      	strb	r3, [r7, #10]
    data[3] = (val & 0xFF);
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	b2db      	uxtb	r3, r3
 8004210:	72fb      	strb	r3, [r7, #11]
    data[4] = ((val >> 8) & 0xFF);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	0a1b      	lsrs	r3, r3, #8
 8004216:	b2db      	uxtb	r3, r3
 8004218:	733b      	strb	r3, [r7, #12]
    data[5] = ((val >> 16) & 0xFF);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	0c1b      	lsrs	r3, r3, #16
 800421e:	b2db      	uxtb	r3, r3
 8004220:	737b      	strb	r3, [r7, #13]
    data[6] = ((val >> 24) & 0xFF);
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	0e1b      	lsrs	r3, r3, #24
 8004226:	b2db      	uxtb	r3, r3
 8004228:	73bb      	strb	r3, [r7, #14]

    /* Select device. */
    spi_select (lan9252);
 800422a:	4b0c      	ldr	r3, [pc, #48]	; (800425c <lan9252_write_32+0x70>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	b25b      	sxtb	r3, r3
 8004230:	4618      	mov	r0, r3
 8004232:	f000 faf4 	bl	800481e <spi_select>
    /* Write data */
    write (lan9252, data, sizeof(data));
 8004236:	4b09      	ldr	r3, [pc, #36]	; (800425c <lan9252_write_32+0x70>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	b25b      	sxtb	r3, r3
 800423c:	f107 0108 	add.w	r1, r7, #8
 8004240:	2207      	movs	r2, #7
 8004242:	4618      	mov	r0, r3
 8004244:	f000 fb0a 	bl	800485c <write>
    /* Un-select device. */
    spi_unselect (lan9252);
 8004248:	4b04      	ldr	r3, [pc, #16]	; (800425c <lan9252_write_32+0x70>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	b25b      	sxtb	r3, r3
 800424e:	4618      	mov	r0, r3
 8004250:	f000 faf4 	bl	800483c <spi_unselect>
}
 8004254:	bf00      	nop
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	20000020 	.word	0x20000020

08004260 <lan9252_read_32>:

/* lan9252 single read */
static uint32_t lan9252_read_32 (uint32_t address)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
   uint8_t data[4];
   uint8_t result[4];

   data[0] = ESC_CMD_FAST_READ;
 8004268:	230b      	movs	r3, #11
 800426a:	733b      	strb	r3, [r7, #12]
   data[1] = ((address >> 8) & 0xFF);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	0a1b      	lsrs	r3, r3, #8
 8004270:	b2db      	uxtb	r3, r3
 8004272:	737b      	strb	r3, [r7, #13]
   data[2] = (address & 0xFF);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	b2db      	uxtb	r3, r3
 8004278:	73bb      	strb	r3, [r7, #14]
   data[3] = ESC_CMD_FAST_READ_DUMMY;
 800427a:	2301      	movs	r3, #1
 800427c:	73fb      	strb	r3, [r7, #15]

   /* Select device. */
   spi_select (lan9252);
 800427e:	4b16      	ldr	r3, [pc, #88]	; (80042d8 <lan9252_read_32+0x78>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	b25b      	sxtb	r3, r3
 8004284:	4618      	mov	r0, r3
 8004286:	f000 faca 	bl	800481e <spi_select>
   /* Read data */
   write (lan9252, data, sizeof(data));
 800428a:	4b13      	ldr	r3, [pc, #76]	; (80042d8 <lan9252_read_32+0x78>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	b25b      	sxtb	r3, r3
 8004290:	f107 010c 	add.w	r1, r7, #12
 8004294:	2204      	movs	r2, #4
 8004296:	4618      	mov	r0, r3
 8004298:	f000 fae0 	bl	800485c <write>
   read (lan9252, result, sizeof(result));
 800429c:	4b0e      	ldr	r3, [pc, #56]	; (80042d8 <lan9252_read_32+0x78>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	b25b      	sxtb	r3, r3
 80042a2:	f107 0108 	add.w	r1, r7, #8
 80042a6:	2204      	movs	r2, #4
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 faed 	bl	8004888 <read>
   /* Un-select device. */
   spi_unselect (lan9252);
 80042ae:	4b0a      	ldr	r3, [pc, #40]	; (80042d8 <lan9252_read_32+0x78>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	b25b      	sxtb	r3, r3
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 fac1 	bl	800483c <spi_unselect>

   return ((result[3] << 24) |
 80042ba:	7afb      	ldrb	r3, [r7, #11]
 80042bc:	061a      	lsls	r2, r3, #24
           (result[2] << 16) |
 80042be:	7abb      	ldrb	r3, [r7, #10]
 80042c0:	041b      	lsls	r3, r3, #16
   return ((result[3] << 24) |
 80042c2:	431a      	orrs	r2, r3
           (result[1] << 8) |
 80042c4:	7a7b      	ldrb	r3, [r7, #9]
 80042c6:	021b      	lsls	r3, r3, #8
           (result[2] << 16) |
 80042c8:	4313      	orrs	r3, r2
            result[0]);
 80042ca:	7a3a      	ldrb	r2, [r7, #8]
           (result[1] << 8) |
 80042cc:	4313      	orrs	r3, r2
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	20000020 	.word	0x20000020

080042dc <ESC_read_csr>:

/* ESC read CSR function */
static void ESC_read_csr (uint16_t address, void *buf, uint16_t len)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	4603      	mov	r3, r0
 80042e4:	6039      	str	r1, [r7, #0]
 80042e6:	80fb      	strh	r3, [r7, #6]
 80042e8:	4613      	mov	r3, r2
 80042ea:	80bb      	strh	r3, [r7, #4]
   uint32_t value;

   value = (ESC_CSR_CMD_READ | ESC_CSR_CMD_SIZE(len) | address);
 80042ec:	88bb      	ldrh	r3, [r7, #4]
 80042ee:	041b      	lsls	r3, r3, #16
 80042f0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
 80042f4:	88fb      	ldrh	r3, [r7, #6]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]
   lan9252_write_32(ESC_CSR_CMD_REG, value);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4619      	mov	r1, r3
 80042fe:	f44f 7041 	mov.w	r0, #772	; 0x304
 8004302:	f7ff ff73 	bl	80041ec <lan9252_write_32>

   do
   {
      value = lan9252_read_32(ESC_CSR_CMD_REG);
 8004306:	f44f 7041 	mov.w	r0, #772	; 0x304
 800430a:	f7ff ffa9 	bl	8004260 <lan9252_read_32>
 800430e:	4603      	mov	r3, r0
 8004310:	60fb      	str	r3, [r7, #12]
   } while(value & ESC_CSR_CMD_BUSY);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2b00      	cmp	r3, #0
 8004316:	dbf6      	blt.n	8004306 <ESC_read_csr+0x2a>

   value = lan9252_read_32(ESC_CSR_DATA_REG);
 8004318:	f44f 7040 	mov.w	r0, #768	; 0x300
 800431c:	f7ff ffa0 	bl	8004260 <lan9252_read_32>
 8004320:	4603      	mov	r3, r0
 8004322:	60fb      	str	r3, [r7, #12]
   memcpy(buf, (uint8_t *)&value, len);
 8004324:	88ba      	ldrh	r2, [r7, #4]
 8004326:	f107 030c 	add.w	r3, r7, #12
 800432a:	4619      	mov	r1, r3
 800432c:	6838      	ldr	r0, [r7, #0]
 800432e:	f005 ff69 	bl	800a204 <memcpy>
}
 8004332:	bf00      	nop
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <ESC_write_csr>:

/* ESC write CSR function */
static void ESC_write_csr (uint16_t address, void *buf, uint16_t len)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b084      	sub	sp, #16
 800433e:	af00      	add	r7, sp, #0
 8004340:	4603      	mov	r3, r0
 8004342:	6039      	str	r1, [r7, #0]
 8004344:	80fb      	strh	r3, [r7, #6]
 8004346:	4613      	mov	r3, r2
 8004348:	80bb      	strh	r3, [r7, #4]
   uint32_t value;

   memcpy((uint8_t*)&value, buf,len);
 800434a:	88ba      	ldrh	r2, [r7, #4]
 800434c:	f107 030c 	add.w	r3, r7, #12
 8004350:	6839      	ldr	r1, [r7, #0]
 8004352:	4618      	mov	r0, r3
 8004354:	f005 ff56 	bl	800a204 <memcpy>
   lan9252_write_32(ESC_CSR_DATA_REG, value);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4619      	mov	r1, r3
 800435c:	f44f 7040 	mov.w	r0, #768	; 0x300
 8004360:	f7ff ff44 	bl	80041ec <lan9252_write_32>
   value = (ESC_CSR_CMD_WRITE | ESC_CSR_CMD_SIZE(len) | address);
 8004364:	88bb      	ldrh	r3, [r7, #4]
 8004366:	041b      	lsls	r3, r3, #16
 8004368:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800436c:	88fb      	ldrh	r3, [r7, #6]
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]
   lan9252_write_32(ESC_CSR_CMD_REG, value);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4619      	mov	r1, r3
 8004376:	f44f 7041 	mov.w	r0, #772	; 0x304
 800437a:	f7ff ff37 	bl	80041ec <lan9252_write_32>

   do
   {
      value = lan9252_read_32(ESC_CSR_CMD_REG);
 800437e:	f44f 7041 	mov.w	r0, #772	; 0x304
 8004382:	f7ff ff6d 	bl	8004260 <lan9252_read_32>
 8004386:	4603      	mov	r3, r0
 8004388:	60fb      	str	r3, [r7, #12]
   } while(value & ESC_CSR_CMD_BUSY);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2b00      	cmp	r3, #0
 800438e:	dbf6      	blt.n	800437e <ESC_write_csr+0x44>
}
 8004390:	bf00      	nop
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <ESC_read_pram>:

/* ESC read process data ram function */
static void ESC_read_pram (uint16_t address, void *buf, uint16_t len)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b088      	sub	sp, #32
 800439c:	af00      	add	r7, sp, #0
 800439e:	4603      	mov	r3, r0
 80043a0:	6039      	str	r1, [r7, #0]
 80043a2:	80fb      	strh	r3, [r7, #6]
 80043a4:	4613      	mov	r3, r2
 80043a6:	80bb      	strh	r3, [r7, #4]
   uint32_t value;
   uint8_t * temp_buf = buf;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	61bb      	str	r3, [r7, #24]
   uint16_t byte_offset = 0;
 80043ac:	2300      	movs	r3, #0
 80043ae:	83fb      	strh	r3, [r7, #30]
   uint8_t fifo_cnt, first_byte_position, temp_len, data[4];

   value = ESC_PRAM_CMD_ABORT;
 80043b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80043b4:	613b      	str	r3, [r7, #16]
   lan9252_write_32(ESC_PRAM_RD_CMD_REG, value);
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	4619      	mov	r1, r3
 80043ba:	f44f 7043 	mov.w	r0, #780	; 0x30c
 80043be:	f7ff ff15 	bl	80041ec <lan9252_write_32>

   do
   {
      value = lan9252_read_32(ESC_PRAM_RD_CMD_REG);
 80043c2:	f44f 7043 	mov.w	r0, #780	; 0x30c
 80043c6:	f7ff ff4b 	bl	8004260 <lan9252_read_32>
 80043ca:	4603      	mov	r3, r0
 80043cc:	613b      	str	r3, [r7, #16]
   }while(value & ESC_PRAM_CMD_BUSY);
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	dbf6      	blt.n	80043c2 <ESC_read_pram+0x2a>

   value = ESC_PRAM_SIZE(len) | ESC_PRAM_ADDR(address);
 80043d4:	88bb      	ldrh	r3, [r7, #4]
 80043d6:	041a      	lsls	r2, r3, #16
 80043d8:	88fb      	ldrh	r3, [r7, #6]
 80043da:	4313      	orrs	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]
   lan9252_write_32(ESC_PRAM_RD_ADDR_LEN_REG, value);
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	4619      	mov	r1, r3
 80043e2:	f44f 7042 	mov.w	r0, #776	; 0x308
 80043e6:	f7ff ff01 	bl	80041ec <lan9252_write_32>

   value = ESC_PRAM_CMD_BUSY;
 80043ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80043ee:	613b      	str	r3, [r7, #16]
   lan9252_write_32(ESC_PRAM_RD_CMD_REG, value);
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	4619      	mov	r1, r3
 80043f4:	f44f 7043 	mov.w	r0, #780	; 0x30c
 80043f8:	f7ff fef8 	bl	80041ec <lan9252_write_32>

   do
   {
      value = lan9252_read_32(ESC_PRAM_RD_CMD_REG);
 80043fc:	f44f 7043 	mov.w	r0, #780	; 0x30c
 8004400:	f7ff ff2e 	bl	8004260 <lan9252_read_32>
 8004404:	4603      	mov	r3, r0
 8004406:	613b      	str	r3, [r7, #16]
   }while((value & ESC_PRAM_CMD_AVAIL) == 0);
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0f4      	beq.n	80043fc <ESC_read_pram+0x64>

   /* Fifo count */
   fifo_cnt = ESC_PRAM_CMD_CNT(value);
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	0a1b      	lsrs	r3, r3, #8
 8004416:	b2db      	uxtb	r3, r3
 8004418:	f003 031f 	and.w	r3, r3, #31
 800441c:	777b      	strb	r3, [r7, #29]

   /* Read first value from FIFO */
   value = lan9252_read_32(ESC_PRAM_RD_FIFO_REG);
 800441e:	2000      	movs	r0, #0
 8004420:	f7ff ff1e 	bl	8004260 <lan9252_read_32>
 8004424:	4603      	mov	r3, r0
 8004426:	613b      	str	r3, [r7, #16]
   fifo_cnt--;
 8004428:	7f7b      	ldrb	r3, [r7, #29]
 800442a:	3b01      	subs	r3, #1
 800442c:	777b      	strb	r3, [r7, #29]

   /* Find out first byte position and adjust the copy from that
    * according to LAN9252 datasheet and MicroChip SDK code
    */
   first_byte_position = (address & 0x03);
 800442e:	88fb      	ldrh	r3, [r7, #6]
 8004430:	b2db      	uxtb	r3, r3
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	75fb      	strb	r3, [r7, #23]
   temp_len = ((4 - first_byte_position) > len) ? len : (4 - first_byte_position);
 8004438:	7dfb      	ldrb	r3, [r7, #23]
 800443a:	f1c3 0204 	rsb	r2, r3, #4
 800443e:	88bb      	ldrh	r3, [r7, #4]
 8004440:	4293      	cmp	r3, r2
 8004442:	bfa8      	it	ge
 8004444:	4613      	movge	r3, r2
 8004446:	75bb      	strb	r3, [r7, #22]

   memcpy(temp_buf ,((uint8_t *)&value + first_byte_position), temp_len);
 8004448:	7dfb      	ldrb	r3, [r7, #23]
 800444a:	f107 0210 	add.w	r2, r7, #16
 800444e:	4413      	add	r3, r2
 8004450:	7dba      	ldrb	r2, [r7, #22]
 8004452:	4619      	mov	r1, r3
 8004454:	69b8      	ldr	r0, [r7, #24]
 8004456:	f005 fed5 	bl	800a204 <memcpy>
   len -= temp_len;
 800445a:	7dbb      	ldrb	r3, [r7, #22]
 800445c:	b29b      	uxth	r3, r3
 800445e:	88ba      	ldrh	r2, [r7, #4]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	80bb      	strh	r3, [r7, #4]
   byte_offset += temp_len;
 8004464:	7dbb      	ldrb	r3, [r7, #22]
 8004466:	b29a      	uxth	r2, r3
 8004468:	8bfb      	ldrh	r3, [r7, #30]
 800446a:	4413      	add	r3, r2
 800446c:	83fb      	strh	r3, [r7, #30]

   /* Select device. */
   spi_select (lan9252);
 800446e:	4b21      	ldr	r3, [pc, #132]	; (80044f4 <ESC_read_pram+0x15c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	b25b      	sxtb	r3, r3
 8004474:	4618      	mov	r0, r3
 8004476:	f000 f9d2 	bl	800481e <spi_select>
   /* Send command and address for fifo read */
   data[0] = ESC_CMD_FAST_READ;
 800447a:	230b      	movs	r3, #11
 800447c:	733b      	strb	r3, [r7, #12]
   data[1] = ((ESC_PRAM_RD_FIFO_REG >> 8) & 0xFF);
 800447e:	2300      	movs	r3, #0
 8004480:	737b      	strb	r3, [r7, #13]
   data[2] = (ESC_PRAM_RD_FIFO_REG & 0xFF);
 8004482:	2300      	movs	r3, #0
 8004484:	73bb      	strb	r3, [r7, #14]
   data[3] = ESC_CMD_FAST_READ_DUMMY;
 8004486:	2301      	movs	r3, #1
 8004488:	73fb      	strb	r3, [r7, #15]
   write (lan9252, data, sizeof(data));
 800448a:	4b1a      	ldr	r3, [pc, #104]	; (80044f4 <ESC_read_pram+0x15c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	b25b      	sxtb	r3, r3
 8004490:	f107 010c 	add.w	r1, r7, #12
 8004494:	2204      	movs	r2, #4
 8004496:	4618      	mov	r0, r3
 8004498:	f000 f9e0 	bl	800485c <write>

   /* Continue reading until we have read len */
   while(len > 0)
 800449c:	e01c      	b.n	80044d8 <ESC_read_pram+0x140>
   {
      temp_len = (len > 4) ? 4: len;
 800449e:	88bb      	ldrh	r3, [r7, #4]
 80044a0:	2b04      	cmp	r3, #4
 80044a2:	bf28      	it	cs
 80044a4:	2304      	movcs	r3, #4
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	75bb      	strb	r3, [r7, #22]
      /* Always read 4 byte */
      read (lan9252, (temp_buf + byte_offset), sizeof(uint32_t));
 80044aa:	4b12      	ldr	r3, [pc, #72]	; (80044f4 <ESC_read_pram+0x15c>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	b258      	sxtb	r0, r3
 80044b0:	8bfb      	ldrh	r3, [r7, #30]
 80044b2:	69ba      	ldr	r2, [r7, #24]
 80044b4:	4413      	add	r3, r2
 80044b6:	2204      	movs	r2, #4
 80044b8:	4619      	mov	r1, r3
 80044ba:	f000 f9e5 	bl	8004888 <read>

      fifo_cnt--;
 80044be:	7f7b      	ldrb	r3, [r7, #29]
 80044c0:	3b01      	subs	r3, #1
 80044c2:	777b      	strb	r3, [r7, #29]
      len -= temp_len;
 80044c4:	7dbb      	ldrb	r3, [r7, #22]
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	88ba      	ldrh	r2, [r7, #4]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	80bb      	strh	r3, [r7, #4]
      byte_offset += temp_len;
 80044ce:	7dbb      	ldrb	r3, [r7, #22]
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	8bfb      	ldrh	r3, [r7, #30]
 80044d4:	4413      	add	r3, r2
 80044d6:	83fb      	strh	r3, [r7, #30]
   while(len > 0)
 80044d8:	88bb      	ldrh	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1df      	bne.n	800449e <ESC_read_pram+0x106>
   }
   /* Un-select device. */
   spi_unselect (lan9252);
 80044de:	4b05      	ldr	r3, [pc, #20]	; (80044f4 <ESC_read_pram+0x15c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	b25b      	sxtb	r3, r3
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 f9a9 	bl	800483c <spi_unselect>
}
 80044ea:	bf00      	nop
 80044ec:	3720      	adds	r7, #32
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	20000020 	.word	0x20000020

080044f8 <ESC_write_pram>:

/* ESC write process data ram function */
static void ESC_write_pram (uint16_t address, void *buf, uint16_t len)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b088      	sub	sp, #32
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	4603      	mov	r3, r0
 8004500:	6039      	str	r1, [r7, #0]
 8004502:	80fb      	strh	r3, [r7, #6]
 8004504:	4613      	mov	r3, r2
 8004506:	80bb      	strh	r3, [r7, #4]
   uint32_t value;
   uint8_t * temp_buf = buf;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	61bb      	str	r3, [r7, #24]
   uint16_t byte_offset = 0;
 800450c:	2300      	movs	r3, #0
 800450e:	83fb      	strh	r3, [r7, #30]
   uint8_t fifo_cnt, first_byte_position, temp_len, data[3];

   value = ESC_PRAM_CMD_ABORT;
 8004510:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004514:	613b      	str	r3, [r7, #16]
   lan9252_write_32(ESC_PRAM_WR_CMD_REG, value);
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	4619      	mov	r1, r3
 800451a:	f44f 7045 	mov.w	r0, #788	; 0x314
 800451e:	f7ff fe65 	bl	80041ec <lan9252_write_32>

   do
   {
      value = lan9252_read_32(ESC_PRAM_WR_CMD_REG);
 8004522:	f44f 7045 	mov.w	r0, #788	; 0x314
 8004526:	f7ff fe9b 	bl	8004260 <lan9252_read_32>
 800452a:	4603      	mov	r3, r0
 800452c:	613b      	str	r3, [r7, #16]
   }while(value & ESC_PRAM_CMD_BUSY);
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	2b00      	cmp	r3, #0
 8004532:	dbf6      	blt.n	8004522 <ESC_write_pram+0x2a>

   value = ESC_PRAM_SIZE(len) | ESC_PRAM_ADDR(address);
 8004534:	88bb      	ldrh	r3, [r7, #4]
 8004536:	041a      	lsls	r2, r3, #16
 8004538:	88fb      	ldrh	r3, [r7, #6]
 800453a:	4313      	orrs	r3, r2
 800453c:	613b      	str	r3, [r7, #16]
   lan9252_write_32(ESC_PRAM_WR_ADDR_LEN_REG, value);
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	4619      	mov	r1, r3
 8004542:	f44f 7044 	mov.w	r0, #784	; 0x310
 8004546:	f7ff fe51 	bl	80041ec <lan9252_write_32>

   value = ESC_PRAM_CMD_BUSY;
 800454a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800454e:	613b      	str	r3, [r7, #16]
   lan9252_write_32(ESC_PRAM_WR_CMD_REG, value);
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	4619      	mov	r1, r3
 8004554:	f44f 7045 	mov.w	r0, #788	; 0x314
 8004558:	f7ff fe48 	bl	80041ec <lan9252_write_32>

   do
   {
      value = lan9252_read_32(ESC_PRAM_WR_CMD_REG);
 800455c:	f44f 7045 	mov.w	r0, #788	; 0x314
 8004560:	f7ff fe7e 	bl	8004260 <lan9252_read_32>
 8004564:	4603      	mov	r3, r0
 8004566:	613b      	str	r3, [r7, #16]
   }while((value & ESC_PRAM_CMD_AVAIL) == 0);
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d0f4      	beq.n	800455c <ESC_write_pram+0x64>

   /* Fifo count */
   fifo_cnt = ESC_PRAM_CMD_CNT(value);
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	0a1b      	lsrs	r3, r3, #8
 8004576:	b2db      	uxtb	r3, r3
 8004578:	f003 031f 	and.w	r3, r3, #31
 800457c:	777b      	strb	r3, [r7, #29]

   /* Find out first byte position and adjust the copy from that
    * according to LAN9252 datasheet
    */
   first_byte_position = (address & 0x03);
 800457e:	88fb      	ldrh	r3, [r7, #6]
 8004580:	b2db      	uxtb	r3, r3
 8004582:	f003 0303 	and.w	r3, r3, #3
 8004586:	75fb      	strb	r3, [r7, #23]
   temp_len = ((4 - first_byte_position) > len) ? len : (4 - first_byte_position);
 8004588:	7dfb      	ldrb	r3, [r7, #23]
 800458a:	f1c3 0204 	rsb	r2, r3, #4
 800458e:	88bb      	ldrh	r3, [r7, #4]
 8004590:	4293      	cmp	r3, r2
 8004592:	bfa8      	it	ge
 8004594:	4613      	movge	r3, r2
 8004596:	75bb      	strb	r3, [r7, #22]

   memcpy(((uint8_t *)&value + first_byte_position), temp_buf, temp_len);
 8004598:	7dfb      	ldrb	r3, [r7, #23]
 800459a:	f107 0210 	add.w	r2, r7, #16
 800459e:	4413      	add	r3, r2
 80045a0:	7dba      	ldrb	r2, [r7, #22]
 80045a2:	69b9      	ldr	r1, [r7, #24]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f005 fe2d 	bl	800a204 <memcpy>

   /* Write first value from FIFO */
   lan9252_write_32(ESC_PRAM_WR_FIFO_REG, value);
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	4619      	mov	r1, r3
 80045ae:	2020      	movs	r0, #32
 80045b0:	f7ff fe1c 	bl	80041ec <lan9252_write_32>

   len -= temp_len;
 80045b4:	7dbb      	ldrb	r3, [r7, #22]
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	88ba      	ldrh	r2, [r7, #4]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	80bb      	strh	r3, [r7, #4]
   byte_offset += temp_len;
 80045be:	7dbb      	ldrb	r3, [r7, #22]
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	8bfb      	ldrh	r3, [r7, #30]
 80045c4:	4413      	add	r3, r2
 80045c6:	83fb      	strh	r3, [r7, #30]
   fifo_cnt--;
 80045c8:	7f7b      	ldrb	r3, [r7, #29]
 80045ca:	3b01      	subs	r3, #1
 80045cc:	777b      	strb	r3, [r7, #29]

   /* Select device. */
   spi_select (lan9252);
 80045ce:	4b25      	ldr	r3, [pc, #148]	; (8004664 <ESC_write_pram+0x16c>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	b25b      	sxtb	r3, r3
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 f922 	bl	800481e <spi_select>
   /* Send command and address for incrementing write */
   data[0] = ESC_CMD_SERIAL_WRITE;
 80045da:	2302      	movs	r3, #2
 80045dc:	733b      	strb	r3, [r7, #12]
   data[1] = ((ESC_PRAM_WR_FIFO_REG >> 8) & 0xFF);
 80045de:	2300      	movs	r3, #0
 80045e0:	737b      	strb	r3, [r7, #13]
   data[2] = (ESC_PRAM_WR_FIFO_REG & 0xFF);
 80045e2:	2320      	movs	r3, #32
 80045e4:	73bb      	strb	r3, [r7, #14]
   write (lan9252, data, sizeof(data));
 80045e6:	4b1f      	ldr	r3, [pc, #124]	; (8004664 <ESC_write_pram+0x16c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	b25b      	sxtb	r3, r3
 80045ec:	f107 010c 	add.w	r1, r7, #12
 80045f0:	2203      	movs	r2, #3
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 f932 	bl	800485c <write>

   /* Continue reading until we have read len */
   while(len > 0)
 80045f8:	e026      	b.n	8004648 <ESC_write_pram+0x150>
   {
      temp_len = (len > 4) ? 4 : len;
 80045fa:	88bb      	ldrh	r3, [r7, #4]
 80045fc:	2b04      	cmp	r3, #4
 80045fe:	bf28      	it	cs
 8004600:	2304      	movcs	r3, #4
 8004602:	b29b      	uxth	r3, r3
 8004604:	75bb      	strb	r3, [r7, #22]
      value = 0;
 8004606:	2300      	movs	r3, #0
 8004608:	613b      	str	r3, [r7, #16]
      memcpy((uint8_t *)&value, (temp_buf + byte_offset), temp_len);
 800460a:	8bfb      	ldrh	r3, [r7, #30]
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	18d1      	adds	r1, r2, r3
 8004610:	7dba      	ldrb	r2, [r7, #22]
 8004612:	f107 0310 	add.w	r3, r7, #16
 8004616:	4618      	mov	r0, r3
 8004618:	f005 fdf4 	bl	800a204 <memcpy>
      /* Always write 4 byte */
      write (lan9252, (void *)&value, sizeof(value));
 800461c:	4b11      	ldr	r3, [pc, #68]	; (8004664 <ESC_write_pram+0x16c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	b25b      	sxtb	r3, r3
 8004622:	f107 0110 	add.w	r1, r7, #16
 8004626:	2204      	movs	r2, #4
 8004628:	4618      	mov	r0, r3
 800462a:	f000 f917 	bl	800485c <write>

      fifo_cnt--;
 800462e:	7f7b      	ldrb	r3, [r7, #29]
 8004630:	3b01      	subs	r3, #1
 8004632:	777b      	strb	r3, [r7, #29]
      len -= temp_len;
 8004634:	7dbb      	ldrb	r3, [r7, #22]
 8004636:	b29b      	uxth	r3, r3
 8004638:	88ba      	ldrh	r2, [r7, #4]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	80bb      	strh	r3, [r7, #4]
      byte_offset += temp_len;
 800463e:	7dbb      	ldrb	r3, [r7, #22]
 8004640:	b29a      	uxth	r2, r3
 8004642:	8bfb      	ldrh	r3, [r7, #30]
 8004644:	4413      	add	r3, r2
 8004646:	83fb      	strh	r3, [r7, #30]
   while(len > 0)
 8004648:	88bb      	ldrh	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1d5      	bne.n	80045fa <ESC_write_pram+0x102>
   }
   /* Un-select device. */
   spi_unselect (lan9252);
 800464e:	4b05      	ldr	r3, [pc, #20]	; (8004664 <ESC_write_pram+0x16c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	b25b      	sxtb	r3, r3
 8004654:	4618      	mov	r0, r3
 8004656:	f000 f8f1 	bl	800483c <spi_unselect>
}
 800465a:	bf00      	nop
 800465c:	3720      	adds	r7, #32
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	20000020 	.word	0x20000020

08004668 <ESC_read>:
 * @param[in]   address     = address of ESC register to read
 * @param[out]  buf         = pointer to buffer to read in
 * @param[in]   len         = number of bytes to read
 */
void ESC_read (uint16_t address, void *buf, uint16_t len)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	4603      	mov	r3, r0
 8004670:	6039      	str	r1, [r7, #0]
 8004672:	80fb      	strh	r3, [r7, #6]
 8004674:	4613      	mov	r3, r2
 8004676:	80bb      	strh	r3, [r7, #4]
   /* Select Read function depending on address, process data ram or not */
   if (address >= 0x1000)
 8004678:	88fb      	ldrh	r3, [r7, #6]
 800467a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800467e:	d306      	bcc.n	800468e <ESC_read+0x26>
   {
      ESC_read_pram(address, buf, len);
 8004680:	88ba      	ldrh	r2, [r7, #4]
 8004682:	88fb      	ldrh	r3, [r7, #6]
 8004684:	6839      	ldr	r1, [r7, #0]
 8004686:	4618      	mov	r0, r3
 8004688:	f7ff fe86 	bl	8004398 <ESC_read_pram>
 800468c:	e038      	b.n	8004700 <ESC_read+0x98>
   }
   else
   {
      uint16_t size;
      uint8_t *temp_buf = (uint8_t *)buf;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	60bb      	str	r3, [r7, #8]

      while(len > 0)
 8004692:	e032      	b.n	80046fa <ESC_read+0x92>
      {
         /* We write maximum 4 bytes at the time */
         size = (len > 4) ? 4 : len;
 8004694:	88bb      	ldrh	r3, [r7, #4]
 8004696:	2b04      	cmp	r3, #4
 8004698:	bf28      	it	cs
 800469a:	2304      	movcs	r3, #4
 800469c:	81fb      	strh	r3, [r7, #14]
         /* Make size aligned to address according to LAN9252 datasheet
          * Table 12-14 EtherCAT CSR Address VS size and MicroChip SDK code
          */
         /* If we got an odd address size is 1 , 01b 11b is captured */
         if(address & BIT(0))
 800469e:	88fb      	ldrh	r3, [r7, #6]
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d002      	beq.n	80046ae <ESC_read+0x46>
         {
            size = 1;
 80046a8:	2301      	movs	r3, #1
 80046aa:	81fb      	strh	r3, [r7, #14]
 80046ac:	e013      	b.n	80046d6 <ESC_read+0x6e>
         }
         /* If address 1xb and size != 1 and 3 , allow size 2 else size 1 */
         else if (address & BIT(1))
 80046ae:	88fb      	ldrh	r3, [r7, #6]
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d009      	beq.n	80046cc <ESC_read+0x64>
         {
            size = (size & BIT(0)) ? 1 : 2;
 80046b8:	89fb      	ldrh	r3, [r7, #14]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <ESC_read+0x5e>
 80046c2:	2301      	movs	r3, #1
 80046c4:	e000      	b.n	80046c8 <ESC_read+0x60>
 80046c6:	2302      	movs	r3, #2
 80046c8:	81fb      	strh	r3, [r7, #14]
 80046ca:	e004      	b.n	80046d6 <ESC_read+0x6e>
         }
         /* size 3 not valid */
         else if (size == 3)
 80046cc:	89fb      	ldrh	r3, [r7, #14]
 80046ce:	2b03      	cmp	r3, #3
 80046d0:	d101      	bne.n	80046d6 <ESC_read+0x6e>
         {
            size = 1;
 80046d2:	2301      	movs	r3, #1
 80046d4:	81fb      	strh	r3, [r7, #14]
         }
         /* else size is kept AS IS */
         ESC_read_csr(address, temp_buf, size);
 80046d6:	89fa      	ldrh	r2, [r7, #14]
 80046d8:	88fb      	ldrh	r3, [r7, #6]
 80046da:	68b9      	ldr	r1, [r7, #8]
 80046dc:	4618      	mov	r0, r3
 80046de:	f7ff fdfd 	bl	80042dc <ESC_read_csr>

         /* next address */
         len -= size;
 80046e2:	88ba      	ldrh	r2, [r7, #4]
 80046e4:	89fb      	ldrh	r3, [r7, #14]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	80bb      	strh	r3, [r7, #4]
         temp_buf += size;
 80046ea:	89fb      	ldrh	r3, [r7, #14]
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	4413      	add	r3, r2
 80046f0:	60bb      	str	r3, [r7, #8]
         address += size;
 80046f2:	88fa      	ldrh	r2, [r7, #6]
 80046f4:	89fb      	ldrh	r3, [r7, #14]
 80046f6:	4413      	add	r3, r2
 80046f8:	80fb      	strh	r3, [r7, #6]
      while(len > 0)
 80046fa:	88bb      	ldrh	r3, [r7, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1c9      	bne.n	8004694 <ESC_read+0x2c>
      }
   }
   /* To mimic the ET1100 always providing AlEvent on every read or write */
   ESC_read_csr(ESCREG_ALEVENT,(void *)&ESCvar.ALevent,sizeof(ESCvar.ALevent));
 8004700:	2202      	movs	r2, #2
 8004702:	4908      	ldr	r1, [pc, #32]	; (8004724 <ESC_read+0xbc>)
 8004704:	f44f 7008 	mov.w	r0, #544	; 0x220
 8004708:	f7ff fde8 	bl	80042dc <ESC_read_csr>
   ESCvar.ALevent = etohs (ESCvar.ALevent);
 800470c:	4b06      	ldr	r3, [pc, #24]	; (8004728 <ESC_read+0xc0>)
 800470e:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 8004712:	b29a      	uxth	r2, r3
 8004714:	4b04      	ldr	r3, [pc, #16]	; (8004728 <ESC_read+0xc0>)
 8004716:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8

}
 800471a:	bf00      	nop
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	20000248 	.word	0x20000248
 8004728:	20000180 	.word	0x20000180

0800472c <ESC_write>:
 * @param[in]   address     = address of ESC register to write
 * @param[out]  buf         = pointer to buffer to write from
 * @param[in]   len         = number of bytes to write
 */
void ESC_write (uint16_t address, void *buf, uint16_t len)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	4603      	mov	r3, r0
 8004734:	6039      	str	r1, [r7, #0]
 8004736:	80fb      	strh	r3, [r7, #6]
 8004738:	4613      	mov	r3, r2
 800473a:	80bb      	strh	r3, [r7, #4]
   /* Select Write function depending on address, process data ram or not */
   if (address >= 0x1000)
 800473c:	88fb      	ldrh	r3, [r7, #6]
 800473e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004742:	d306      	bcc.n	8004752 <ESC_write+0x26>
   {
      ESC_write_pram(address, buf, len);
 8004744:	88ba      	ldrh	r2, [r7, #4]
 8004746:	88fb      	ldrh	r3, [r7, #6]
 8004748:	6839      	ldr	r1, [r7, #0]
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff fed4 	bl	80044f8 <ESC_write_pram>
 8004750:	e038      	b.n	80047c4 <ESC_write+0x98>
   }
   else
   {
      uint16_t size;
      uint8_t *temp_buf = (uint8_t *)buf;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	60bb      	str	r3, [r7, #8]

      while(len > 0)
 8004756:	e032      	b.n	80047be <ESC_write+0x92>
      {
         /* We write maximum 4 bytes at the time */
         size = (len > 4) ? 4 : len;
 8004758:	88bb      	ldrh	r3, [r7, #4]
 800475a:	2b04      	cmp	r3, #4
 800475c:	bf28      	it	cs
 800475e:	2304      	movcs	r3, #4
 8004760:	81fb      	strh	r3, [r7, #14]
         /* Make size aligned to address according to LAN9252 datasheet
          * Table 12-14 EtherCAT CSR Address VS size  and MicroChip SDK code
          */
         /* If we got an odd address size is 1 , 01b 11b is captured */
         if(address & BIT(0))
 8004762:	88fb      	ldrh	r3, [r7, #6]
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <ESC_write+0x46>
         {
            size = 1;
 800476c:	2301      	movs	r3, #1
 800476e:	81fb      	strh	r3, [r7, #14]
 8004770:	e013      	b.n	800479a <ESC_write+0x6e>
         }
         /* If address 1xb and size != 1 and 3 , allow size 2 else size 1 */
         else if (address & BIT(1))
 8004772:	88fb      	ldrh	r3, [r7, #6]
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d009      	beq.n	8004790 <ESC_write+0x64>
         {
            size = (size & BIT(0)) ? 1 : 2;
 800477c:	89fb      	ldrh	r3, [r7, #14]
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <ESC_write+0x5e>
 8004786:	2301      	movs	r3, #1
 8004788:	e000      	b.n	800478c <ESC_write+0x60>
 800478a:	2302      	movs	r3, #2
 800478c:	81fb      	strh	r3, [r7, #14]
 800478e:	e004      	b.n	800479a <ESC_write+0x6e>
         }
         /* size 3 not valid */
         else if (size == 3)
 8004790:	89fb      	ldrh	r3, [r7, #14]
 8004792:	2b03      	cmp	r3, #3
 8004794:	d101      	bne.n	800479a <ESC_write+0x6e>
         {
            size = 1;
 8004796:	2301      	movs	r3, #1
 8004798:	81fb      	strh	r3, [r7, #14]
         }
         /* else size is kept AS IS */
         ESC_write_csr(address, temp_buf, size);
 800479a:	89fa      	ldrh	r2, [r7, #14]
 800479c:	88fb      	ldrh	r3, [r7, #6]
 800479e:	68b9      	ldr	r1, [r7, #8]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7ff fdca 	bl	800433a <ESC_write_csr>

         /* next address */
         len -= size;
 80047a6:	88ba      	ldrh	r2, [r7, #4]
 80047a8:	89fb      	ldrh	r3, [r7, #14]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	80bb      	strh	r3, [r7, #4]
         temp_buf += size;
 80047ae:	89fb      	ldrh	r3, [r7, #14]
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	4413      	add	r3, r2
 80047b4:	60bb      	str	r3, [r7, #8]
         address += size;
 80047b6:	88fa      	ldrh	r2, [r7, #6]
 80047b8:	89fb      	ldrh	r3, [r7, #14]
 80047ba:	4413      	add	r3, r2
 80047bc:	80fb      	strh	r3, [r7, #6]
      while(len > 0)
 80047be:	88bb      	ldrh	r3, [r7, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1c9      	bne.n	8004758 <ESC_write+0x2c>
      }
   }

   /* To mimic the ET1x00 always providing AlEvent on every read or write */
   ESC_read_csr(ESCREG_ALEVENT,(void *)&ESCvar.ALevent,sizeof(ESCvar.ALevent));
 80047c4:	2202      	movs	r2, #2
 80047c6:	4908      	ldr	r1, [pc, #32]	; (80047e8 <ESC_write+0xbc>)
 80047c8:	f44f 7008 	mov.w	r0, #544	; 0x220
 80047cc:	f7ff fd86 	bl	80042dc <ESC_read_csr>
   ESCvar.ALevent = etohs (ESCvar.ALevent);
 80047d0:	4b06      	ldr	r3, [pc, #24]	; (80047ec <ESC_write+0xc0>)
 80047d2:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	4b04      	ldr	r3, [pc, #16]	; (80047ec <ESC_write+0xc0>)
 80047da:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
}
 80047de:	bf00      	nop
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	20000248 	.word	0x20000248
 80047ec:	20000180 	.word	0x20000180

080047f0 <ESC_init>:
{

}

void ESC_init (const esc_cfg_t * config)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
   //lan9252 = open (spi_name, O_RDWR, 0);

   /* Reset the ecat core here due to evb-lan9252-digio not having any GPIO
    * for that purpose.
    */
   lan9252_write_32(ESC_RESET_CTRL_REG,ESC_RESET_CTRL_RST);
 80047f8:	2140      	movs	r1, #64	; 0x40
 80047fa:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
 80047fe:	f7ff fcf5 	bl	80041ec <lan9252_write_32>
   do
   {
      value = lan9252_read_32(ESC_CSR_CMD_REG);
 8004802:	f44f 7041 	mov.w	r0, #772	; 0x304
 8004806:	f7ff fd2b 	bl	8004260 <lan9252_read_32>
 800480a:	60f8      	str	r0, [r7, #12]
   } while(value & ESC_RESET_CTRL_RST);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1f5      	bne.n	8004802 <ESC_init+0x12>



}
 8004816:	bf00      	nop
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <spi_select>:

extern SPI_HandleTypeDef hspi1;


void spi_select (int8_t board)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b082      	sub	sp, #8
 8004822:	af00      	add	r7, sp, #0
 8004824:	4603      	mov	r3, r0
 8004826:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8004828:	2200      	movs	r2, #0
 800482a:	2101      	movs	r1, #1
 800482c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004830:	f001 f88c 	bl	800594c <HAL_GPIO_WritePin>
}
 8004834:	bf00      	nop
 8004836:	3708      	adds	r7, #8
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <spi_unselect>:

void spi_unselect (int8_t board)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	4603      	mov	r3, r0
 8004844:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8004846:	2201      	movs	r2, #1
 8004848:	2101      	movs	r1, #1
 800484a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800484e:	f001 f87d 	bl	800594c <HAL_GPIO_WritePin>
}
 8004852:	bf00      	nop
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
	...

0800485c <write>:

void write (int8_t board, uint8_t *data, uint8_t size)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	4603      	mov	r3, r0
 8004864:	6039      	str	r1, [r7, #0]
 8004866:	71fb      	strb	r3, [r7, #7]
 8004868:	4613      	mov	r3, r2
 800486a:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_Transmit(&hspi1, data, size, tout);
 800486c:	79bb      	ldrb	r3, [r7, #6]
 800486e:	b29a      	uxth	r2, r3
 8004870:	f241 3388 	movw	r3, #5000	; 0x1388
 8004874:	6839      	ldr	r1, [r7, #0]
 8004876:	4803      	ldr	r0, [pc, #12]	; (8004884 <write+0x28>)
 8004878:	f002 fedc 	bl	8007634 <HAL_SPI_Transmit>
}
 800487c:	bf00      	nop
 800487e:	3708      	adds	r7, #8
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	20000948 	.word	0x20000948

08004888 <read>:

void read (int8_t board, uint8_t *result, uint8_t size)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	4603      	mov	r3, r0
 8004890:	6039      	str	r1, [r7, #0]
 8004892:	71fb      	strb	r3, [r7, #7]
 8004894:	4613      	mov	r3, r2
 8004896:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_Receive(&hspi1, result, size, tout);
 8004898:	79bb      	ldrb	r3, [r7, #6]
 800489a:	b29a      	uxth	r2, r3
 800489c:	f241 3388 	movw	r3, #5000	; 0x1388
 80048a0:	6839      	ldr	r1, [r7, #0]
 80048a2:	4803      	ldr	r0, [pc, #12]	; (80048b0 <read+0x28>)
 80048a4:	f003 f82c 	bl	8007900 <HAL_SPI_Receive>
}
 80048a8:	bf00      	nop
 80048aa:	3708      	adds	r7, #8
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	20000948 	.word	0x20000948

080048b4 <cb_get_inputs>:
static void MX_USART3_UART_Init(void);
static void MX_USB_OTG_FS_PCD_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
void cb_get_inputs (void)					//just add
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	af00      	add	r7, sp, #0
	if (Obj.LEDs.LED0 == 1) {
 80048b8:	4b18      	ldr	r3, [pc, #96]	; (800491c <cb_get_inputs+0x68>)
 80048ba:	791b      	ldrb	r3, [r3, #4]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d109      	bne.n	80048d4 <cb_get_inputs+0x20>
		Obj.Button_Record.Button1 = 1;
 80048c0:	4b16      	ldr	r3, [pc, #88]	; (800491c <cb_get_inputs+0x68>)
 80048c2:	2201      	movs	r2, #1
 80048c4:	709a      	strb	r2, [r3, #2]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80048c6:	2201      	movs	r2, #1
 80048c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80048cc:	4814      	ldr	r0, [pc, #80]	; (8004920 <cb_get_inputs+0x6c>)
 80048ce:	f001 f83d 	bl	800594c <HAL_GPIO_WritePin>
 80048d2:	e008      	b.n	80048e6 <cb_get_inputs+0x32>
	}
	else {
		Obj.Button_Record.Button1 = 0;
 80048d4:	4b11      	ldr	r3, [pc, #68]	; (800491c <cb_get_inputs+0x68>)
 80048d6:	2200      	movs	r2, #0
 80048d8:	709a      	strb	r2, [r3, #2]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80048da:	2200      	movs	r2, #0
 80048dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80048e0:	480f      	ldr	r0, [pc, #60]	; (8004920 <cb_get_inputs+0x6c>)
 80048e2:	f001 f833 	bl	800594c <HAL_GPIO_WritePin>
	}

	if (Obj.LEDs.LED1== 1) {
 80048e6:	4b0d      	ldr	r3, [pc, #52]	; (800491c <cb_get_inputs+0x68>)
 80048e8:	795b      	ldrb	r3, [r3, #5]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d108      	bne.n	8004900 <cb_get_inputs+0x4c>
		Obj.Button_Record.Button2 = 1;
 80048ee:	4b0b      	ldr	r3, [pc, #44]	; (800491c <cb_get_inputs+0x68>)
 80048f0:	2201      	movs	r2, #1
 80048f2:	70da      	strb	r2, [r3, #3]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80048f4:	2201      	movs	r2, #1
 80048f6:	2180      	movs	r1, #128	; 0x80
 80048f8:	4809      	ldr	r0, [pc, #36]	; (8004920 <cb_get_inputs+0x6c>)
 80048fa:	f001 f827 	bl	800594c <HAL_GPIO_WritePin>
 80048fe:	e007      	b.n	8004910 <cb_get_inputs+0x5c>
	}
	else {
		Obj.Button_Record.Button2 = 0;
 8004900:	4b06      	ldr	r3, [pc, #24]	; (800491c <cb_get_inputs+0x68>)
 8004902:	2200      	movs	r2, #0
 8004904:	70da      	strb	r2, [r3, #3]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8004906:	2200      	movs	r2, #0
 8004908:	2180      	movs	r1, #128	; 0x80
 800490a:	4805      	ldr	r0, [pc, #20]	; (8004920 <cb_get_inputs+0x6c>)
 800490c:	f001 f81e 	bl	800594c <HAL_GPIO_WritePin>
	}

	Obj.Button_Variable = Obj.Led_Variable;
 8004910:	4b02      	ldr	r3, [pc, #8]	; (800491c <cb_get_inputs+0x68>)
 8004912:	799a      	ldrb	r2, [r3, #6]
 8004914:	4b01      	ldr	r3, [pc, #4]	; (800491c <cb_get_inputs+0x68>)
 8004916:	705a      	strb	r2, [r3, #1]
}
 8004918:	bf00      	nop
 800491a:	bd80      	pop	{r7, pc}
 800491c:	200009ac 	.word	0x200009ac
 8004920:	48000400 	.word	0x48000400

08004924 <cb_set_outputs>:

void cb_set_outputs (void)
{
 8004924:	b480      	push	{r7}
 8004926:	af00      	add	r7, sp, #0
}
 8004928:	bf00      	nop
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
	...

08004934 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004938:	f000 fcfd 	bl	8005336 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800493c:	f000 f818 	bl	8004970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004940:	f000 f996 	bl	8004c70 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8004944:	f000 f89c 	bl	8004a80 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8004948:	f000 f8de 	bl	8004b08 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800494c:	f000 f966 	bl	8004c1c <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8004950:	f000 f926 	bl	8004ba0 <MX_SPI1_Init>
     .esc_hw_eep_handler = NULL,
     .esc_check_dc_handler = NULL,
  };


  ecat_slv_init (&config);
 8004954:	4804      	ldr	r0, [pc, #16]	; (8004968 <main+0x34>)
 8004956:	f7fb ffbd 	bl	80008d4 <ecat_slv_init>
  DPRINT("Hello Main\n");
 800495a:	4804      	ldr	r0, [pc, #16]	; (800496c <main+0x38>)
 800495c:	f005 ffa0 	bl	800a8a0 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ecat_slv();								//just add
 8004960:	f7fb ffae 	bl	80008c0 <ecat_slv>
 8004964:	e7fc      	b.n	8004960 <main+0x2c>
 8004966:	bf00      	nop
 8004968:	20000024 	.word	0x20000024
 800496c:	0800b4a4 	.word	0x0800b4a4

08004970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b0bc      	sub	sp, #240	; 0xf0
 8004974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004976:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800497a:	2244      	movs	r2, #68	; 0x44
 800497c:	2100      	movs	r1, #0
 800497e:	4618      	mov	r0, r3
 8004980:	f005 fc4b 	bl	800a21a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004984:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004988:	2200      	movs	r2, #0
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	605a      	str	r2, [r3, #4]
 800498e:	609a      	str	r2, [r3, #8]
 8004990:	60da      	str	r2, [r3, #12]
 8004992:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004994:	1d3b      	adds	r3, r7, #4
 8004996:	2294      	movs	r2, #148	; 0x94
 8004998:	2100      	movs	r1, #0
 800499a:	4618      	mov	r0, r3
 800499c:	f005 fc3d 	bl	800a21a <memset>

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80049a0:	2000      	movs	r0, #0
 80049a2:	f001 f953 	bl	8005c4c <HAL_PWREx_ControlVoltageScaling>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d001      	beq.n	80049b0 <SystemClock_Config+0x40>
  {
    Error_Handler();
 80049ac:	f000 fa2c 	bl	8004e08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80049b0:	2301      	movs	r3, #1
 80049b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80049b6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80049ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80049be:	2302      	movs	r3, #2
 80049c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80049c4:	2303      	movs	r3, #3
 80049c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80049ca:	2301      	movs	r3, #1
 80049cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 30;
 80049d0:	231e      	movs	r3, #30
 80049d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80049d6:	2302      	movs	r3, #2
 80049d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80049dc:	2302      	movs	r3, #2
 80049de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80049e2:	2302      	movs	r3, #2
 80049e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80049e8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80049ec:	4618      	mov	r0, r3
 80049ee:	f001 f9f1 	bl	8005dd4 <HAL_RCC_OscConfig>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80049f8:	f000 fa06 	bl	8004e08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80049fc:	230f      	movs	r3, #15
 80049fe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a02:	2303      	movs	r3, #3
 8004a04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004a0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004a16:	2300      	movs	r3, #0
 8004a18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004a1c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004a20:	2105      	movs	r1, #5
 8004a22:	4618      	mov	r0, r3
 8004a24:	f001 fdc4 	bl	80065b0 <HAL_RCC_ClockConfig>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004a2e:	f000 f9eb 	bl	8004e08 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPUART1
 8004a32:	f242 0324 	movw	r3, #8228	; 0x2024
 8004a36:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8004a40:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004a44:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8004a46:	2303      	movs	r3, #3
 8004a48:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8004a4e:	230c      	movs	r3, #12
 8004a50:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8004a52:	2302      	movs	r3, #2
 8004a54:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8004a56:	2302      	movs	r3, #2
 8004a58:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8004a5e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004a62:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a64:	1d3b      	adds	r3, r7, #4
 8004a66:	4618      	mov	r0, r3
 8004a68:	f002 f852 	bl	8006b10 <HAL_RCCEx_PeriphCLKConfig>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <SystemClock_Config+0x106>
  {
    Error_Handler();
 8004a72:	f000 f9c9 	bl	8004e08 <Error_Handler>
  }
}
 8004a76:	bf00      	nop
 8004a78:	37f0      	adds	r7, #240	; 0xf0
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
	...

08004a80 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8004a84:	4b1e      	ldr	r3, [pc, #120]	; (8004b00 <MX_LPUART1_UART_Init+0x80>)
 8004a86:	4a1f      	ldr	r2, [pc, #124]	; (8004b04 <MX_LPUART1_UART_Init+0x84>)
 8004a88:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8004a8a:	4b1d      	ldr	r3, [pc, #116]	; (8004b00 <MX_LPUART1_UART_Init+0x80>)
 8004a8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004a90:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004a92:	4b1b      	ldr	r3, [pc, #108]	; (8004b00 <MX_LPUART1_UART_Init+0x80>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8004a98:	4b19      	ldr	r3, [pc, #100]	; (8004b00 <MX_LPUART1_UART_Init+0x80>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8004a9e:	4b18      	ldr	r3, [pc, #96]	; (8004b00 <MX_LPUART1_UART_Init+0x80>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8004aa4:	4b16      	ldr	r3, [pc, #88]	; (8004b00 <MX_LPUART1_UART_Init+0x80>)
 8004aa6:	220c      	movs	r2, #12
 8004aa8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004aaa:	4b15      	ldr	r3, [pc, #84]	; (8004b00 <MX_LPUART1_UART_Init+0x80>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004ab0:	4b13      	ldr	r3, [pc, #76]	; (8004b00 <MX_LPUART1_UART_Init+0x80>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004ab6:	4b12      	ldr	r3, [pc, #72]	; (8004b00 <MX_LPUART1_UART_Init+0x80>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004abc:	4b10      	ldr	r3, [pc, #64]	; (8004b00 <MX_LPUART1_UART_Init+0x80>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8004ac2:	4b0f      	ldr	r3, [pc, #60]	; (8004b00 <MX_LPUART1_UART_Init+0x80>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8004ac8:	480d      	ldr	r0, [pc, #52]	; (8004b00 <MX_LPUART1_UART_Init+0x80>)
 8004aca:	f003 fbc9 	bl	8008260 <HAL_UART_Init>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d001      	beq.n	8004ad8 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8004ad4:	f000 f998 	bl	8004e08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004ad8:	2100      	movs	r1, #0
 8004ada:	4809      	ldr	r0, [pc, #36]	; (8004b00 <MX_LPUART1_UART_Init+0x80>)
 8004adc:	f004 ffd5 	bl	8009a8a <HAL_UARTEx_SetTxFifoThreshold>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004ae6:	f000 f98f 	bl	8004e08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004aea:	2100      	movs	r1, #0
 8004aec:	4804      	ldr	r0, [pc, #16]	; (8004b00 <MX_LPUART1_UART_Init+0x80>)
 8004aee:	f005 f80a 	bl	8009b06 <HAL_UARTEx_SetRxFifoThreshold>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d001      	beq.n	8004afc <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004af8:	f000 f986 	bl	8004e08 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8004afc:	bf00      	nop
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	200008bc 	.word	0x200008bc
 8004b04:	40008000 	.word	0x40008000

08004b08 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004b0c:	4b22      	ldr	r3, [pc, #136]	; (8004b98 <MX_USART3_UART_Init+0x90>)
 8004b0e:	4a23      	ldr	r2, [pc, #140]	; (8004b9c <MX_USART3_UART_Init+0x94>)
 8004b10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004b12:	4b21      	ldr	r3, [pc, #132]	; (8004b98 <MX_USART3_UART_Init+0x90>)
 8004b14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004b18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004b1a:	4b1f      	ldr	r3, [pc, #124]	; (8004b98 <MX_USART3_UART_Init+0x90>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004b20:	4b1d      	ldr	r3, [pc, #116]	; (8004b98 <MX_USART3_UART_Init+0x90>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004b26:	4b1c      	ldr	r3, [pc, #112]	; (8004b98 <MX_USART3_UART_Init+0x90>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004b2c:	4b1a      	ldr	r3, [pc, #104]	; (8004b98 <MX_USART3_UART_Init+0x90>)
 8004b2e:	220c      	movs	r2, #12
 8004b30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b32:	4b19      	ldr	r3, [pc, #100]	; (8004b98 <MX_USART3_UART_Init+0x90>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b38:	4b17      	ldr	r3, [pc, #92]	; (8004b98 <MX_USART3_UART_Init+0x90>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004b3e:	4b16      	ldr	r3, [pc, #88]	; (8004b98 <MX_USART3_UART_Init+0x90>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004b44:	4b14      	ldr	r3, [pc, #80]	; (8004b98 <MX_USART3_UART_Init+0x90>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004b4a:	4b13      	ldr	r3, [pc, #76]	; (8004b98 <MX_USART3_UART_Init+0x90>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004b50:	4811      	ldr	r0, [pc, #68]	; (8004b98 <MX_USART3_UART_Init+0x90>)
 8004b52:	f003 fb85 	bl	8008260 <HAL_UART_Init>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d001      	beq.n	8004b60 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004b5c:	f000 f954 	bl	8004e08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004b60:	2100      	movs	r1, #0
 8004b62:	480d      	ldr	r0, [pc, #52]	; (8004b98 <MX_USART3_UART_Init+0x90>)
 8004b64:	f004 ff91 	bl	8009a8a <HAL_UARTEx_SetTxFifoThreshold>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8004b6e:	f000 f94b 	bl	8004e08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004b72:	2100      	movs	r1, #0
 8004b74:	4808      	ldr	r0, [pc, #32]	; (8004b98 <MX_USART3_UART_Init+0x90>)
 8004b76:	f004 ffc6 	bl	8009b06 <HAL_UARTEx_SetRxFifoThreshold>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d001      	beq.n	8004b84 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8004b80:	f000 f942 	bl	8004e08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8004b84:	4804      	ldr	r0, [pc, #16]	; (8004b98 <MX_USART3_UART_Init+0x90>)
 8004b86:	f004 ff47 	bl	8009a18 <HAL_UARTEx_DisableFifoMode>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d001      	beq.n	8004b94 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8004b90:	f000 f93a 	bl	8004e08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004b94:	bf00      	nop
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	20000428 	.word	0x20000428
 8004b9c:	40004800 	.word	0x40004800

08004ba0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004ba4:	4b1b      	ldr	r3, [pc, #108]	; (8004c14 <MX_SPI1_Init+0x74>)
 8004ba6:	4a1c      	ldr	r2, [pc, #112]	; (8004c18 <MX_SPI1_Init+0x78>)
 8004ba8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004baa:	4b1a      	ldr	r3, [pc, #104]	; (8004c14 <MX_SPI1_Init+0x74>)
 8004bac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004bb0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004bb2:	4b18      	ldr	r3, [pc, #96]	; (8004c14 <MX_SPI1_Init+0x74>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004bb8:	4b16      	ldr	r3, [pc, #88]	; (8004c14 <MX_SPI1_Init+0x74>)
 8004bba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004bbe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bc0:	4b14      	ldr	r3, [pc, #80]	; (8004c14 <MX_SPI1_Init+0x74>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004bc6:	4b13      	ldr	r3, [pc, #76]	; (8004c14 <MX_SPI1_Init+0x74>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004bcc:	4b11      	ldr	r3, [pc, #68]	; (8004c14 <MX_SPI1_Init+0x74>)
 8004bce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bd2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004bd4:	4b0f      	ldr	r3, [pc, #60]	; (8004c14 <MX_SPI1_Init+0x74>)
 8004bd6:	2208      	movs	r2, #8
 8004bd8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004bda:	4b0e      	ldr	r3, [pc, #56]	; (8004c14 <MX_SPI1_Init+0x74>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004be0:	4b0c      	ldr	r3, [pc, #48]	; (8004c14 <MX_SPI1_Init+0x74>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004be6:	4b0b      	ldr	r3, [pc, #44]	; (8004c14 <MX_SPI1_Init+0x74>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004bec:	4b09      	ldr	r3, [pc, #36]	; (8004c14 <MX_SPI1_Init+0x74>)
 8004bee:	2207      	movs	r2, #7
 8004bf0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004bf2:	4b08      	ldr	r3, [pc, #32]	; (8004c14 <MX_SPI1_Init+0x74>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004bf8:	4b06      	ldr	r3, [pc, #24]	; (8004c14 <MX_SPI1_Init+0x74>)
 8004bfa:	2208      	movs	r2, #8
 8004bfc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004bfe:	4805      	ldr	r0, [pc, #20]	; (8004c14 <MX_SPI1_Init+0x74>)
 8004c00:	f002 fc8e 	bl	8007520 <HAL_SPI_Init>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004c0a:	f000 f8fd 	bl	8004e08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004c0e:	bf00      	nop
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	20000948 	.word	0x20000948
 8004c18:	40013000 	.word	0x40013000

08004c1c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004c20:	4b12      	ldr	r3, [pc, #72]	; (8004c6c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8004c22:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004c26:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8004c28:	4b10      	ldr	r3, [pc, #64]	; (8004c6c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8004c2a:	2206      	movs	r2, #6
 8004c2c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004c2e:	4b0f      	ldr	r3, [pc, #60]	; (8004c6c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8004c30:	2202      	movs	r2, #2
 8004c32:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8004c34:	4b0d      	ldr	r3, [pc, #52]	; (8004c6c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8004c36:	2201      	movs	r2, #1
 8004c38:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8004c3a:	4b0c      	ldr	r3, [pc, #48]	; (8004c6c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8004c40:	4b0a      	ldr	r3, [pc, #40]	; (8004c6c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8004c46:	4b09      	ldr	r3, [pc, #36]	; (8004c6c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8004c48:	2201      	movs	r2, #1
 8004c4a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8004c4c:	4b07      	ldr	r3, [pc, #28]	; (8004c6c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8004c52:	4b06      	ldr	r3, [pc, #24]	; (8004c6c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8004c54:	2201      	movs	r2, #1
 8004c56:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8004c58:	4804      	ldr	r0, [pc, #16]	; (8004c6c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8004c5a:	f000 fe8f 	bl	800597c <HAL_PCD_Init>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 8004c64:	f000 f8d0 	bl	8004e08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8004c68:	bf00      	nop
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	200004b4 	.word	0x200004b4

08004c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b08c      	sub	sp, #48	; 0x30
 8004c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c76:	f107 031c 	add.w	r3, r7, #28
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	601a      	str	r2, [r3, #0]
 8004c7e:	605a      	str	r2, [r3, #4]
 8004c80:	609a      	str	r2, [r3, #8]
 8004c82:	60da      	str	r2, [r3, #12]
 8004c84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c86:	4b5b      	ldr	r3, [pc, #364]	; (8004df4 <MX_GPIO_Init+0x184>)
 8004c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c8a:	4a5a      	ldr	r2, [pc, #360]	; (8004df4 <MX_GPIO_Init+0x184>)
 8004c8c:	f043 0304 	orr.w	r3, r3, #4
 8004c90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c92:	4b58      	ldr	r3, [pc, #352]	; (8004df4 <MX_GPIO_Init+0x184>)
 8004c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c96:	f003 0304 	and.w	r3, r3, #4
 8004c9a:	61bb      	str	r3, [r7, #24]
 8004c9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004c9e:	4b55      	ldr	r3, [pc, #340]	; (8004df4 <MX_GPIO_Init+0x184>)
 8004ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ca2:	4a54      	ldr	r2, [pc, #336]	; (8004df4 <MX_GPIO_Init+0x184>)
 8004ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004caa:	4b52      	ldr	r3, [pc, #328]	; (8004df4 <MX_GPIO_Init+0x184>)
 8004cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb2:	617b      	str	r3, [r7, #20]
 8004cb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cb6:	4b4f      	ldr	r3, [pc, #316]	; (8004df4 <MX_GPIO_Init+0x184>)
 8004cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cba:	4a4e      	ldr	r2, [pc, #312]	; (8004df4 <MX_GPIO_Init+0x184>)
 8004cbc:	f043 0301 	orr.w	r3, r3, #1
 8004cc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cc2:	4b4c      	ldr	r3, [pc, #304]	; (8004df4 <MX_GPIO_Init+0x184>)
 8004cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	613b      	str	r3, [r7, #16]
 8004ccc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cce:	4b49      	ldr	r3, [pc, #292]	; (8004df4 <MX_GPIO_Init+0x184>)
 8004cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd2:	4a48      	ldr	r2, [pc, #288]	; (8004df4 <MX_GPIO_Init+0x184>)
 8004cd4:	f043 0302 	orr.w	r3, r3, #2
 8004cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cda:	4b46      	ldr	r3, [pc, #280]	; (8004df4 <MX_GPIO_Init+0x184>)
 8004cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	60fb      	str	r3, [r7, #12]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ce6:	4b43      	ldr	r3, [pc, #268]	; (8004df4 <MX_GPIO_Init+0x184>)
 8004ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cea:	4a42      	ldr	r2, [pc, #264]	; (8004df4 <MX_GPIO_Init+0x184>)
 8004cec:	f043 0308 	orr.w	r3, r3, #8
 8004cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cf2:	4b40      	ldr	r3, [pc, #256]	; (8004df4 <MX_GPIO_Init+0x184>)
 8004cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cf6:	f003 0308 	and.w	r3, r3, #8
 8004cfa:	60bb      	str	r3, [r7, #8]
 8004cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004cfe:	4b3d      	ldr	r3, [pc, #244]	; (8004df4 <MX_GPIO_Init+0x184>)
 8004d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d02:	4a3c      	ldr	r2, [pc, #240]	; (8004df4 <MX_GPIO_Init+0x184>)
 8004d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d0a:	4b3a      	ldr	r3, [pc, #232]	; (8004df4 <MX_GPIO_Init+0x184>)
 8004d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d12:	607b      	str	r3, [r7, #4]
 8004d14:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8004d16:	f001 f84d 	bl	8005db4 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d22:	f000 fe13 	bl	800594c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8004d26:	2200      	movs	r2, #0
 8004d28:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8004d2c:	4832      	ldr	r0, [pc, #200]	; (8004df8 <MX_GPIO_Init+0x188>)
 8004d2e:	f000 fe0d 	bl	800594c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8004d32:	2200      	movs	r2, #0
 8004d34:	2120      	movs	r1, #32
 8004d36:	4831      	ldr	r0, [pc, #196]	; (8004dfc <MX_GPIO_Init+0x18c>)
 8004d38:	f000 fe08 	bl	800594c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	2180      	movs	r1, #128	; 0x80
 8004d40:	482f      	ldr	r0, [pc, #188]	; (8004e00 <MX_GPIO_Init+0x190>)
 8004d42:	f000 fe03 	bl	800594c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004d46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004d4c:	4b2d      	ldr	r3, [pc, #180]	; (8004e04 <MX_GPIO_Init+0x194>)
 8004d4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d50:	2300      	movs	r3, #0
 8004d52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004d54:	f107 031c 	add.w	r3, r7, #28
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4829      	ldr	r0, [pc, #164]	; (8004e00 <MX_GPIO_Init+0x190>)
 8004d5c:	f000 fc64 	bl	8005628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004d60:	2301      	movs	r3, #1
 8004d62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d64:	2301      	movs	r3, #1
 8004d66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d70:	f107 031c 	add.w	r3, r7, #28
 8004d74:	4619      	mov	r1, r3
 8004d76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d7a:	f000 fc55 	bl	8005628 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8004d7e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8004d82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d84:	2301      	movs	r3, #1
 8004d86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d90:	f107 031c 	add.w	r3, r7, #28
 8004d94:	4619      	mov	r1, r3
 8004d96:	4818      	ldr	r0, [pc, #96]	; (8004df8 <MX_GPIO_Init+0x188>)
 8004d98:	f000 fc46 	bl	8005628 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8004d9c:	2320      	movs	r3, #32
 8004d9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004da0:	2301      	movs	r3, #1
 8004da2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004da4:	2300      	movs	r3, #0
 8004da6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004da8:	2300      	movs	r3, #0
 8004daa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8004dac:	f107 031c 	add.w	r3, r7, #28
 8004db0:	4619      	mov	r1, r3
 8004db2:	4812      	ldr	r0, [pc, #72]	; (8004dfc <MX_GPIO_Init+0x18c>)
 8004db4:	f000 fc38 	bl	8005628 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8004db8:	2340      	movs	r3, #64	; 0x40
 8004dba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004dc4:	f107 031c 	add.w	r3, r7, #28
 8004dc8:	4619      	mov	r1, r3
 8004dca:	480c      	ldr	r0, [pc, #48]	; (8004dfc <MX_GPIO_Init+0x18c>)
 8004dcc:	f000 fc2c 	bl	8005628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004dd0:	2380      	movs	r3, #128	; 0x80
 8004dd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004de0:	f107 031c 	add.w	r3, r7, #28
 8004de4:	4619      	mov	r1, r3
 8004de6:	4806      	ldr	r0, [pc, #24]	; (8004e00 <MX_GPIO_Init+0x190>)
 8004de8:	f000 fc1e 	bl	8005628 <HAL_GPIO_Init>

}
 8004dec:	bf00      	nop
 8004dee:	3730      	adds	r7, #48	; 0x30
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	40021000 	.word	0x40021000
 8004df8:	48000400 	.word	0x48000400
 8004dfc:	48001800 	.word	0x48001800
 8004e00:	48000800 	.word	0x48000800
 8004e04:	10110000 	.word	0x10110000

08004e08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004e0c:	bf00      	nop
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
	...

08004e18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e1e:	4b0f      	ldr	r3, [pc, #60]	; (8004e5c <HAL_MspInit+0x44>)
 8004e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e22:	4a0e      	ldr	r2, [pc, #56]	; (8004e5c <HAL_MspInit+0x44>)
 8004e24:	f043 0301 	orr.w	r3, r3, #1
 8004e28:	6613      	str	r3, [r2, #96]	; 0x60
 8004e2a:	4b0c      	ldr	r3, [pc, #48]	; (8004e5c <HAL_MspInit+0x44>)
 8004e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	607b      	str	r3, [r7, #4]
 8004e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e36:	4b09      	ldr	r3, [pc, #36]	; (8004e5c <HAL_MspInit+0x44>)
 8004e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e3a:	4a08      	ldr	r2, [pc, #32]	; (8004e5c <HAL_MspInit+0x44>)
 8004e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e40:	6593      	str	r3, [r2, #88]	; 0x58
 8004e42:	4b06      	ldr	r3, [pc, #24]	; (8004e5c <HAL_MspInit+0x44>)
 8004e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e4a:	603b      	str	r3, [r7, #0]
 8004e4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	40021000 	.word	0x40021000

08004e60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b08c      	sub	sp, #48	; 0x30
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e68:	f107 031c 	add.w	r3, r7, #28
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	605a      	str	r2, [r3, #4]
 8004e72:	609a      	str	r2, [r3, #8]
 8004e74:	60da      	str	r2, [r3, #12]
 8004e76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a30      	ldr	r2, [pc, #192]	; (8004f40 <HAL_UART_MspInit+0xe0>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d12b      	bne.n	8004eda <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8004e82:	4b30      	ldr	r3, [pc, #192]	; (8004f44 <HAL_UART_MspInit+0xe4>)
 8004e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e86:	4a2f      	ldr	r2, [pc, #188]	; (8004f44 <HAL_UART_MspInit+0xe4>)
 8004e88:	f043 0301 	orr.w	r3, r3, #1
 8004e8c:	65d3      	str	r3, [r2, #92]	; 0x5c
 8004e8e:	4b2d      	ldr	r3, [pc, #180]	; (8004f44 <HAL_UART_MspInit+0xe4>)
 8004e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	61bb      	str	r3, [r7, #24]
 8004e98:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004e9a:	4b2a      	ldr	r3, [pc, #168]	; (8004f44 <HAL_UART_MspInit+0xe4>)
 8004e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e9e:	4a29      	ldr	r2, [pc, #164]	; (8004f44 <HAL_UART_MspInit+0xe4>)
 8004ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ea6:	4b27      	ldr	r3, [pc, #156]	; (8004f44 <HAL_UART_MspInit+0xe4>)
 8004ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eae:	617b      	str	r3, [r7, #20]
 8004eb0:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8004eb2:	f000 ff7f 	bl	8005db4 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration    
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8004eb6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8004ec8:	2308      	movs	r3, #8
 8004eca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004ecc:	f107 031c 	add.w	r3, r7, #28
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	481d      	ldr	r0, [pc, #116]	; (8004f48 <HAL_UART_MspInit+0xe8>)
 8004ed4:	f000 fba8 	bl	8005628 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004ed8:	e02d      	b.n	8004f36 <HAL_UART_MspInit+0xd6>
  else if(huart->Instance==USART3)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a1b      	ldr	r2, [pc, #108]	; (8004f4c <HAL_UART_MspInit+0xec>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d128      	bne.n	8004f36 <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004ee4:	4b17      	ldr	r3, [pc, #92]	; (8004f44 <HAL_UART_MspInit+0xe4>)
 8004ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee8:	4a16      	ldr	r2, [pc, #88]	; (8004f44 <HAL_UART_MspInit+0xe4>)
 8004eea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004eee:	6593      	str	r3, [r2, #88]	; 0x58
 8004ef0:	4b14      	ldr	r3, [pc, #80]	; (8004f44 <HAL_UART_MspInit+0xe4>)
 8004ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ef8:	613b      	str	r3, [r7, #16]
 8004efa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004efc:	4b11      	ldr	r3, [pc, #68]	; (8004f44 <HAL_UART_MspInit+0xe4>)
 8004efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f00:	4a10      	ldr	r2, [pc, #64]	; (8004f44 <HAL_UART_MspInit+0xe4>)
 8004f02:	f043 0308 	orr.w	r3, r3, #8
 8004f06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f08:	4b0e      	ldr	r3, [pc, #56]	; (8004f44 <HAL_UART_MspInit+0xe4>)
 8004f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f0c:	f003 0308 	and.w	r3, r3, #8
 8004f10:	60fb      	str	r3, [r7, #12]
 8004f12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8004f14:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f22:	2303      	movs	r3, #3
 8004f24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004f26:	2307      	movs	r3, #7
 8004f28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f2a:	f107 031c 	add.w	r3, r7, #28
 8004f2e:	4619      	mov	r1, r3
 8004f30:	4807      	ldr	r0, [pc, #28]	; (8004f50 <HAL_UART_MspInit+0xf0>)
 8004f32:	f000 fb79 	bl	8005628 <HAL_GPIO_Init>
}
 8004f36:	bf00      	nop
 8004f38:	3730      	adds	r7, #48	; 0x30
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	40008000 	.word	0x40008000
 8004f44:	40021000 	.word	0x40021000
 8004f48:	48001800 	.word	0x48001800
 8004f4c:	40004800 	.word	0x40004800
 8004f50:	48000c00 	.word	0x48000c00

08004f54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b08a      	sub	sp, #40	; 0x28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f5c:	f107 0314 	add.w	r3, r7, #20
 8004f60:	2200      	movs	r2, #0
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	605a      	str	r2, [r3, #4]
 8004f66:	609a      	str	r2, [r3, #8]
 8004f68:	60da      	str	r2, [r3, #12]
 8004f6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a17      	ldr	r2, [pc, #92]	; (8004fd0 <HAL_SPI_MspInit+0x7c>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d128      	bne.n	8004fc8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004f76:	4b17      	ldr	r3, [pc, #92]	; (8004fd4 <HAL_SPI_MspInit+0x80>)
 8004f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f7a:	4a16      	ldr	r2, [pc, #88]	; (8004fd4 <HAL_SPI_MspInit+0x80>)
 8004f7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f80:	6613      	str	r3, [r2, #96]	; 0x60
 8004f82:	4b14      	ldr	r3, [pc, #80]	; (8004fd4 <HAL_SPI_MspInit+0x80>)
 8004f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f8a:	613b      	str	r3, [r7, #16]
 8004f8c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f8e:	4b11      	ldr	r3, [pc, #68]	; (8004fd4 <HAL_SPI_MspInit+0x80>)
 8004f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f92:	4a10      	ldr	r2, [pc, #64]	; (8004fd4 <HAL_SPI_MspInit+0x80>)
 8004f94:	f043 0301 	orr.w	r3, r3, #1
 8004f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f9a:	4b0e      	ldr	r3, [pc, #56]	; (8004fd4 <HAL_SPI_MspInit+0x80>)
 8004f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	60fb      	str	r3, [r7, #12]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8004fa6:	23c2      	movs	r3, #194	; 0xc2
 8004fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004faa:	2302      	movs	r3, #2
 8004fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004fb6:	2305      	movs	r3, #5
 8004fb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fba:	f107 0314 	add.w	r3, r7, #20
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fc4:	f000 fb30 	bl	8005628 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004fc8:	bf00      	nop
 8004fca:	3728      	adds	r7, #40	; 0x28
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	40013000 	.word	0x40013000
 8004fd4:	40021000 	.word	0x40021000

08004fd8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b08a      	sub	sp, #40	; 0x28
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fe0:	f107 0314 	add.w	r3, r7, #20
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	601a      	str	r2, [r3, #0]
 8004fe8:	605a      	str	r2, [r3, #4]
 8004fea:	609a      	str	r2, [r3, #8]
 8004fec:	60da      	str	r2, [r3, #12]
 8004fee:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ff8:	d154      	bne.n	80050a4 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ffa:	4b2c      	ldr	r3, [pc, #176]	; (80050ac <HAL_PCD_MspInit+0xd4>)
 8004ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ffe:	4a2b      	ldr	r2, [pc, #172]	; (80050ac <HAL_PCD_MspInit+0xd4>)
 8005000:	f043 0301 	orr.w	r3, r3, #1
 8005004:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005006:	4b29      	ldr	r3, [pc, #164]	; (80050ac <HAL_PCD_MspInit+0xd4>)
 8005008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	613b      	str	r3, [r7, #16]
 8005010:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8005012:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8005016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005018:	2302      	movs	r3, #2
 800501a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800501c:	2300      	movs	r3, #0
 800501e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005020:	2303      	movs	r3, #3
 8005022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005024:	230a      	movs	r3, #10
 8005026:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005028:	f107 0314 	add.w	r3, r7, #20
 800502c:	4619      	mov	r1, r3
 800502e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005032:	f000 faf9 	bl	8005628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8005036:	f44f 7300 	mov.w	r3, #512	; 0x200
 800503a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800503c:	2300      	movs	r3, #0
 800503e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005040:	2300      	movs	r3, #0
 8005042:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8005044:	f107 0314 	add.w	r3, r7, #20
 8005048:	4619      	mov	r1, r3
 800504a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800504e:	f000 faeb 	bl	8005628 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005052:	4b16      	ldr	r3, [pc, #88]	; (80050ac <HAL_PCD_MspInit+0xd4>)
 8005054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005056:	4a15      	ldr	r2, [pc, #84]	; (80050ac <HAL_PCD_MspInit+0xd4>)
 8005058:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800505c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800505e:	4b13      	ldr	r3, [pc, #76]	; (80050ac <HAL_PCD_MspInit+0xd4>)
 8005060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005062:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005066:	60fb      	str	r3, [r7, #12]
 8005068:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800506a:	4b10      	ldr	r3, [pc, #64]	; (80050ac <HAL_PCD_MspInit+0xd4>)
 800506c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d114      	bne.n	80050a0 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005076:	4b0d      	ldr	r3, [pc, #52]	; (80050ac <HAL_PCD_MspInit+0xd4>)
 8005078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800507a:	4a0c      	ldr	r2, [pc, #48]	; (80050ac <HAL_PCD_MspInit+0xd4>)
 800507c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005080:	6593      	str	r3, [r2, #88]	; 0x58
 8005082:	4b0a      	ldr	r3, [pc, #40]	; (80050ac <HAL_PCD_MspInit+0xd4>)
 8005084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800508a:	60bb      	str	r3, [r7, #8]
 800508c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800508e:	f000 fe81 	bl	8005d94 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005092:	4b06      	ldr	r3, [pc, #24]	; (80050ac <HAL_PCD_MspInit+0xd4>)
 8005094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005096:	4a05      	ldr	r2, [pc, #20]	; (80050ac <HAL_PCD_MspInit+0xd4>)
 8005098:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800509c:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800509e:	e001      	b.n	80050a4 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 80050a0:	f000 fe78 	bl	8005d94 <HAL_PWREx_EnableVddUSB>
}
 80050a4:	bf00      	nop
 80050a6:	3728      	adds	r7, #40	; 0x28
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	40021000 	.word	0x40021000

080050b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050b0:	b480      	push	{r7}
 80050b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80050b4:	bf00      	nop
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80050be:	b480      	push	{r7}
 80050c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80050c2:	e7fe      	b.n	80050c2 <HardFault_Handler+0x4>

080050c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80050c4:	b480      	push	{r7}
 80050c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80050c8:	e7fe      	b.n	80050c8 <MemManage_Handler+0x4>

080050ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80050ca:	b480      	push	{r7}
 80050cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80050ce:	e7fe      	b.n	80050ce <BusFault_Handler+0x4>

080050d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80050d0:	b480      	push	{r7}
 80050d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80050d4:	e7fe      	b.n	80050d4 <UsageFault_Handler+0x4>

080050d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80050d6:	b480      	push	{r7}
 80050d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80050da:	bf00      	nop
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80050e4:	b480      	push	{r7}
 80050e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80050e8:	bf00      	nop
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80050f2:	b480      	push	{r7}
 80050f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80050f6:	bf00      	nop
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005104:	f000 f96a 	bl	80053dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005108:	bf00      	nop
 800510a:	bd80      	pop	{r7, pc}

0800510c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0
	return 1;
 8005110:	2301      	movs	r3, #1
}
 8005112:	4618      	mov	r0, r3
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <_kill>:

int _kill(int pid, int sig)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005126:	f005 f831 	bl	800a18c <__errno>
 800512a:	4602      	mov	r2, r0
 800512c:	2316      	movs	r3, #22
 800512e:	6013      	str	r3, [r2, #0]
	return -1;
 8005130:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005134:	4618      	mov	r0, r3
 8005136:	3708      	adds	r7, #8
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <_exit>:

void _exit (int status)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005144:	f04f 31ff 	mov.w	r1, #4294967295
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f7ff ffe7 	bl	800511c <_kill>
	while (1) {}		/* Make sure we hang here */
 800514e:	e7fe      	b.n	800514e <_exit+0x12>

08005150 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800515c:	2300      	movs	r3, #0
 800515e:	617b      	str	r3, [r7, #20]
 8005160:	e00a      	b.n	8005178 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005162:	f3af 8000 	nop.w
 8005166:	4601      	mov	r1, r0
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	1c5a      	adds	r2, r3, #1
 800516c:	60ba      	str	r2, [r7, #8]
 800516e:	b2ca      	uxtb	r2, r1
 8005170:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	3301      	adds	r3, #1
 8005176:	617b      	str	r3, [r7, #20]
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	429a      	cmp	r2, r3
 800517e:	dbf0      	blt.n	8005162 <_read+0x12>
	}

return len;
 8005180:	687b      	ldr	r3, [r7, #4]
}
 8005182:	4618      	mov	r0, r3
 8005184:	3718      	adds	r7, #24
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
	...

0800518c <_write>:

extern UART_HandleTypeDef hlpuart1;

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
	{
		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
	}
	return len;*/
	HAL_UART_Transmit(&hlpuart1, ptr, len , HAL_MAX_DELAY);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	b29a      	uxth	r2, r3
 800519c:	f04f 33ff 	mov.w	r3, #4294967295
 80051a0:	68b9      	ldr	r1, [r7, #8]
 80051a2:	4804      	ldr	r0, [pc, #16]	; (80051b4 <_write+0x28>)
 80051a4:	f003 f8ac 	bl	8008300 <HAL_UART_Transmit>
	return len;
 80051a8:	687b      	ldr	r3, [r7, #4]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	200008bc 	.word	0x200008bc

080051b8 <_close>:

int _close(int file)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
	return -1;
 80051c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80051e0:	605a      	str	r2, [r3, #4]
	return 0;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <_isatty>:

int _isatty(int file)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
	return 1;
 80051f8:	2301      	movs	r3, #1
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005206:	b480      	push	{r7}
 8005208:	b085      	sub	sp, #20
 800520a:	af00      	add	r7, sp, #0
 800520c:	60f8      	str	r0, [r7, #12]
 800520e:	60b9      	str	r1, [r7, #8]
 8005210:	607a      	str	r2, [r7, #4]
	return 0;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005228:	4b11      	ldr	r3, [pc, #68]	; (8005270 <_sbrk+0x50>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d102      	bne.n	8005236 <_sbrk+0x16>
		heap_end = &end;
 8005230:	4b0f      	ldr	r3, [pc, #60]	; (8005270 <_sbrk+0x50>)
 8005232:	4a10      	ldr	r2, [pc, #64]	; (8005274 <_sbrk+0x54>)
 8005234:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005236:	4b0e      	ldr	r3, [pc, #56]	; (8005270 <_sbrk+0x50>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800523c:	4b0c      	ldr	r3, [pc, #48]	; (8005270 <_sbrk+0x50>)
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4413      	add	r3, r2
 8005244:	466a      	mov	r2, sp
 8005246:	4293      	cmp	r3, r2
 8005248:	d907      	bls.n	800525a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800524a:	f004 ff9f 	bl	800a18c <__errno>
 800524e:	4602      	mov	r2, r0
 8005250:	230c      	movs	r3, #12
 8005252:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005254:	f04f 33ff 	mov.w	r3, #4294967295
 8005258:	e006      	b.n	8005268 <_sbrk+0x48>
	}

	heap_end += incr;
 800525a:	4b05      	ldr	r3, [pc, #20]	; (8005270 <_sbrk+0x50>)
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4413      	add	r3, r2
 8005262:	4a03      	ldr	r2, [pc, #12]	; (8005270 <_sbrk+0x50>)
 8005264:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005266:	68fb      	ldr	r3, [r7, #12]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	20000174 	.word	0x20000174
 8005274:	200009c8 	.word	0x200009c8

08005278 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005278:	b480      	push	{r7}
 800527a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800527c:	4b17      	ldr	r3, [pc, #92]	; (80052dc <SystemInit+0x64>)
 800527e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005282:	4a16      	ldr	r2, [pc, #88]	; (80052dc <SystemInit+0x64>)
 8005284:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005288:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800528c:	4b14      	ldr	r3, [pc, #80]	; (80052e0 <SystemInit+0x68>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a13      	ldr	r2, [pc, #76]	; (80052e0 <SystemInit+0x68>)
 8005292:	f043 0301 	orr.w	r3, r3, #1
 8005296:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8005298:	4b11      	ldr	r3, [pc, #68]	; (80052e0 <SystemInit+0x68>)
 800529a:	2200      	movs	r2, #0
 800529c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800529e:	4b10      	ldr	r3, [pc, #64]	; (80052e0 <SystemInit+0x68>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a0f      	ldr	r2, [pc, #60]	; (80052e0 <SystemInit+0x68>)
 80052a4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80052a8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80052ac:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80052ae:	4b0c      	ldr	r3, [pc, #48]	; (80052e0 <SystemInit+0x68>)
 80052b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80052b4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80052b6:	4b0a      	ldr	r3, [pc, #40]	; (80052e0 <SystemInit+0x68>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a09      	ldr	r2, [pc, #36]	; (80052e0 <SystemInit+0x68>)
 80052bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052c0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80052c2:	4b07      	ldr	r3, [pc, #28]	; (80052e0 <SystemInit+0x68>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80052c8:	4b04      	ldr	r3, [pc, #16]	; (80052dc <SystemInit+0x64>)
 80052ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80052ce:	609a      	str	r2, [r3, #8]
#endif
}
 80052d0:	bf00      	nop
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	e000ed00 	.word	0xe000ed00
 80052e0:	40021000 	.word	0x40021000

080052e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80052e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800531c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80052e8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80052ea:	e003      	b.n	80052f4 <LoopCopyDataInit>

080052ec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80052ec:	4b0c      	ldr	r3, [pc, #48]	; (8005320 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80052ee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80052f0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80052f2:	3104      	adds	r1, #4

080052f4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80052f4:	480b      	ldr	r0, [pc, #44]	; (8005324 <LoopForever+0xa>)
	ldr	r3, =_edata
 80052f6:	4b0c      	ldr	r3, [pc, #48]	; (8005328 <LoopForever+0xe>)
	adds	r2, r0, r1
 80052f8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80052fa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80052fc:	d3f6      	bcc.n	80052ec <CopyDataInit>
	ldr	r2, =_sbss
 80052fe:	4a0b      	ldr	r2, [pc, #44]	; (800532c <LoopForever+0x12>)
	b	LoopFillZerobss
 8005300:	e002      	b.n	8005308 <LoopFillZerobss>

08005302 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005302:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005304:	f842 3b04 	str.w	r3, [r2], #4

08005308 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005308:	4b09      	ldr	r3, [pc, #36]	; (8005330 <LoopForever+0x16>)
	cmp	r2, r3
 800530a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800530c:	d3f9      	bcc.n	8005302 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800530e:	f7ff ffb3 	bl	8005278 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005312:	f004 ff53 	bl	800a1bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005316:	f7ff fb0d 	bl	8004934 <main>

0800531a <LoopForever>:

LoopForever:
    b LoopForever
 800531a:	e7fe      	b.n	800531a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800531c:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8005320:	0800be88 	.word	0x0800be88
	ldr	r0, =_sdata
 8005324:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005328:	200000d4 	.word	0x200000d4
	ldr	r2, =_sbss
 800532c:	200000d8 	.word	0x200000d8
	ldr	r3, = _ebss
 8005330:	200009c4 	.word	0x200009c4

08005334 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005334:	e7fe      	b.n	8005334 <ADC1_IRQHandler>

08005336 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b082      	sub	sp, #8
 800533a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800533c:	2300      	movs	r3, #0
 800533e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005340:	2003      	movs	r0, #3
 8005342:	f000 f93d 	bl	80055c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005346:	2000      	movs	r0, #0
 8005348:	f000 f80e 	bl	8005368 <HAL_InitTick>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d002      	beq.n	8005358 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	71fb      	strb	r3, [r7, #7]
 8005356:	e001      	b.n	800535c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005358:	f7ff fd5e 	bl	8004e18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800535c:	79fb      	ldrb	r3, [r7, #7]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3708      	adds	r7, #8
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
	...

08005368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005370:	2300      	movs	r3, #0
 8005372:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005374:	4b16      	ldr	r3, [pc, #88]	; (80053d0 <HAL_InitTick+0x68>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d022      	beq.n	80053c2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800537c:	4b15      	ldr	r3, [pc, #84]	; (80053d4 <HAL_InitTick+0x6c>)
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	4b13      	ldr	r3, [pc, #76]	; (80053d0 <HAL_InitTick+0x68>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005388:	fbb1 f3f3 	udiv	r3, r1, r3
 800538c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005390:	4618      	mov	r0, r3
 8005392:	f000 f93c 	bl	800560e <HAL_SYSTICK_Config>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10f      	bne.n	80053bc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b0f      	cmp	r3, #15
 80053a0:	d809      	bhi.n	80053b6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80053a2:	2200      	movs	r2, #0
 80053a4:	6879      	ldr	r1, [r7, #4]
 80053a6:	f04f 30ff 	mov.w	r0, #4294967295
 80053aa:	f000 f914 	bl	80055d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80053ae:	4a0a      	ldr	r2, [pc, #40]	; (80053d8 <HAL_InitTick+0x70>)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6013      	str	r3, [r2, #0]
 80053b4:	e007      	b.n	80053c6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	73fb      	strb	r3, [r7, #15]
 80053ba:	e004      	b.n	80053c6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	73fb      	strb	r3, [r7, #15]
 80053c0:	e001      	b.n	80053c6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80053c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	2000006c 	.word	0x2000006c
 80053d4:	20000064 	.word	0x20000064
 80053d8:	20000068 	.word	0x20000068

080053dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053dc:	b480      	push	{r7}
 80053de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80053e0:	4b05      	ldr	r3, [pc, #20]	; (80053f8 <HAL_IncTick+0x1c>)
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	4b05      	ldr	r3, [pc, #20]	; (80053fc <HAL_IncTick+0x20>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4413      	add	r3, r2
 80053ea:	4a03      	ldr	r2, [pc, #12]	; (80053f8 <HAL_IncTick+0x1c>)
 80053ec:	6013      	str	r3, [r2, #0]
}
 80053ee:	bf00      	nop
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr
 80053f8:	200009bc 	.word	0x200009bc
 80053fc:	2000006c 	.word	0x2000006c

08005400 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005400:	b480      	push	{r7}
 8005402:	af00      	add	r7, sp, #0
  return uwTick;
 8005404:	4b03      	ldr	r3, [pc, #12]	; (8005414 <HAL_GetTick+0x14>)
 8005406:	681b      	ldr	r3, [r3, #0]
}
 8005408:	4618      	mov	r0, r3
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	200009bc 	.word	0x200009bc

08005418 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005420:	f7ff ffee 	bl	8005400 <HAL_GetTick>
 8005424:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005430:	d004      	beq.n	800543c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005432:	4b09      	ldr	r3, [pc, #36]	; (8005458 <HAL_Delay+0x40>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	4413      	add	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800543c:	bf00      	nop
 800543e:	f7ff ffdf 	bl	8005400 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	429a      	cmp	r2, r3
 800544c:	d8f7      	bhi.n	800543e <HAL_Delay+0x26>
  {
  }
}
 800544e:	bf00      	nop
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	2000006c 	.word	0x2000006c

0800545c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f003 0307 	and.w	r3, r3, #7
 800546a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800546c:	4b0c      	ldr	r3, [pc, #48]	; (80054a0 <__NVIC_SetPriorityGrouping+0x44>)
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005478:	4013      	ands	r3, r2
 800547a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005484:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800548c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800548e:	4a04      	ldr	r2, [pc, #16]	; (80054a0 <__NVIC_SetPriorityGrouping+0x44>)
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	60d3      	str	r3, [r2, #12]
}
 8005494:	bf00      	nop
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr
 80054a0:	e000ed00 	.word	0xe000ed00

080054a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80054a4:	b480      	push	{r7}
 80054a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054a8:	4b04      	ldr	r3, [pc, #16]	; (80054bc <__NVIC_GetPriorityGrouping+0x18>)
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	0a1b      	lsrs	r3, r3, #8
 80054ae:	f003 0307 	and.w	r3, r3, #7
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	e000ed00 	.word	0xe000ed00

080054c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	4603      	mov	r3, r0
 80054c8:	6039      	str	r1, [r7, #0]
 80054ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	db0a      	blt.n	80054ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	b2da      	uxtb	r2, r3
 80054d8:	490c      	ldr	r1, [pc, #48]	; (800550c <__NVIC_SetPriority+0x4c>)
 80054da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054de:	0112      	lsls	r2, r2, #4
 80054e0:	b2d2      	uxtb	r2, r2
 80054e2:	440b      	add	r3, r1
 80054e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054e8:	e00a      	b.n	8005500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	b2da      	uxtb	r2, r3
 80054ee:	4908      	ldr	r1, [pc, #32]	; (8005510 <__NVIC_SetPriority+0x50>)
 80054f0:	79fb      	ldrb	r3, [r7, #7]
 80054f2:	f003 030f 	and.w	r3, r3, #15
 80054f6:	3b04      	subs	r3, #4
 80054f8:	0112      	lsls	r2, r2, #4
 80054fa:	b2d2      	uxtb	r2, r2
 80054fc:	440b      	add	r3, r1
 80054fe:	761a      	strb	r2, [r3, #24]
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr
 800550c:	e000e100 	.word	0xe000e100
 8005510:	e000ed00 	.word	0xe000ed00

08005514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005514:	b480      	push	{r7}
 8005516:	b089      	sub	sp, #36	; 0x24
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f003 0307 	and.w	r3, r3, #7
 8005526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	f1c3 0307 	rsb	r3, r3, #7
 800552e:	2b04      	cmp	r3, #4
 8005530:	bf28      	it	cs
 8005532:	2304      	movcs	r3, #4
 8005534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	3304      	adds	r3, #4
 800553a:	2b06      	cmp	r3, #6
 800553c:	d902      	bls.n	8005544 <NVIC_EncodePriority+0x30>
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	3b03      	subs	r3, #3
 8005542:	e000      	b.n	8005546 <NVIC_EncodePriority+0x32>
 8005544:	2300      	movs	r3, #0
 8005546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005548:	f04f 32ff 	mov.w	r2, #4294967295
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	fa02 f303 	lsl.w	r3, r2, r3
 8005552:	43da      	mvns	r2, r3
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	401a      	ands	r2, r3
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800555c:	f04f 31ff 	mov.w	r1, #4294967295
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	fa01 f303 	lsl.w	r3, r1, r3
 8005566:	43d9      	mvns	r1, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800556c:	4313      	orrs	r3, r2
         );
}
 800556e:	4618      	mov	r0, r3
 8005570:	3724      	adds	r7, #36	; 0x24
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
	...

0800557c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	3b01      	subs	r3, #1
 8005588:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800558c:	d301      	bcc.n	8005592 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800558e:	2301      	movs	r3, #1
 8005590:	e00f      	b.n	80055b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005592:	4a0a      	ldr	r2, [pc, #40]	; (80055bc <SysTick_Config+0x40>)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	3b01      	subs	r3, #1
 8005598:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800559a:	210f      	movs	r1, #15
 800559c:	f04f 30ff 	mov.w	r0, #4294967295
 80055a0:	f7ff ff8e 	bl	80054c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055a4:	4b05      	ldr	r3, [pc, #20]	; (80055bc <SysTick_Config+0x40>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055aa:	4b04      	ldr	r3, [pc, #16]	; (80055bc <SysTick_Config+0x40>)
 80055ac:	2207      	movs	r2, #7
 80055ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	e000e010 	.word	0xe000e010

080055c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7ff ff47 	bl	800545c <__NVIC_SetPriorityGrouping>
}
 80055ce:	bf00      	nop
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b086      	sub	sp, #24
 80055da:	af00      	add	r7, sp, #0
 80055dc:	4603      	mov	r3, r0
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	607a      	str	r2, [r7, #4]
 80055e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80055e4:	2300      	movs	r3, #0
 80055e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80055e8:	f7ff ff5c 	bl	80054a4 <__NVIC_GetPriorityGrouping>
 80055ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	68b9      	ldr	r1, [r7, #8]
 80055f2:	6978      	ldr	r0, [r7, #20]
 80055f4:	f7ff ff8e 	bl	8005514 <NVIC_EncodePriority>
 80055f8:	4602      	mov	r2, r0
 80055fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055fe:	4611      	mov	r1, r2
 8005600:	4618      	mov	r0, r3
 8005602:	f7ff ff5d 	bl	80054c0 <__NVIC_SetPriority>
}
 8005606:	bf00      	nop
 8005608:	3718      	adds	r7, #24
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b082      	sub	sp, #8
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7ff ffb0 	bl	800557c <SysTick_Config>
 800561c:	4603      	mov	r3, r0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3708      	adds	r7, #8
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
	...

08005628 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005628:	b480      	push	{r7}
 800562a:	b087      	sub	sp, #28
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005632:	2300      	movs	r3, #0
 8005634:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005636:	e166      	b.n	8005906 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	2101      	movs	r1, #1
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	fa01 f303 	lsl.w	r3, r1, r3
 8005644:	4013      	ands	r3, r2
 8005646:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2b00      	cmp	r3, #0
 800564c:	f000 8158 	beq.w	8005900 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	2b02      	cmp	r3, #2
 8005656:	d003      	beq.n	8005660 <HAL_GPIO_Init+0x38>
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	2b12      	cmp	r3, #18
 800565e:	d123      	bne.n	80056a8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	08da      	lsrs	r2, r3, #3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	3208      	adds	r2, #8
 8005668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800566c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f003 0307 	and.w	r3, r3, #7
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	220f      	movs	r2, #15
 8005678:	fa02 f303 	lsl.w	r3, r2, r3
 800567c:	43db      	mvns	r3, r3
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	4013      	ands	r3, r2
 8005682:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	691a      	ldr	r2, [r3, #16]
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	f003 0307 	and.w	r3, r3, #7
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	fa02 f303 	lsl.w	r3, r2, r3
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	4313      	orrs	r3, r2
 8005698:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	08da      	lsrs	r2, r3, #3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	3208      	adds	r2, #8
 80056a2:	6939      	ldr	r1, [r7, #16]
 80056a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	005b      	lsls	r3, r3, #1
 80056b2:	2203      	movs	r2, #3
 80056b4:	fa02 f303 	lsl.w	r3, r2, r3
 80056b8:	43db      	mvns	r3, r3
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	4013      	ands	r3, r2
 80056be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f003 0203 	and.w	r2, r3, #3
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	005b      	lsls	r3, r3, #1
 80056cc:	fa02 f303 	lsl.w	r3, r2, r3
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d00b      	beq.n	80056fc <HAL_GPIO_Init+0xd4>
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d007      	beq.n	80056fc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80056f0:	2b11      	cmp	r3, #17
 80056f2:	d003      	beq.n	80056fc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	2b12      	cmp	r3, #18
 80056fa:	d130      	bne.n	800575e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	005b      	lsls	r3, r3, #1
 8005706:	2203      	movs	r2, #3
 8005708:	fa02 f303 	lsl.w	r3, r2, r3
 800570c:	43db      	mvns	r3, r3
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	4013      	ands	r3, r2
 8005712:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	68da      	ldr	r2, [r3, #12]
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	005b      	lsls	r3, r3, #1
 800571c:	fa02 f303 	lsl.w	r3, r2, r3
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	4313      	orrs	r3, r2
 8005724:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005732:	2201      	movs	r2, #1
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	fa02 f303 	lsl.w	r3, r2, r3
 800573a:	43db      	mvns	r3, r3
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	4013      	ands	r3, r2
 8005740:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	091b      	lsrs	r3, r3, #4
 8005748:	f003 0201 	and.w	r2, r3, #1
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	fa02 f303 	lsl.w	r3, r2, r3
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	4313      	orrs	r3, r2
 8005756:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	005b      	lsls	r3, r3, #1
 8005768:	2203      	movs	r2, #3
 800576a:	fa02 f303 	lsl.w	r3, r2, r3
 800576e:	43db      	mvns	r3, r3
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	4013      	ands	r3, r2
 8005774:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	689a      	ldr	r2, [r3, #8]
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	005b      	lsls	r3, r3, #1
 800577e:	fa02 f303 	lsl.w	r3, r2, r3
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	4313      	orrs	r3, r2
 8005786:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005796:	2b00      	cmp	r3, #0
 8005798:	f000 80b2 	beq.w	8005900 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800579c:	4b61      	ldr	r3, [pc, #388]	; (8005924 <HAL_GPIO_Init+0x2fc>)
 800579e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057a0:	4a60      	ldr	r2, [pc, #384]	; (8005924 <HAL_GPIO_Init+0x2fc>)
 80057a2:	f043 0301 	orr.w	r3, r3, #1
 80057a6:	6613      	str	r3, [r2, #96]	; 0x60
 80057a8:	4b5e      	ldr	r3, [pc, #376]	; (8005924 <HAL_GPIO_Init+0x2fc>)
 80057aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ac:	f003 0301 	and.w	r3, r3, #1
 80057b0:	60bb      	str	r3, [r7, #8]
 80057b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80057b4:	4a5c      	ldr	r2, [pc, #368]	; (8005928 <HAL_GPIO_Init+0x300>)
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	089b      	lsrs	r3, r3, #2
 80057ba:	3302      	adds	r3, #2
 80057bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f003 0303 	and.w	r3, r3, #3
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	220f      	movs	r2, #15
 80057cc:	fa02 f303 	lsl.w	r3, r2, r3
 80057d0:	43db      	mvns	r3, r3
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	4013      	ands	r3, r2
 80057d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80057de:	d02b      	beq.n	8005838 <HAL_GPIO_Init+0x210>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a52      	ldr	r2, [pc, #328]	; (800592c <HAL_GPIO_Init+0x304>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d025      	beq.n	8005834 <HAL_GPIO_Init+0x20c>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a51      	ldr	r2, [pc, #324]	; (8005930 <HAL_GPIO_Init+0x308>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d01f      	beq.n	8005830 <HAL_GPIO_Init+0x208>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a50      	ldr	r2, [pc, #320]	; (8005934 <HAL_GPIO_Init+0x30c>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d019      	beq.n	800582c <HAL_GPIO_Init+0x204>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a4f      	ldr	r2, [pc, #316]	; (8005938 <HAL_GPIO_Init+0x310>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d013      	beq.n	8005828 <HAL_GPIO_Init+0x200>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a4e      	ldr	r2, [pc, #312]	; (800593c <HAL_GPIO_Init+0x314>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d00d      	beq.n	8005824 <HAL_GPIO_Init+0x1fc>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a4d      	ldr	r2, [pc, #308]	; (8005940 <HAL_GPIO_Init+0x318>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d007      	beq.n	8005820 <HAL_GPIO_Init+0x1f8>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a4c      	ldr	r2, [pc, #304]	; (8005944 <HAL_GPIO_Init+0x31c>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d101      	bne.n	800581c <HAL_GPIO_Init+0x1f4>
 8005818:	2307      	movs	r3, #7
 800581a:	e00e      	b.n	800583a <HAL_GPIO_Init+0x212>
 800581c:	2308      	movs	r3, #8
 800581e:	e00c      	b.n	800583a <HAL_GPIO_Init+0x212>
 8005820:	2306      	movs	r3, #6
 8005822:	e00a      	b.n	800583a <HAL_GPIO_Init+0x212>
 8005824:	2305      	movs	r3, #5
 8005826:	e008      	b.n	800583a <HAL_GPIO_Init+0x212>
 8005828:	2304      	movs	r3, #4
 800582a:	e006      	b.n	800583a <HAL_GPIO_Init+0x212>
 800582c:	2303      	movs	r3, #3
 800582e:	e004      	b.n	800583a <HAL_GPIO_Init+0x212>
 8005830:	2302      	movs	r3, #2
 8005832:	e002      	b.n	800583a <HAL_GPIO_Init+0x212>
 8005834:	2301      	movs	r3, #1
 8005836:	e000      	b.n	800583a <HAL_GPIO_Init+0x212>
 8005838:	2300      	movs	r3, #0
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	f002 0203 	and.w	r2, r2, #3
 8005840:	0092      	lsls	r2, r2, #2
 8005842:	4093      	lsls	r3, r2
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	4313      	orrs	r3, r2
 8005848:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800584a:	4937      	ldr	r1, [pc, #220]	; (8005928 <HAL_GPIO_Init+0x300>)
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	089b      	lsrs	r3, r3, #2
 8005850:	3302      	adds	r3, #2
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005858:	4b3b      	ldr	r3, [pc, #236]	; (8005948 <HAL_GPIO_Init+0x320>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	43db      	mvns	r3, r3
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	4013      	ands	r3, r2
 8005866:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d003      	beq.n	800587c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	4313      	orrs	r3, r2
 800587a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800587c:	4a32      	ldr	r2, [pc, #200]	; (8005948 <HAL_GPIO_Init+0x320>)
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8005882:	4b31      	ldr	r3, [pc, #196]	; (8005948 <HAL_GPIO_Init+0x320>)
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	43db      	mvns	r3, r3
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	4013      	ands	r3, r2
 8005890:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80058a6:	4a28      	ldr	r2, [pc, #160]	; (8005948 <HAL_GPIO_Init+0x320>)
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80058ac:	4b26      	ldr	r3, [pc, #152]	; (8005948 <HAL_GPIO_Init+0x320>)
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	43db      	mvns	r3, r3
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	4013      	ands	r3, r2
 80058ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d003      	beq.n	80058d0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80058d0:	4a1d      	ldr	r2, [pc, #116]	; (8005948 <HAL_GPIO_Init+0x320>)
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80058d6:	4b1c      	ldr	r3, [pc, #112]	; (8005948 <HAL_GPIO_Init+0x320>)
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	43db      	mvns	r3, r3
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	4013      	ands	r3, r2
 80058e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80058fa:	4a13      	ldr	r2, [pc, #76]	; (8005948 <HAL_GPIO_Init+0x320>)
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	3301      	adds	r3, #1
 8005904:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	fa22 f303 	lsr.w	r3, r2, r3
 8005910:	2b00      	cmp	r3, #0
 8005912:	f47f ae91 	bne.w	8005638 <HAL_GPIO_Init+0x10>
  }
}
 8005916:	bf00      	nop
 8005918:	371c      	adds	r7, #28
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	40021000 	.word	0x40021000
 8005928:	40010000 	.word	0x40010000
 800592c:	48000400 	.word	0x48000400
 8005930:	48000800 	.word	0x48000800
 8005934:	48000c00 	.word	0x48000c00
 8005938:	48001000 	.word	0x48001000
 800593c:	48001400 	.word	0x48001400
 8005940:	48001800 	.word	0x48001800
 8005944:	48001c00 	.word	0x48001c00
 8005948:	40010400 	.word	0x40010400

0800594c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	460b      	mov	r3, r1
 8005956:	807b      	strh	r3, [r7, #2]
 8005958:	4613      	mov	r3, r2
 800595a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800595c:	787b      	ldrb	r3, [r7, #1]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005962:	887a      	ldrh	r2, [r7, #2]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005968:	e002      	b.n	8005970 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800596a:	887a      	ldrh	r2, [r7, #2]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800597c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800597e:	b08f      	sub	sp, #60	; 0x3c
 8005980:	af0a      	add	r7, sp, #40	; 0x28
 8005982:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d101      	bne.n	800598e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e116      	b.n	8005bbc <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2b00      	cmp	r3, #0
 800599e:	d106      	bne.n	80059ae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f7ff fb15 	bl	8004fd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2203      	movs	r2, #3
 80059b2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d102      	bne.n	80059c8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f004 f993 	bl	8009cf8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	603b      	str	r3, [r7, #0]
 80059d8:	687e      	ldr	r6, [r7, #4]
 80059da:	466d      	mov	r5, sp
 80059dc:	f106 0410 	add.w	r4, r6, #16
 80059e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80059ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80059f0:	1d33      	adds	r3, r6, #4
 80059f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059f4:	6838      	ldr	r0, [r7, #0]
 80059f6:	f004 f92d 	bl	8009c54 <USB_CoreInit>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d005      	beq.n	8005a0c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e0d7      	b.n	8005bbc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2100      	movs	r1, #0
 8005a12:	4618      	mov	r0, r3
 8005a14:	f004 f981 	bl	8009d1a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a18:	2300      	movs	r3, #0
 8005a1a:	73fb      	strb	r3, [r7, #15]
 8005a1c:	e04a      	b.n	8005ab4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005a1e:	7bfa      	ldrb	r2, [r7, #15]
 8005a20:	6879      	ldr	r1, [r7, #4]
 8005a22:	4613      	mov	r3, r2
 8005a24:	00db      	lsls	r3, r3, #3
 8005a26:	1a9b      	subs	r3, r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	440b      	add	r3, r1
 8005a2c:	333d      	adds	r3, #61	; 0x3d
 8005a2e:	2201      	movs	r2, #1
 8005a30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005a32:	7bfa      	ldrb	r2, [r7, #15]
 8005a34:	6879      	ldr	r1, [r7, #4]
 8005a36:	4613      	mov	r3, r2
 8005a38:	00db      	lsls	r3, r3, #3
 8005a3a:	1a9b      	subs	r3, r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	440b      	add	r3, r1
 8005a40:	333c      	adds	r3, #60	; 0x3c
 8005a42:	7bfa      	ldrb	r2, [r7, #15]
 8005a44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005a46:	7bfa      	ldrb	r2, [r7, #15]
 8005a48:	7bfb      	ldrb	r3, [r7, #15]
 8005a4a:	b298      	uxth	r0, r3
 8005a4c:	6879      	ldr	r1, [r7, #4]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	00db      	lsls	r3, r3, #3
 8005a52:	1a9b      	subs	r3, r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	440b      	add	r3, r1
 8005a58:	3342      	adds	r3, #66	; 0x42
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005a5e:	7bfa      	ldrb	r2, [r7, #15]
 8005a60:	6879      	ldr	r1, [r7, #4]
 8005a62:	4613      	mov	r3, r2
 8005a64:	00db      	lsls	r3, r3, #3
 8005a66:	1a9b      	subs	r3, r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	440b      	add	r3, r1
 8005a6c:	333f      	adds	r3, #63	; 0x3f
 8005a6e:	2200      	movs	r2, #0
 8005a70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005a72:	7bfa      	ldrb	r2, [r7, #15]
 8005a74:	6879      	ldr	r1, [r7, #4]
 8005a76:	4613      	mov	r3, r2
 8005a78:	00db      	lsls	r3, r3, #3
 8005a7a:	1a9b      	subs	r3, r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	440b      	add	r3, r1
 8005a80:	3344      	adds	r3, #68	; 0x44
 8005a82:	2200      	movs	r2, #0
 8005a84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005a86:	7bfa      	ldrb	r2, [r7, #15]
 8005a88:	6879      	ldr	r1, [r7, #4]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	00db      	lsls	r3, r3, #3
 8005a8e:	1a9b      	subs	r3, r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	440b      	add	r3, r1
 8005a94:	3348      	adds	r3, #72	; 0x48
 8005a96:	2200      	movs	r2, #0
 8005a98:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005a9a:	7bfa      	ldrb	r2, [r7, #15]
 8005a9c:	6879      	ldr	r1, [r7, #4]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	00db      	lsls	r3, r3, #3
 8005aa2:	1a9b      	subs	r3, r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	440b      	add	r3, r1
 8005aa8:	3350      	adds	r3, #80	; 0x50
 8005aaa:	2200      	movs	r2, #0
 8005aac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005aae:	7bfb      	ldrb	r3, [r7, #15]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	73fb      	strb	r3, [r7, #15]
 8005ab4:	7bfa      	ldrb	r2, [r7, #15]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d3af      	bcc.n	8005a1e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005abe:	2300      	movs	r3, #0
 8005ac0:	73fb      	strb	r3, [r7, #15]
 8005ac2:	e044      	b.n	8005b4e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005ac4:	7bfa      	ldrb	r2, [r7, #15]
 8005ac6:	6879      	ldr	r1, [r7, #4]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	1a9b      	subs	r3, r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	440b      	add	r3, r1
 8005ad2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005ada:	7bfa      	ldrb	r2, [r7, #15]
 8005adc:	6879      	ldr	r1, [r7, #4]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	00db      	lsls	r3, r3, #3
 8005ae2:	1a9b      	subs	r3, r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	440b      	add	r3, r1
 8005ae8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005aec:	7bfa      	ldrb	r2, [r7, #15]
 8005aee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005af0:	7bfa      	ldrb	r2, [r7, #15]
 8005af2:	6879      	ldr	r1, [r7, #4]
 8005af4:	4613      	mov	r3, r2
 8005af6:	00db      	lsls	r3, r3, #3
 8005af8:	1a9b      	subs	r3, r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	440b      	add	r3, r1
 8005afe:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005b02:	2200      	movs	r2, #0
 8005b04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005b06:	7bfa      	ldrb	r2, [r7, #15]
 8005b08:	6879      	ldr	r1, [r7, #4]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	00db      	lsls	r3, r3, #3
 8005b0e:	1a9b      	subs	r3, r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	440b      	add	r3, r1
 8005b14:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005b18:	2200      	movs	r2, #0
 8005b1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005b1c:	7bfa      	ldrb	r2, [r7, #15]
 8005b1e:	6879      	ldr	r1, [r7, #4]
 8005b20:	4613      	mov	r3, r2
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	1a9b      	subs	r3, r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	440b      	add	r3, r1
 8005b2a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005b2e:	2200      	movs	r2, #0
 8005b30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005b32:	7bfa      	ldrb	r2, [r7, #15]
 8005b34:	6879      	ldr	r1, [r7, #4]
 8005b36:	4613      	mov	r3, r2
 8005b38:	00db      	lsls	r3, r3, #3
 8005b3a:	1a9b      	subs	r3, r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	440b      	add	r3, r1
 8005b40:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005b44:	2200      	movs	r2, #0
 8005b46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b48:	7bfb      	ldrb	r3, [r7, #15]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	73fb      	strb	r3, [r7, #15]
 8005b4e:	7bfa      	ldrb	r2, [r7, #15]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d3b5      	bcc.n	8005ac4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	603b      	str	r3, [r7, #0]
 8005b5e:	687e      	ldr	r6, [r7, #4]
 8005b60:	466d      	mov	r5, sp
 8005b62:	f106 0410 	add.w	r4, r6, #16
 8005b66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005b72:	e885 0003 	stmia.w	r5, {r0, r1}
 8005b76:	1d33      	adds	r3, r6, #4
 8005b78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b7a:	6838      	ldr	r0, [r7, #0]
 8005b7c:	f004 f8f8 	bl	8009d70 <USB_DevInit>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d005      	beq.n	8005b92 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2202      	movs	r2, #2
 8005b8a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e014      	b.n	8005bbc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d102      	bne.n	8005bb0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f80a 	bl	8005bc4 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f004 fa7e 	bl	800a0b6 <USB_DevDisconnect>

  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3714      	adds	r7, #20
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005bc4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bf6:	f043 0303 	orr.w	r3, r3, #3
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3714      	adds	r7, #20
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005c10:	4b0d      	ldr	r3, [pc, #52]	; (8005c48 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005c18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c1c:	d102      	bne.n	8005c24 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8005c1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c22:	e00b      	b.n	8005c3c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005c24:	4b08      	ldr	r3, [pc, #32]	; (8005c48 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c32:	d102      	bne.n	8005c3a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005c34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c38:	e000      	b.n	8005c3c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8005c3a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	40007000 	.word	0x40007000

08005c4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d141      	bne.n	8005cde <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005c5a:	4b4b      	ldr	r3, [pc, #300]	; (8005d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c66:	d131      	bne.n	8005ccc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c68:	4b47      	ldr	r3, [pc, #284]	; (8005d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c6e:	4a46      	ldr	r2, [pc, #280]	; (8005d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c78:	4b43      	ldr	r3, [pc, #268]	; (8005d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005c80:	4a41      	ldr	r2, [pc, #260]	; (8005d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005c88:	4b40      	ldr	r3, [pc, #256]	; (8005d8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2232      	movs	r2, #50	; 0x32
 8005c8e:	fb02 f303 	mul.w	r3, r2, r3
 8005c92:	4a3f      	ldr	r2, [pc, #252]	; (8005d90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005c94:	fba2 2303 	umull	r2, r3, r2, r3
 8005c98:	0c9b      	lsrs	r3, r3, #18
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c9e:	e002      	b.n	8005ca6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ca6:	4b38      	ldr	r3, [pc, #224]	; (8005d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cb2:	d102      	bne.n	8005cba <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1f2      	bne.n	8005ca0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005cba:	4b33      	ldr	r3, [pc, #204]	; (8005d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cc6:	d158      	bne.n	8005d7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e057      	b.n	8005d7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ccc:	4b2e      	ldr	r3, [pc, #184]	; (8005d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cd2:	4a2d      	ldr	r2, [pc, #180]	; (8005d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005cdc:	e04d      	b.n	8005d7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ce4:	d141      	bne.n	8005d6a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005ce6:	4b28      	ldr	r3, [pc, #160]	; (8005d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005cee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cf2:	d131      	bne.n	8005d58 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005cf4:	4b24      	ldr	r3, [pc, #144]	; (8005d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cfa:	4a23      	ldr	r2, [pc, #140]	; (8005d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d04:	4b20      	ldr	r3, [pc, #128]	; (8005d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005d0c:	4a1e      	ldr	r2, [pc, #120]	; (8005d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005d14:	4b1d      	ldr	r3, [pc, #116]	; (8005d8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2232      	movs	r2, #50	; 0x32
 8005d1a:	fb02 f303 	mul.w	r3, r2, r3
 8005d1e:	4a1c      	ldr	r2, [pc, #112]	; (8005d90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005d20:	fba2 2303 	umull	r2, r3, r2, r3
 8005d24:	0c9b      	lsrs	r3, r3, #18
 8005d26:	3301      	adds	r3, #1
 8005d28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d2a:	e002      	b.n	8005d32 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d32:	4b15      	ldr	r3, [pc, #84]	; (8005d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d3e:	d102      	bne.n	8005d46 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1f2      	bne.n	8005d2c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005d46:	4b10      	ldr	r3, [pc, #64]	; (8005d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d52:	d112      	bne.n	8005d7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e011      	b.n	8005d7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d58:	4b0b      	ldr	r3, [pc, #44]	; (8005d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d5e:	4a0a      	ldr	r2, [pc, #40]	; (8005d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005d68:	e007      	b.n	8005d7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005d6a:	4b07      	ldr	r3, [pc, #28]	; (8005d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005d72:	4a05      	ldr	r2, [pc, #20]	; (8005d88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d78:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr
 8005d88:	40007000 	.word	0x40007000
 8005d8c:	20000064 	.word	0x20000064
 8005d90:	431bde83 	.word	0x431bde83

08005d94 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005d94:	b480      	push	{r7}
 8005d96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005d98:	4b05      	ldr	r3, [pc, #20]	; (8005db0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	4a04      	ldr	r2, [pc, #16]	; (8005db0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005d9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005da2:	6053      	str	r3, [r2, #4]
}
 8005da4:	bf00      	nop
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	40007000 	.word	0x40007000

08005db4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005db4:	b480      	push	{r7}
 8005db6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8005db8:	4b05      	ldr	r3, [pc, #20]	; (8005dd0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	4a04      	ldr	r2, [pc, #16]	; (8005dd0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005dbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005dc2:	6053      	str	r3, [r2, #4]
}
 8005dc4:	bf00      	nop
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	40007000 	.word	0x40007000

08005dd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b088      	sub	sp, #32
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e3db      	b.n	800659e <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005de6:	4ba4      	ldr	r3, [pc, #656]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f003 030c 	and.w	r3, r3, #12
 8005dee:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005df0:	4ba1      	ldr	r3, [pc, #644]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	f003 0303 	and.w	r3, r3, #3
 8005df8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0310 	and.w	r3, r3, #16
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f000 80e1 	beq.w	8005fca <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d007      	beq.n	8005e1e <HAL_RCC_OscConfig+0x4a>
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	2b0c      	cmp	r3, #12
 8005e12:	f040 8088 	bne.w	8005f26 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	f040 8084 	bne.w	8005f26 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005e1e:	4b96      	ldr	r3, [pc, #600]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d005      	beq.n	8005e36 <HAL_RCC_OscConfig+0x62>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d101      	bne.n	8005e36 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e3b3      	b.n	800659e <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a1a      	ldr	r2, [r3, #32]
 8005e3a:	4b8f      	ldr	r3, [pc, #572]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0308 	and.w	r3, r3, #8
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d004      	beq.n	8005e50 <HAL_RCC_OscConfig+0x7c>
 8005e46:	4b8c      	ldr	r3, [pc, #560]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e4e:	e005      	b.n	8005e5c <HAL_RCC_OscConfig+0x88>
 8005e50:	4b89      	ldr	r3, [pc, #548]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 8005e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e56:	091b      	lsrs	r3, r3, #4
 8005e58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d223      	bcs.n	8005ea8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a1b      	ldr	r3, [r3, #32]
 8005e64:	4618      	mov	r0, r3
 8005e66:	f000 fd91 	bl	800698c <RCC_SetFlashLatencyFromMSIRange>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e394      	b.n	800659e <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e74:	4b80      	ldr	r3, [pc, #512]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a7f      	ldr	r2, [pc, #508]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 8005e7a:	f043 0308 	orr.w	r3, r3, #8
 8005e7e:	6013      	str	r3, [r2, #0]
 8005e80:	4b7d      	ldr	r3, [pc, #500]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	497a      	ldr	r1, [pc, #488]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e92:	4b79      	ldr	r3, [pc, #484]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	69db      	ldr	r3, [r3, #28]
 8005e9e:	021b      	lsls	r3, r3, #8
 8005ea0:	4975      	ldr	r1, [pc, #468]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	604b      	str	r3, [r1, #4]
 8005ea6:	e022      	b.n	8005eee <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ea8:	4b73      	ldr	r3, [pc, #460]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a72      	ldr	r2, [pc, #456]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 8005eae:	f043 0308 	orr.w	r3, r3, #8
 8005eb2:	6013      	str	r3, [r2, #0]
 8005eb4:	4b70      	ldr	r3, [pc, #448]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a1b      	ldr	r3, [r3, #32]
 8005ec0:	496d      	ldr	r1, [pc, #436]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ec6:	4b6c      	ldr	r3, [pc, #432]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	69db      	ldr	r3, [r3, #28]
 8005ed2:	021b      	lsls	r3, r3, #8
 8005ed4:	4968      	ldr	r1, [pc, #416]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f000 fd54 	bl	800698c <RCC_SetFlashLatencyFromMSIRange>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e357      	b.n	800659e <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005eee:	f000 fc8b 	bl	8006808 <HAL_RCC_GetSysClockFreq>
 8005ef2:	4601      	mov	r1, r0
 8005ef4:	4b60      	ldr	r3, [pc, #384]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	091b      	lsrs	r3, r3, #4
 8005efa:	f003 030f 	and.w	r3, r3, #15
 8005efe:	4a5f      	ldr	r2, [pc, #380]	; (800607c <HAL_RCC_OscConfig+0x2a8>)
 8005f00:	5cd3      	ldrb	r3, [r2, r3]
 8005f02:	f003 031f 	and.w	r3, r3, #31
 8005f06:	fa21 f303 	lsr.w	r3, r1, r3
 8005f0a:	4a5d      	ldr	r2, [pc, #372]	; (8006080 <HAL_RCC_OscConfig+0x2ac>)
 8005f0c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005f0e:	4b5d      	ldr	r3, [pc, #372]	; (8006084 <HAL_RCC_OscConfig+0x2b0>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7ff fa28 	bl	8005368 <HAL_InitTick>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005f1c:	7bfb      	ldrb	r3, [r7, #15]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d052      	beq.n	8005fc8 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8005f22:	7bfb      	ldrb	r3, [r7, #15]
 8005f24:	e33b      	b.n	800659e <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d032      	beq.n	8005f94 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005f2e:	4b52      	ldr	r3, [pc, #328]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a51      	ldr	r2, [pc, #324]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 8005f34:	f043 0301 	orr.w	r3, r3, #1
 8005f38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005f3a:	f7ff fa61 	bl	8005400 <HAL_GetTick>
 8005f3e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005f40:	e008      	b.n	8005f54 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f42:	f7ff fa5d 	bl	8005400 <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d901      	bls.n	8005f54 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e324      	b.n	800659e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005f54:	4b48      	ldr	r3, [pc, #288]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d0f0      	beq.n	8005f42 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f60:	4b45      	ldr	r3, [pc, #276]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a44      	ldr	r2, [pc, #272]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 8005f66:	f043 0308 	orr.w	r3, r3, #8
 8005f6a:	6013      	str	r3, [r2, #0]
 8005f6c:	4b42      	ldr	r3, [pc, #264]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a1b      	ldr	r3, [r3, #32]
 8005f78:	493f      	ldr	r1, [pc, #252]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f7e:	4b3e      	ldr	r3, [pc, #248]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	69db      	ldr	r3, [r3, #28]
 8005f8a:	021b      	lsls	r3, r3, #8
 8005f8c:	493a      	ldr	r1, [pc, #232]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	604b      	str	r3, [r1, #4]
 8005f92:	e01a      	b.n	8005fca <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005f94:	4b38      	ldr	r3, [pc, #224]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a37      	ldr	r2, [pc, #220]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 8005f9a:	f023 0301 	bic.w	r3, r3, #1
 8005f9e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005fa0:	f7ff fa2e 	bl	8005400 <HAL_GetTick>
 8005fa4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005fa6:	e008      	b.n	8005fba <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005fa8:	f7ff fa2a 	bl	8005400 <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d901      	bls.n	8005fba <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e2f1      	b.n	800659e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005fba:	4b2f      	ldr	r3, [pc, #188]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1f0      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x1d4>
 8005fc6:	e000      	b.n	8005fca <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005fc8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d074      	beq.n	80060c0 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	2b08      	cmp	r3, #8
 8005fda:	d005      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x214>
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	2b0c      	cmp	r3, #12
 8005fe0:	d10e      	bne.n	8006000 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2b03      	cmp	r3, #3
 8005fe6:	d10b      	bne.n	8006000 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fe8:	4b23      	ldr	r3, [pc, #140]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d064      	beq.n	80060be <HAL_RCC_OscConfig+0x2ea>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d160      	bne.n	80060be <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e2ce      	b.n	800659e <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006008:	d106      	bne.n	8006018 <HAL_RCC_OscConfig+0x244>
 800600a:	4b1b      	ldr	r3, [pc, #108]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a1a      	ldr	r2, [pc, #104]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 8006010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006014:	6013      	str	r3, [r2, #0]
 8006016:	e01d      	b.n	8006054 <HAL_RCC_OscConfig+0x280>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006020:	d10c      	bne.n	800603c <HAL_RCC_OscConfig+0x268>
 8006022:	4b15      	ldr	r3, [pc, #84]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a14      	ldr	r2, [pc, #80]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 8006028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800602c:	6013      	str	r3, [r2, #0]
 800602e:	4b12      	ldr	r3, [pc, #72]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a11      	ldr	r2, [pc, #68]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 8006034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006038:	6013      	str	r3, [r2, #0]
 800603a:	e00b      	b.n	8006054 <HAL_RCC_OscConfig+0x280>
 800603c:	4b0e      	ldr	r3, [pc, #56]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a0d      	ldr	r2, [pc, #52]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 8006042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006046:	6013      	str	r3, [r2, #0]
 8006048:	4b0b      	ldr	r3, [pc, #44]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a0a      	ldr	r2, [pc, #40]	; (8006078 <HAL_RCC_OscConfig+0x2a4>)
 800604e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006052:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d01c      	beq.n	8006096 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800605c:	f7ff f9d0 	bl	8005400 <HAL_GetTick>
 8006060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006062:	e011      	b.n	8006088 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006064:	f7ff f9cc 	bl	8005400 <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	2b64      	cmp	r3, #100	; 0x64
 8006070:	d90a      	bls.n	8006088 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e293      	b.n	800659e <HAL_RCC_OscConfig+0x7ca>
 8006076:	bf00      	nop
 8006078:	40021000 	.word	0x40021000
 800607c:	0800bd5c 	.word	0x0800bd5c
 8006080:	20000064 	.word	0x20000064
 8006084:	20000068 	.word	0x20000068
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006088:	4bae      	ldr	r3, [pc, #696]	; (8006344 <HAL_RCC_OscConfig+0x570>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d0e7      	beq.n	8006064 <HAL_RCC_OscConfig+0x290>
 8006094:	e014      	b.n	80060c0 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006096:	f7ff f9b3 	bl	8005400 <HAL_GetTick>
 800609a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800609c:	e008      	b.n	80060b0 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800609e:	f7ff f9af 	bl	8005400 <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	2b64      	cmp	r3, #100	; 0x64
 80060aa:	d901      	bls.n	80060b0 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e276      	b.n	800659e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80060b0:	4ba4      	ldr	r3, [pc, #656]	; (8006344 <HAL_RCC_OscConfig+0x570>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1f0      	bne.n	800609e <HAL_RCC_OscConfig+0x2ca>
 80060bc:	e000      	b.n	80060c0 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060be:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0302 	and.w	r3, r3, #2
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d060      	beq.n	800618e <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	2b04      	cmp	r3, #4
 80060d0:	d005      	beq.n	80060de <HAL_RCC_OscConfig+0x30a>
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	2b0c      	cmp	r3, #12
 80060d6:	d119      	bne.n	800610c <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d116      	bne.n	800610c <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060de:	4b99      	ldr	r3, [pc, #612]	; (8006344 <HAL_RCC_OscConfig+0x570>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d005      	beq.n	80060f6 <HAL_RCC_OscConfig+0x322>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e253      	b.n	800659e <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060f6:	4b93      	ldr	r3, [pc, #588]	; (8006344 <HAL_RCC_OscConfig+0x570>)
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	061b      	lsls	r3, r3, #24
 8006104:	498f      	ldr	r1, [pc, #572]	; (8006344 <HAL_RCC_OscConfig+0x570>)
 8006106:	4313      	orrs	r3, r2
 8006108:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800610a:	e040      	b.n	800618e <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d023      	beq.n	800615c <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006114:	4b8b      	ldr	r3, [pc, #556]	; (8006344 <HAL_RCC_OscConfig+0x570>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a8a      	ldr	r2, [pc, #552]	; (8006344 <HAL_RCC_OscConfig+0x570>)
 800611a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800611e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006120:	f7ff f96e 	bl	8005400 <HAL_GetTick>
 8006124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006126:	e008      	b.n	800613a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006128:	f7ff f96a 	bl	8005400 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	2b02      	cmp	r3, #2
 8006134:	d901      	bls.n	800613a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e231      	b.n	800659e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800613a:	4b82      	ldr	r3, [pc, #520]	; (8006344 <HAL_RCC_OscConfig+0x570>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006142:	2b00      	cmp	r3, #0
 8006144:	d0f0      	beq.n	8006128 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006146:	4b7f      	ldr	r3, [pc, #508]	; (8006344 <HAL_RCC_OscConfig+0x570>)
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	061b      	lsls	r3, r3, #24
 8006154:	497b      	ldr	r1, [pc, #492]	; (8006344 <HAL_RCC_OscConfig+0x570>)
 8006156:	4313      	orrs	r3, r2
 8006158:	604b      	str	r3, [r1, #4]
 800615a:	e018      	b.n	800618e <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800615c:	4b79      	ldr	r3, [pc, #484]	; (8006344 <HAL_RCC_OscConfig+0x570>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a78      	ldr	r2, [pc, #480]	; (8006344 <HAL_RCC_OscConfig+0x570>)
 8006162:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006166:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006168:	f7ff f94a 	bl	8005400 <HAL_GetTick>
 800616c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800616e:	e008      	b.n	8006182 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006170:	f7ff f946 	bl	8005400 <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	2b02      	cmp	r3, #2
 800617c:	d901      	bls.n	8006182 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e20d      	b.n	800659e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006182:	4b70      	ldr	r3, [pc, #448]	; (8006344 <HAL_RCC_OscConfig+0x570>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1f0      	bne.n	8006170 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0308 	and.w	r3, r3, #8
 8006196:	2b00      	cmp	r3, #0
 8006198:	d03c      	beq.n	8006214 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d01c      	beq.n	80061dc <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061a2:	4b68      	ldr	r3, [pc, #416]	; (8006344 <HAL_RCC_OscConfig+0x570>)
 80061a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061a8:	4a66      	ldr	r2, [pc, #408]	; (8006344 <HAL_RCC_OscConfig+0x570>)
 80061aa:	f043 0301 	orr.w	r3, r3, #1
 80061ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061b2:	f7ff f925 	bl	8005400 <HAL_GetTick>
 80061b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80061b8:	e008      	b.n	80061cc <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061ba:	f7ff f921 	bl	8005400 <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d901      	bls.n	80061cc <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e1e8      	b.n	800659e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80061cc:	4b5d      	ldr	r3, [pc, #372]	; (8006344 <HAL_RCC_OscConfig+0x570>)
 80061ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061d2:	f003 0302 	and.w	r3, r3, #2
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d0ef      	beq.n	80061ba <HAL_RCC_OscConfig+0x3e6>
 80061da:	e01b      	b.n	8006214 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061dc:	4b59      	ldr	r3, [pc, #356]	; (8006344 <HAL_RCC_OscConfig+0x570>)
 80061de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061e2:	4a58      	ldr	r2, [pc, #352]	; (8006344 <HAL_RCC_OscConfig+0x570>)
 80061e4:	f023 0301 	bic.w	r3, r3, #1
 80061e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ec:	f7ff f908 	bl	8005400 <HAL_GetTick>
 80061f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80061f2:	e008      	b.n	8006206 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061f4:	f7ff f904 	bl	8005400 <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d901      	bls.n	8006206 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e1cb      	b.n	800659e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006206:	4b4f      	ldr	r3, [pc, #316]	; (8006344 <HAL_RCC_OscConfig+0x570>)
 8006208:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800620c:	f003 0302 	and.w	r3, r3, #2
 8006210:	2b00      	cmp	r3, #0
 8006212:	d1ef      	bne.n	80061f4 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0304 	and.w	r3, r3, #4
 800621c:	2b00      	cmp	r3, #0
 800621e:	f000 80a5 	beq.w	800636c <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006222:	2300      	movs	r3, #0
 8006224:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006226:	4b47      	ldr	r3, [pc, #284]	; (8006344 <HAL_RCC_OscConfig+0x570>)
 8006228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800622a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10d      	bne.n	800624e <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006232:	4b44      	ldr	r3, [pc, #272]	; (8006344 <HAL_RCC_OscConfig+0x570>)
 8006234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006236:	4a43      	ldr	r2, [pc, #268]	; (8006344 <HAL_RCC_OscConfig+0x570>)
 8006238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800623c:	6593      	str	r3, [r2, #88]	; 0x58
 800623e:	4b41      	ldr	r3, [pc, #260]	; (8006344 <HAL_RCC_OscConfig+0x570>)
 8006240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006246:	60bb      	str	r3, [r7, #8]
 8006248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800624a:	2301      	movs	r3, #1
 800624c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800624e:	4b3e      	ldr	r3, [pc, #248]	; (8006348 <HAL_RCC_OscConfig+0x574>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006256:	2b00      	cmp	r3, #0
 8006258:	d118      	bne.n	800628c <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800625a:	4b3b      	ldr	r3, [pc, #236]	; (8006348 <HAL_RCC_OscConfig+0x574>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a3a      	ldr	r2, [pc, #232]	; (8006348 <HAL_RCC_OscConfig+0x574>)
 8006260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006264:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006266:	f7ff f8cb 	bl	8005400 <HAL_GetTick>
 800626a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800626c:	e008      	b.n	8006280 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800626e:	f7ff f8c7 	bl	8005400 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	2b02      	cmp	r3, #2
 800627a:	d901      	bls.n	8006280 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e18e      	b.n	800659e <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006280:	4b31      	ldr	r3, [pc, #196]	; (8006348 <HAL_RCC_OscConfig+0x574>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006288:	2b00      	cmp	r3, #0
 800628a:	d0f0      	beq.n	800626e <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	2b01      	cmp	r3, #1
 8006292:	d108      	bne.n	80062a6 <HAL_RCC_OscConfig+0x4d2>
 8006294:	4b2b      	ldr	r3, [pc, #172]	; (8006344 <HAL_RCC_OscConfig+0x570>)
 8006296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800629a:	4a2a      	ldr	r2, [pc, #168]	; (8006344 <HAL_RCC_OscConfig+0x570>)
 800629c:	f043 0301 	orr.w	r3, r3, #1
 80062a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80062a4:	e024      	b.n	80062f0 <HAL_RCC_OscConfig+0x51c>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	2b05      	cmp	r3, #5
 80062ac:	d110      	bne.n	80062d0 <HAL_RCC_OscConfig+0x4fc>
 80062ae:	4b25      	ldr	r3, [pc, #148]	; (8006344 <HAL_RCC_OscConfig+0x570>)
 80062b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b4:	4a23      	ldr	r2, [pc, #140]	; (8006344 <HAL_RCC_OscConfig+0x570>)
 80062b6:	f043 0304 	orr.w	r3, r3, #4
 80062ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80062be:	4b21      	ldr	r3, [pc, #132]	; (8006344 <HAL_RCC_OscConfig+0x570>)
 80062c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c4:	4a1f      	ldr	r2, [pc, #124]	; (8006344 <HAL_RCC_OscConfig+0x570>)
 80062c6:	f043 0301 	orr.w	r3, r3, #1
 80062ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80062ce:	e00f      	b.n	80062f0 <HAL_RCC_OscConfig+0x51c>
 80062d0:	4b1c      	ldr	r3, [pc, #112]	; (8006344 <HAL_RCC_OscConfig+0x570>)
 80062d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d6:	4a1b      	ldr	r2, [pc, #108]	; (8006344 <HAL_RCC_OscConfig+0x570>)
 80062d8:	f023 0301 	bic.w	r3, r3, #1
 80062dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80062e0:	4b18      	ldr	r3, [pc, #96]	; (8006344 <HAL_RCC_OscConfig+0x570>)
 80062e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e6:	4a17      	ldr	r2, [pc, #92]	; (8006344 <HAL_RCC_OscConfig+0x570>)
 80062e8:	f023 0304 	bic.w	r3, r3, #4
 80062ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d016      	beq.n	8006326 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062f8:	f7ff f882 	bl	8005400 <HAL_GetTick>
 80062fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062fe:	e00a      	b.n	8006316 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006300:	f7ff f87e 	bl	8005400 <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	f241 3288 	movw	r2, #5000	; 0x1388
 800630e:	4293      	cmp	r3, r2
 8006310:	d901      	bls.n	8006316 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e143      	b.n	800659e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006316:	4b0b      	ldr	r3, [pc, #44]	; (8006344 <HAL_RCC_OscConfig+0x570>)
 8006318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800631c:	f003 0302 	and.w	r3, r3, #2
 8006320:	2b00      	cmp	r3, #0
 8006322:	d0ed      	beq.n	8006300 <HAL_RCC_OscConfig+0x52c>
 8006324:	e019      	b.n	800635a <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006326:	f7ff f86b 	bl	8005400 <HAL_GetTick>
 800632a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800632c:	e00e      	b.n	800634c <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800632e:	f7ff f867 	bl	8005400 <HAL_GetTick>
 8006332:	4602      	mov	r2, r0
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	f241 3288 	movw	r2, #5000	; 0x1388
 800633c:	4293      	cmp	r3, r2
 800633e:	d905      	bls.n	800634c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e12c      	b.n	800659e <HAL_RCC_OscConfig+0x7ca>
 8006344:	40021000 	.word	0x40021000
 8006348:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800634c:	4b96      	ldr	r3, [pc, #600]	; (80065a8 <HAL_RCC_OscConfig+0x7d4>)
 800634e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006352:	f003 0302 	and.w	r3, r3, #2
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1e9      	bne.n	800632e <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800635a:	7ffb      	ldrb	r3, [r7, #31]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d105      	bne.n	800636c <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006360:	4b91      	ldr	r3, [pc, #580]	; (80065a8 <HAL_RCC_OscConfig+0x7d4>)
 8006362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006364:	4a90      	ldr	r2, [pc, #576]	; (80065a8 <HAL_RCC_OscConfig+0x7d4>)
 8006366:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800636a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0320 	and.w	r3, r3, #32
 8006374:	2b00      	cmp	r3, #0
 8006376:	d03c      	beq.n	80063f2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637c:	2b00      	cmp	r3, #0
 800637e:	d01c      	beq.n	80063ba <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006380:	4b89      	ldr	r3, [pc, #548]	; (80065a8 <HAL_RCC_OscConfig+0x7d4>)
 8006382:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006386:	4a88      	ldr	r2, [pc, #544]	; (80065a8 <HAL_RCC_OscConfig+0x7d4>)
 8006388:	f043 0301 	orr.w	r3, r3, #1
 800638c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006390:	f7ff f836 	bl	8005400 <HAL_GetTick>
 8006394:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006396:	e008      	b.n	80063aa <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006398:	f7ff f832 	bl	8005400 <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d901      	bls.n	80063aa <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e0f9      	b.n	800659e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80063aa:	4b7f      	ldr	r3, [pc, #508]	; (80065a8 <HAL_RCC_OscConfig+0x7d4>)
 80063ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063b0:	f003 0302 	and.w	r3, r3, #2
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d0ef      	beq.n	8006398 <HAL_RCC_OscConfig+0x5c4>
 80063b8:	e01b      	b.n	80063f2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80063ba:	4b7b      	ldr	r3, [pc, #492]	; (80065a8 <HAL_RCC_OscConfig+0x7d4>)
 80063bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063c0:	4a79      	ldr	r2, [pc, #484]	; (80065a8 <HAL_RCC_OscConfig+0x7d4>)
 80063c2:	f023 0301 	bic.w	r3, r3, #1
 80063c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063ca:	f7ff f819 	bl	8005400 <HAL_GetTick>
 80063ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80063d0:	e008      	b.n	80063e4 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80063d2:	f7ff f815 	bl	8005400 <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d901      	bls.n	80063e4 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e0dc      	b.n	800659e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80063e4:	4b70      	ldr	r3, [pc, #448]	; (80065a8 <HAL_RCC_OscConfig+0x7d4>)
 80063e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1ef      	bne.n	80063d2 <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f000 80d0 	beq.w	800659c <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	2b0c      	cmp	r3, #12
 8006400:	f000 808d 	beq.w	800651e <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006408:	2b02      	cmp	r3, #2
 800640a:	d15a      	bne.n	80064c2 <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800640c:	4b66      	ldr	r3, [pc, #408]	; (80065a8 <HAL_RCC_OscConfig+0x7d4>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a65      	ldr	r2, [pc, #404]	; (80065a8 <HAL_RCC_OscConfig+0x7d4>)
 8006412:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006418:	f7fe fff2 	bl	8005400 <HAL_GetTick>
 800641c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800641e:	e008      	b.n	8006432 <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006420:	f7fe ffee 	bl	8005400 <HAL_GetTick>
 8006424:	4602      	mov	r2, r0
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	2b02      	cmp	r3, #2
 800642c:	d901      	bls.n	8006432 <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e0b5      	b.n	800659e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006432:	4b5d      	ldr	r3, [pc, #372]	; (80065a8 <HAL_RCC_OscConfig+0x7d4>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1f0      	bne.n	8006420 <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800643e:	4b5a      	ldr	r3, [pc, #360]	; (80065a8 <HAL_RCC_OscConfig+0x7d4>)
 8006440:	68da      	ldr	r2, [r3, #12]
 8006442:	4b5a      	ldr	r3, [pc, #360]	; (80065ac <HAL_RCC_OscConfig+0x7d8>)
 8006444:	4013      	ands	r3, r2
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800644e:	3a01      	subs	r2, #1
 8006450:	0112      	lsls	r2, r2, #4
 8006452:	4311      	orrs	r1, r2
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006458:	0212      	lsls	r2, r2, #8
 800645a:	4311      	orrs	r1, r2
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006460:	0852      	lsrs	r2, r2, #1
 8006462:	3a01      	subs	r2, #1
 8006464:	0552      	lsls	r2, r2, #21
 8006466:	4311      	orrs	r1, r2
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800646c:	0852      	lsrs	r2, r2, #1
 800646e:	3a01      	subs	r2, #1
 8006470:	0652      	lsls	r2, r2, #25
 8006472:	4311      	orrs	r1, r2
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006478:	06d2      	lsls	r2, r2, #27
 800647a:	430a      	orrs	r2, r1
 800647c:	494a      	ldr	r1, [pc, #296]	; (80065a8 <HAL_RCC_OscConfig+0x7d4>)
 800647e:	4313      	orrs	r3, r2
 8006480:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006482:	4b49      	ldr	r3, [pc, #292]	; (80065a8 <HAL_RCC_OscConfig+0x7d4>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a48      	ldr	r2, [pc, #288]	; (80065a8 <HAL_RCC_OscConfig+0x7d4>)
 8006488:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800648c:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800648e:	4b46      	ldr	r3, [pc, #280]	; (80065a8 <HAL_RCC_OscConfig+0x7d4>)
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	4a45      	ldr	r2, [pc, #276]	; (80065a8 <HAL_RCC_OscConfig+0x7d4>)
 8006494:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006498:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800649a:	f7fe ffb1 	bl	8005400 <HAL_GetTick>
 800649e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064a0:	e008      	b.n	80064b4 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064a2:	f7fe ffad 	bl	8005400 <HAL_GetTick>
 80064a6:	4602      	mov	r2, r0
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d901      	bls.n	80064b4 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 80064b0:	2303      	movs	r3, #3
 80064b2:	e074      	b.n	800659e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064b4:	4b3c      	ldr	r3, [pc, #240]	; (80065a8 <HAL_RCC_OscConfig+0x7d4>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d0f0      	beq.n	80064a2 <HAL_RCC_OscConfig+0x6ce>
 80064c0:	e06c      	b.n	800659c <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064c2:	4b39      	ldr	r3, [pc, #228]	; (80065a8 <HAL_RCC_OscConfig+0x7d4>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a38      	ldr	r2, [pc, #224]	; (80065a8 <HAL_RCC_OscConfig+0x7d4>)
 80064c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064cc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80064ce:	4b36      	ldr	r3, [pc, #216]	; (80065a8 <HAL_RCC_OscConfig+0x7d4>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d105      	bne.n	80064e6 <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80064da:	4b33      	ldr	r3, [pc, #204]	; (80065a8 <HAL_RCC_OscConfig+0x7d4>)
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	4a32      	ldr	r2, [pc, #200]	; (80065a8 <HAL_RCC_OscConfig+0x7d4>)
 80064e0:	f023 0303 	bic.w	r3, r3, #3
 80064e4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80064e6:	4b30      	ldr	r3, [pc, #192]	; (80065a8 <HAL_RCC_OscConfig+0x7d4>)
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	4a2f      	ldr	r2, [pc, #188]	; (80065a8 <HAL_RCC_OscConfig+0x7d4>)
 80064ec:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80064f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064f4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f6:	f7fe ff83 	bl	8005400 <HAL_GetTick>
 80064fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064fc:	e008      	b.n	8006510 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064fe:	f7fe ff7f 	bl	8005400 <HAL_GetTick>
 8006502:	4602      	mov	r2, r0
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	2b02      	cmp	r3, #2
 800650a:	d901      	bls.n	8006510 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e046      	b.n	800659e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006510:	4b25      	ldr	r3, [pc, #148]	; (80065a8 <HAL_RCC_OscConfig+0x7d4>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1f0      	bne.n	80064fe <HAL_RCC_OscConfig+0x72a>
 800651c:	e03e      	b.n	800659c <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006522:	2b01      	cmp	r3, #1
 8006524:	d101      	bne.n	800652a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e039      	b.n	800659e <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800652a:	4b1f      	ldr	r3, [pc, #124]	; (80065a8 <HAL_RCC_OscConfig+0x7d4>)
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f003 0203 	and.w	r2, r3, #3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653a:	429a      	cmp	r2, r3
 800653c:	d12c      	bne.n	8006598 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006548:	3b01      	subs	r3, #1
 800654a:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800654c:	429a      	cmp	r2, r3
 800654e:	d123      	bne.n	8006598 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800655a:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800655c:	429a      	cmp	r2, r3
 800655e:	d11b      	bne.n	8006598 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656a:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800656c:	429a      	cmp	r2, r3
 800656e:	d113      	bne.n	8006598 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800657a:	085b      	lsrs	r3, r3, #1
 800657c:	3b01      	subs	r3, #1
 800657e:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006580:	429a      	cmp	r2, r3
 8006582:	d109      	bne.n	8006598 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658e:	085b      	lsrs	r3, r3, #1
 8006590:	3b01      	subs	r3, #1
 8006592:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006594:	429a      	cmp	r2, r3
 8006596:	d001      	beq.n	800659c <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e000      	b.n	800659e <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3720      	adds	r7, #32
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	40021000 	.word	0x40021000
 80065ac:	019d800c 	.word	0x019d800c

080065b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80065ba:	2300      	movs	r3, #0
 80065bc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d101      	bne.n	80065c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e10f      	b.n	80067e8 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80065c8:	4b89      	ldr	r3, [pc, #548]	; (80067f0 <HAL_RCC_ClockConfig+0x240>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 030f 	and.w	r3, r3, #15
 80065d0:	683a      	ldr	r2, [r7, #0]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d910      	bls.n	80065f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065d6:	4b86      	ldr	r3, [pc, #536]	; (80067f0 <HAL_RCC_ClockConfig+0x240>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f023 020f 	bic.w	r2, r3, #15
 80065de:	4984      	ldr	r1, [pc, #528]	; (80067f0 <HAL_RCC_ClockConfig+0x240>)
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065e6:	4b82      	ldr	r3, [pc, #520]	; (80067f0 <HAL_RCC_ClockConfig+0x240>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 030f 	and.w	r3, r3, #15
 80065ee:	683a      	ldr	r2, [r7, #0]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d001      	beq.n	80065f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e0f7      	b.n	80067e8 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0301 	and.w	r3, r3, #1
 8006600:	2b00      	cmp	r3, #0
 8006602:	f000 8089 	beq.w	8006718 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	2b03      	cmp	r3, #3
 800660c:	d133      	bne.n	8006676 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800660e:	4b79      	ldr	r3, [pc, #484]	; (80067f4 <HAL_RCC_ClockConfig+0x244>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006616:	2b00      	cmp	r3, #0
 8006618:	d101      	bne.n	800661e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e0e4      	b.n	80067e8 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800661e:	f000 fa0f 	bl	8006a40 <RCC_GetSysClockFreqFromPLLSource>
 8006622:	4602      	mov	r2, r0
 8006624:	4b74      	ldr	r3, [pc, #464]	; (80067f8 <HAL_RCC_ClockConfig+0x248>)
 8006626:	429a      	cmp	r2, r3
 8006628:	d955      	bls.n	80066d6 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800662a:	4b72      	ldr	r3, [pc, #456]	; (80067f4 <HAL_RCC_ClockConfig+0x244>)
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10a      	bne.n	800664c <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006636:	4b6f      	ldr	r3, [pc, #444]	; (80067f4 <HAL_RCC_ClockConfig+0x244>)
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800663e:	4a6d      	ldr	r2, [pc, #436]	; (80067f4 <HAL_RCC_ClockConfig+0x244>)
 8006640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006644:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006646:	2380      	movs	r3, #128	; 0x80
 8006648:	617b      	str	r3, [r7, #20]
 800664a:	e044      	b.n	80066d6 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0302 	and.w	r3, r3, #2
 8006654:	2b00      	cmp	r3, #0
 8006656:	d03e      	beq.n	80066d6 <HAL_RCC_ClockConfig+0x126>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d13a      	bne.n	80066d6 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006660:	4b64      	ldr	r3, [pc, #400]	; (80067f4 <HAL_RCC_ClockConfig+0x244>)
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006668:	4a62      	ldr	r2, [pc, #392]	; (80067f4 <HAL_RCC_ClockConfig+0x244>)
 800666a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800666e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006670:	2380      	movs	r3, #128	; 0x80
 8006672:	617b      	str	r3, [r7, #20]
 8006674:	e02f      	b.n	80066d6 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	2b02      	cmp	r3, #2
 800667c:	d107      	bne.n	800668e <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800667e:	4b5d      	ldr	r3, [pc, #372]	; (80067f4 <HAL_RCC_ClockConfig+0x244>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d115      	bne.n	80066b6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e0ac      	b.n	80067e8 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d107      	bne.n	80066a6 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006696:	4b57      	ldr	r3, [pc, #348]	; (80067f4 <HAL_RCC_ClockConfig+0x244>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0302 	and.w	r3, r3, #2
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d109      	bne.n	80066b6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e0a0      	b.n	80067e8 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066a6:	4b53      	ldr	r3, [pc, #332]	; (80067f4 <HAL_RCC_ClockConfig+0x244>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d101      	bne.n	80066b6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e098      	b.n	80067e8 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80066b6:	f000 f8a7 	bl	8006808 <HAL_RCC_GetSysClockFreq>
 80066ba:	4602      	mov	r2, r0
 80066bc:	4b4e      	ldr	r3, [pc, #312]	; (80067f8 <HAL_RCC_ClockConfig+0x248>)
 80066be:	429a      	cmp	r2, r3
 80066c0:	d909      	bls.n	80066d6 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80066c2:	4b4c      	ldr	r3, [pc, #304]	; (80067f4 <HAL_RCC_ClockConfig+0x244>)
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066ca:	4a4a      	ldr	r2, [pc, #296]	; (80067f4 <HAL_RCC_ClockConfig+0x244>)
 80066cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066d0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80066d2:	2380      	movs	r3, #128	; 0x80
 80066d4:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80066d6:	4b47      	ldr	r3, [pc, #284]	; (80067f4 <HAL_RCC_ClockConfig+0x244>)
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f023 0203 	bic.w	r2, r3, #3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	4944      	ldr	r1, [pc, #272]	; (80067f4 <HAL_RCC_ClockConfig+0x244>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066e8:	f7fe fe8a 	bl	8005400 <HAL_GetTick>
 80066ec:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066ee:	e00a      	b.n	8006706 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066f0:	f7fe fe86 	bl	8005400 <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80066fe:	4293      	cmp	r3, r2
 8006700:	d901      	bls.n	8006706 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e070      	b.n	80067e8 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006706:	4b3b      	ldr	r3, [pc, #236]	; (80067f4 <HAL_RCC_ClockConfig+0x244>)
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	f003 020c 	and.w	r2, r3, #12
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	429a      	cmp	r2, r3
 8006716:	d1eb      	bne.n	80066f0 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0302 	and.w	r3, r3, #2
 8006720:	2b00      	cmp	r3, #0
 8006722:	d009      	beq.n	8006738 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006724:	4b33      	ldr	r3, [pc, #204]	; (80067f4 <HAL_RCC_ClockConfig+0x244>)
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	4930      	ldr	r1, [pc, #192]	; (80067f4 <HAL_RCC_ClockConfig+0x244>)
 8006732:	4313      	orrs	r3, r2
 8006734:	608b      	str	r3, [r1, #8]
 8006736:	e008      	b.n	800674a <HAL_RCC_ClockConfig+0x19a>
  }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	2b80      	cmp	r3, #128	; 0x80
 800673c:	d105      	bne.n	800674a <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800673e:	4b2d      	ldr	r3, [pc, #180]	; (80067f4 <HAL_RCC_ClockConfig+0x244>)
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	4a2c      	ldr	r2, [pc, #176]	; (80067f4 <HAL_RCC_ClockConfig+0x244>)
 8006744:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006748:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800674a:	4b29      	ldr	r3, [pc, #164]	; (80067f0 <HAL_RCC_ClockConfig+0x240>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 030f 	and.w	r3, r3, #15
 8006752:	683a      	ldr	r2, [r7, #0]
 8006754:	429a      	cmp	r2, r3
 8006756:	d210      	bcs.n	800677a <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006758:	4b25      	ldr	r3, [pc, #148]	; (80067f0 <HAL_RCC_ClockConfig+0x240>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f023 020f 	bic.w	r2, r3, #15
 8006760:	4923      	ldr	r1, [pc, #140]	; (80067f0 <HAL_RCC_ClockConfig+0x240>)
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	4313      	orrs	r3, r2
 8006766:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006768:	4b21      	ldr	r3, [pc, #132]	; (80067f0 <HAL_RCC_ClockConfig+0x240>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 030f 	and.w	r3, r3, #15
 8006770:	683a      	ldr	r2, [r7, #0]
 8006772:	429a      	cmp	r2, r3
 8006774:	d001      	beq.n	800677a <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e036      	b.n	80067e8 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 0304 	and.w	r3, r3, #4
 8006782:	2b00      	cmp	r3, #0
 8006784:	d008      	beq.n	8006798 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006786:	4b1b      	ldr	r3, [pc, #108]	; (80067f4 <HAL_RCC_ClockConfig+0x244>)
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	4918      	ldr	r1, [pc, #96]	; (80067f4 <HAL_RCC_ClockConfig+0x244>)
 8006794:	4313      	orrs	r3, r2
 8006796:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0308 	and.w	r3, r3, #8
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d009      	beq.n	80067b8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067a4:	4b13      	ldr	r3, [pc, #76]	; (80067f4 <HAL_RCC_ClockConfig+0x244>)
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	00db      	lsls	r3, r3, #3
 80067b2:	4910      	ldr	r1, [pc, #64]	; (80067f4 <HAL_RCC_ClockConfig+0x244>)
 80067b4:	4313      	orrs	r3, r2
 80067b6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80067b8:	f000 f826 	bl	8006808 <HAL_RCC_GetSysClockFreq>
 80067bc:	4601      	mov	r1, r0
 80067be:	4b0d      	ldr	r3, [pc, #52]	; (80067f4 <HAL_RCC_ClockConfig+0x244>)
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	091b      	lsrs	r3, r3, #4
 80067c4:	f003 030f 	and.w	r3, r3, #15
 80067c8:	4a0c      	ldr	r2, [pc, #48]	; (80067fc <HAL_RCC_ClockConfig+0x24c>)
 80067ca:	5cd3      	ldrb	r3, [r2, r3]
 80067cc:	f003 031f 	and.w	r3, r3, #31
 80067d0:	fa21 f303 	lsr.w	r3, r1, r3
 80067d4:	4a0a      	ldr	r2, [pc, #40]	; (8006800 <HAL_RCC_ClockConfig+0x250>)
 80067d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80067d8:	4b0a      	ldr	r3, [pc, #40]	; (8006804 <HAL_RCC_ClockConfig+0x254>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4618      	mov	r0, r3
 80067de:	f7fe fdc3 	bl	8005368 <HAL_InitTick>
 80067e2:	4603      	mov	r3, r0
 80067e4:	73fb      	strb	r3, [r7, #15]

  return status;
 80067e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3718      	adds	r7, #24
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	40022000 	.word	0x40022000
 80067f4:	40021000 	.word	0x40021000
 80067f8:	04c4b400 	.word	0x04c4b400
 80067fc:	0800bd5c 	.word	0x0800bd5c
 8006800:	20000064 	.word	0x20000064
 8006804:	20000068 	.word	0x20000068

08006808 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006808:	b480      	push	{r7}
 800680a:	b089      	sub	sp, #36	; 0x24
 800680c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800680e:	2300      	movs	r3, #0
 8006810:	61fb      	str	r3, [r7, #28]
 8006812:	2300      	movs	r3, #0
 8006814:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006816:	4b3d      	ldr	r3, [pc, #244]	; (800690c <HAL_RCC_GetSysClockFreq+0x104>)
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f003 030c 	and.w	r3, r3, #12
 800681e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006820:	4b3a      	ldr	r3, [pc, #232]	; (800690c <HAL_RCC_GetSysClockFreq+0x104>)
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	f003 0303 	and.w	r3, r3, #3
 8006828:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d005      	beq.n	800683c <HAL_RCC_GetSysClockFreq+0x34>
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	2b0c      	cmp	r3, #12
 8006834:	d121      	bne.n	800687a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d11e      	bne.n	800687a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800683c:	4b33      	ldr	r3, [pc, #204]	; (800690c <HAL_RCC_GetSysClockFreq+0x104>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0308 	and.w	r3, r3, #8
 8006844:	2b00      	cmp	r3, #0
 8006846:	d107      	bne.n	8006858 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006848:	4b30      	ldr	r3, [pc, #192]	; (800690c <HAL_RCC_GetSysClockFreq+0x104>)
 800684a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800684e:	0a1b      	lsrs	r3, r3, #8
 8006850:	f003 030f 	and.w	r3, r3, #15
 8006854:	61fb      	str	r3, [r7, #28]
 8006856:	e005      	b.n	8006864 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006858:	4b2c      	ldr	r3, [pc, #176]	; (800690c <HAL_RCC_GetSysClockFreq+0x104>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	091b      	lsrs	r3, r3, #4
 800685e:	f003 030f 	and.w	r3, r3, #15
 8006862:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006864:	4a2a      	ldr	r2, [pc, #168]	; (8006910 <HAL_RCC_GetSysClockFreq+0x108>)
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800686c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d10d      	bne.n	8006890 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006878:	e00a      	b.n	8006890 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	2b04      	cmp	r3, #4
 800687e:	d102      	bne.n	8006886 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006880:	4b24      	ldr	r3, [pc, #144]	; (8006914 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006882:	61bb      	str	r3, [r7, #24]
 8006884:	e004      	b.n	8006890 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	2b08      	cmp	r3, #8
 800688a:	d101      	bne.n	8006890 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800688c:	4b22      	ldr	r3, [pc, #136]	; (8006918 <HAL_RCC_GetSysClockFreq+0x110>)
 800688e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	2b0c      	cmp	r3, #12
 8006894:	d133      	bne.n	80068fe <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006896:	4b1d      	ldr	r3, [pc, #116]	; (800690c <HAL_RCC_GetSysClockFreq+0x104>)
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	f003 0303 	and.w	r3, r3, #3
 800689e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d002      	beq.n	80068ac <HAL_RCC_GetSysClockFreq+0xa4>
 80068a6:	2b03      	cmp	r3, #3
 80068a8:	d003      	beq.n	80068b2 <HAL_RCC_GetSysClockFreq+0xaa>
 80068aa:	e005      	b.n	80068b8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80068ac:	4b19      	ldr	r3, [pc, #100]	; (8006914 <HAL_RCC_GetSysClockFreq+0x10c>)
 80068ae:	617b      	str	r3, [r7, #20]
      break;
 80068b0:	e005      	b.n	80068be <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80068b2:	4b19      	ldr	r3, [pc, #100]	; (8006918 <HAL_RCC_GetSysClockFreq+0x110>)
 80068b4:	617b      	str	r3, [r7, #20]
      break;
 80068b6:	e002      	b.n	80068be <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	617b      	str	r3, [r7, #20]
      break;
 80068bc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80068be:	4b13      	ldr	r3, [pc, #76]	; (800690c <HAL_RCC_GetSysClockFreq+0x104>)
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	091b      	lsrs	r3, r3, #4
 80068c4:	f003 030f 	and.w	r3, r3, #15
 80068c8:	3301      	adds	r3, #1
 80068ca:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80068cc:	4b0f      	ldr	r3, [pc, #60]	; (800690c <HAL_RCC_GetSysClockFreq+0x104>)
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	0a1b      	lsrs	r3, r3, #8
 80068d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	fb02 f203 	mul.w	r2, r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80068e4:	4b09      	ldr	r3, [pc, #36]	; (800690c <HAL_RCC_GetSysClockFreq+0x104>)
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	0e5b      	lsrs	r3, r3, #25
 80068ea:	f003 0303 	and.w	r3, r3, #3
 80068ee:	3301      	adds	r3, #1
 80068f0:	005b      	lsls	r3, r3, #1
 80068f2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80068f4:	697a      	ldr	r2, [r7, #20]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068fc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80068fe:	69bb      	ldr	r3, [r7, #24]
}
 8006900:	4618      	mov	r0, r3
 8006902:	3724      	adds	r7, #36	; 0x24
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr
 800690c:	40021000 	.word	0x40021000
 8006910:	0800bd74 	.word	0x0800bd74
 8006914:	00f42400 	.word	0x00f42400
 8006918:	007a1200 	.word	0x007a1200

0800691c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800691c:	b480      	push	{r7}
 800691e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006920:	4b03      	ldr	r3, [pc, #12]	; (8006930 <HAL_RCC_GetHCLKFreq+0x14>)
 8006922:	681b      	ldr	r3, [r3, #0]
}
 8006924:	4618      	mov	r0, r3
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	20000064 	.word	0x20000064

08006934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006938:	f7ff fff0 	bl	800691c <HAL_RCC_GetHCLKFreq>
 800693c:	4601      	mov	r1, r0
 800693e:	4b06      	ldr	r3, [pc, #24]	; (8006958 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	0a1b      	lsrs	r3, r3, #8
 8006944:	f003 0307 	and.w	r3, r3, #7
 8006948:	4a04      	ldr	r2, [pc, #16]	; (800695c <HAL_RCC_GetPCLK1Freq+0x28>)
 800694a:	5cd3      	ldrb	r3, [r2, r3]
 800694c:	f003 031f 	and.w	r3, r3, #31
 8006950:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006954:	4618      	mov	r0, r3
 8006956:	bd80      	pop	{r7, pc}
 8006958:	40021000 	.word	0x40021000
 800695c:	0800bd6c 	.word	0x0800bd6c

08006960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006964:	f7ff ffda 	bl	800691c <HAL_RCC_GetHCLKFreq>
 8006968:	4601      	mov	r1, r0
 800696a:	4b06      	ldr	r3, [pc, #24]	; (8006984 <HAL_RCC_GetPCLK2Freq+0x24>)
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	0adb      	lsrs	r3, r3, #11
 8006970:	f003 0307 	and.w	r3, r3, #7
 8006974:	4a04      	ldr	r2, [pc, #16]	; (8006988 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006976:	5cd3      	ldrb	r3, [r2, r3]
 8006978:	f003 031f 	and.w	r3, r3, #31
 800697c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006980:	4618      	mov	r0, r3
 8006982:	bd80      	pop	{r7, pc}
 8006984:	40021000 	.word	0x40021000
 8006988:	0800bd6c 	.word	0x0800bd6c

0800698c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b086      	sub	sp, #24
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006994:	2300      	movs	r3, #0
 8006996:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006998:	4b27      	ldr	r3, [pc, #156]	; (8006a38 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800699a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800699c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d003      	beq.n	80069ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80069a4:	f7ff f932 	bl	8005c0c <HAL_PWREx_GetVoltageRange>
 80069a8:	6178      	str	r0, [r7, #20]
 80069aa:	e014      	b.n	80069d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80069ac:	4b22      	ldr	r3, [pc, #136]	; (8006a38 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80069ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069b0:	4a21      	ldr	r2, [pc, #132]	; (8006a38 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80069b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069b6:	6593      	str	r3, [r2, #88]	; 0x58
 80069b8:	4b1f      	ldr	r3, [pc, #124]	; (8006a38 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80069ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069c0:	60fb      	str	r3, [r7, #12]
 80069c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80069c4:	f7ff f922 	bl	8005c0c <HAL_PWREx_GetVoltageRange>
 80069c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80069ca:	4b1b      	ldr	r3, [pc, #108]	; (8006a38 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80069cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ce:	4a1a      	ldr	r2, [pc, #104]	; (8006a38 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80069d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069dc:	d10b      	bne.n	80069f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b80      	cmp	r3, #128	; 0x80
 80069e2:	d913      	bls.n	8006a0c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2ba0      	cmp	r3, #160	; 0xa0
 80069e8:	d902      	bls.n	80069f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80069ea:	2302      	movs	r3, #2
 80069ec:	613b      	str	r3, [r7, #16]
 80069ee:	e00d      	b.n	8006a0c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80069f0:	2301      	movs	r3, #1
 80069f2:	613b      	str	r3, [r7, #16]
 80069f4:	e00a      	b.n	8006a0c <RCC_SetFlashLatencyFromMSIRange+0x80>
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2b7f      	cmp	r3, #127	; 0x7f
 80069fa:	d902      	bls.n	8006a02 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80069fc:	2302      	movs	r3, #2
 80069fe:	613b      	str	r3, [r7, #16]
 8006a00:	e004      	b.n	8006a0c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2b70      	cmp	r3, #112	; 0x70
 8006a06:	d101      	bne.n	8006a0c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006a08:	2301      	movs	r3, #1
 8006a0a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006a0c:	4b0b      	ldr	r3, [pc, #44]	; (8006a3c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f023 020f 	bic.w	r2, r3, #15
 8006a14:	4909      	ldr	r1, [pc, #36]	; (8006a3c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006a1c:	4b07      	ldr	r3, [pc, #28]	; (8006a3c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 030f 	and.w	r3, r3, #15
 8006a24:	693a      	ldr	r2, [r7, #16]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d001      	beq.n	8006a2e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e000      	b.n	8006a30 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3718      	adds	r7, #24
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	40021000 	.word	0x40021000
 8006a3c:	40022000 	.word	0x40022000

08006a40 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b087      	sub	sp, #28
 8006a44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8006a46:	2300      	movs	r3, #0
 8006a48:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8006a4a:	4b2d      	ldr	r3, [pc, #180]	; (8006b00 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	f003 0303 	and.w	r3, r3, #3
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d118      	bne.n	8006a88 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006a56:	4b2a      	ldr	r3, [pc, #168]	; (8006b00 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0308 	and.w	r3, r3, #8
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d107      	bne.n	8006a72 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006a62:	4b27      	ldr	r3, [pc, #156]	; (8006b00 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006a64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a68:	0a1b      	lsrs	r3, r3, #8
 8006a6a:	f003 030f 	and.w	r3, r3, #15
 8006a6e:	617b      	str	r3, [r7, #20]
 8006a70:	e005      	b.n	8006a7e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006a72:	4b23      	ldr	r3, [pc, #140]	; (8006b00 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	091b      	lsrs	r3, r3, #4
 8006a78:	f003 030f 	and.w	r3, r3, #15
 8006a7c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006a7e:	4a21      	ldr	r2, [pc, #132]	; (8006b04 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a86:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006a88:	4b1d      	ldr	r3, [pc, #116]	; (8006b00 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	f003 0303 	and.w	r3, r3, #3
 8006a90:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d002      	beq.n	8006a9e <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8006a98:	2b03      	cmp	r3, #3
 8006a9a:	d003      	beq.n	8006aa4 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8006a9c:	e005      	b.n	8006aaa <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8006a9e:	4b1a      	ldr	r3, [pc, #104]	; (8006b08 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8006aa0:	613b      	str	r3, [r7, #16]
    break;
 8006aa2:	e005      	b.n	8006ab0 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8006aa4:	4b19      	ldr	r3, [pc, #100]	; (8006b0c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8006aa6:	613b      	str	r3, [r7, #16]
    break;
 8006aa8:	e002      	b.n	8006ab0 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	613b      	str	r3, [r7, #16]
    break;
 8006aae:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ab0:	4b13      	ldr	r3, [pc, #76]	; (8006b00 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	091b      	lsrs	r3, r3, #4
 8006ab6:	f003 030f 	and.w	r3, r3, #15
 8006aba:	3301      	adds	r3, #1
 8006abc:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006abe:	4b10      	ldr	r3, [pc, #64]	; (8006b00 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	0a1b      	lsrs	r3, r3, #8
 8006ac4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ac8:	693a      	ldr	r2, [r7, #16]
 8006aca:	fb02 f203 	mul.w	r2, r2, r3
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad4:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006ad6:	4b0a      	ldr	r3, [pc, #40]	; (8006b00 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	0e5b      	lsrs	r3, r3, #25
 8006adc:	f003 0303 	and.w	r3, r3, #3
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	005b      	lsls	r3, r3, #1
 8006ae4:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aee:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8006af0:	683b      	ldr	r3, [r7, #0]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	371c      	adds	r7, #28
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	40021000 	.word	0x40021000
 8006b04:	0800bd74 	.word	0x0800bd74
 8006b08:	00f42400 	.word	0x00f42400
 8006b0c:	007a1200 	.word	0x007a1200

08006b10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006b18:	2300      	movs	r3, #0
 8006b1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d03d      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b30:	2b40      	cmp	r3, #64	; 0x40
 8006b32:	d00b      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8006b34:	2b40      	cmp	r3, #64	; 0x40
 8006b36:	d804      	bhi.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d00e      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8006b3c:	2b20      	cmp	r3, #32
 8006b3e:	d015      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006b40:	e01d      	b.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006b42:	2b60      	cmp	r3, #96	; 0x60
 8006b44:	d01e      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006b46:	2b80      	cmp	r3, #128	; 0x80
 8006b48:	d01c      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006b4a:	e018      	b.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006b4c:	4b86      	ldr	r3, [pc, #536]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	4a85      	ldr	r2, [pc, #532]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b56:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006b58:	e015      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	3304      	adds	r3, #4
 8006b5e:	2100      	movs	r1, #0
 8006b60:	4618      	mov	r0, r3
 8006b62:	f000 fafd 	bl	8007160 <RCCEx_PLLSAI1_Config>
 8006b66:	4603      	mov	r3, r0
 8006b68:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006b6a:	e00c      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	3320      	adds	r3, #32
 8006b70:	2100      	movs	r1, #0
 8006b72:	4618      	mov	r0, r3
 8006b74:	f000 fbe4 	bl	8007340 <RCCEx_PLLSAI2_Config>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006b7c:	e003      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	74fb      	strb	r3, [r7, #19]
      break;
 8006b82:	e000      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8006b84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b86:	7cfb      	ldrb	r3, [r7, #19]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10b      	bne.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b8c:	4b76      	ldr	r3, [pc, #472]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b92:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b9a:	4973      	ldr	r1, [pc, #460]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006ba2:	e001      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba4:	7cfb      	ldrb	r3, [r7, #19]
 8006ba6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d042      	beq.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bbc:	d00f      	beq.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0xce>
 8006bbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bc2:	d805      	bhi.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d011      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8006bc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bcc:	d017      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0xee>
 8006bce:	e01f      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8006bd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bd4:	d01f      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bda:	d01c      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006bdc:	e018      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006bde:	4b62      	ldr	r3, [pc, #392]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	4a61      	ldr	r2, [pc, #388]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006be8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006bea:	e015      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	3304      	adds	r3, #4
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f000 fab4 	bl	8007160 <RCCEx_PLLSAI1_Config>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006bfc:	e00c      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	3320      	adds	r3, #32
 8006c02:	2100      	movs	r1, #0
 8006c04:	4618      	mov	r0, r3
 8006c06:	f000 fb9b 	bl	8007340 <RCCEx_PLLSAI2_Config>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006c0e:	e003      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	74fb      	strb	r3, [r7, #19]
      break;
 8006c14:	e000      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8006c16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c18:	7cfb      	ldrb	r3, [r7, #19]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10b      	bne.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006c1e:	4b52      	ldr	r3, [pc, #328]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006c20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c2c:	494e      	ldr	r1, [pc, #312]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006c34:	e001      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c36:	7cfb      	ldrb	r3, [r7, #19]
 8006c38:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f000 809f 	beq.w	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006c4c:	4b46      	ldr	r3, [pc, #280]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d101      	bne.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e000      	b.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d00d      	beq.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c62:	4b41      	ldr	r3, [pc, #260]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c66:	4a40      	ldr	r2, [pc, #256]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c6c:	6593      	str	r3, [r2, #88]	; 0x58
 8006c6e:	4b3e      	ldr	r3, [pc, #248]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c76:	60bb      	str	r3, [r7, #8]
 8006c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c7e:	4b3b      	ldr	r3, [pc, #236]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a3a      	ldr	r2, [pc, #232]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c8a:	f7fe fbb9 	bl	8005400 <HAL_GetTick>
 8006c8e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006c90:	e009      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c92:	f7fe fbb5 	bl	8005400 <HAL_GetTick>
 8006c96:	4602      	mov	r2, r0
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d902      	bls.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	74fb      	strb	r3, [r7, #19]
        break;
 8006ca4:	e005      	b.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006ca6:	4b31      	ldr	r3, [pc, #196]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d0ef      	beq.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8006cb2:	7cfb      	ldrb	r3, [r7, #19]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d15b      	bne.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006cb8:	4b2b      	ldr	r3, [pc, #172]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cc2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d01f      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cd0:	697a      	ldr	r2, [r7, #20]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d019      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006cd6:	4b24      	ldr	r3, [pc, #144]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ce0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006ce2:	4b21      	ldr	r3, [pc, #132]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ce8:	4a1f      	ldr	r2, [pc, #124]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006cf2:	4b1d      	ldr	r3, [pc, #116]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cf8:	4a1b      	ldr	r2, [pc, #108]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006d02:	4a19      	ldr	r2, [pc, #100]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f003 0301 	and.w	r3, r3, #1
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d016      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d14:	f7fe fb74 	bl	8005400 <HAL_GetTick>
 8006d18:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d1a:	e00b      	b.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d1c:	f7fe fb70 	bl	8005400 <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d902      	bls.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	74fb      	strb	r3, [r7, #19]
            break;
 8006d32:	e006      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d34:	4b0c      	ldr	r3, [pc, #48]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d3a:	f003 0302 	and.w	r3, r3, #2
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d0ec      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8006d42:	7cfb      	ldrb	r3, [r7, #19]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d10c      	bne.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d48:	4b07      	ldr	r3, [pc, #28]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d58:	4903      	ldr	r1, [pc, #12]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006d60:	e008      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d62:	7cfb      	ldrb	r3, [r7, #19]
 8006d64:	74bb      	strb	r3, [r7, #18]
 8006d66:	e005      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8006d68:	40021000 	.word	0x40021000
 8006d6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d70:	7cfb      	ldrb	r3, [r7, #19]
 8006d72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d74:	7c7b      	ldrb	r3, [r7, #17]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d105      	bne.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d7a:	4ba0      	ldr	r3, [pc, #640]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d7e:	4a9f      	ldr	r2, [pc, #636]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d84:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00a      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006d92:	4b9a      	ldr	r3, [pc, #616]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d98:	f023 0203 	bic.w	r2, r3, #3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006da0:	4996      	ldr	r1, [pc, #600]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006da2:	4313      	orrs	r3, r2
 8006da4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0302 	and.w	r3, r3, #2
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d00a      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006db4:	4b91      	ldr	r3, [pc, #580]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dba:	f023 020c 	bic.w	r2, r3, #12
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc2:	498e      	ldr	r1, [pc, #568]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0304 	and.w	r3, r3, #4
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00a      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006dd6:	4b89      	ldr	r3, [pc, #548]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ddc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006de4:	4985      	ldr	r1, [pc, #532]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006de6:	4313      	orrs	r3, r2
 8006de8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 0308 	and.w	r3, r3, #8
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d00a      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006df8:	4b80      	ldr	r3, [pc, #512]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dfe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e06:	497d      	ldr	r1, [pc, #500]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0310 	and.w	r3, r3, #16
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00a      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006e1a:	4b78      	ldr	r3, [pc, #480]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e28:	4974      	ldr	r1, [pc, #464]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0320 	and.w	r3, r3, #32
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d00a      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e3c:	4b6f      	ldr	r3, [pc, #444]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e42:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e4a:	496c      	ldr	r1, [pc, #432]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00a      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e5e:	4b67      	ldr	r3, [pc, #412]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e6c:	4963      	ldr	r1, [pc, #396]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00a      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e80:	4b5e      	ldr	r3, [pc, #376]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e8e:	495b      	ldr	r1, [pc, #364]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e90:	4313      	orrs	r3, r2
 8006e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00a      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ea2:	4b56      	ldr	r3, [pc, #344]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ea8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eb0:	4952      	ldr	r1, [pc, #328]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00a      	beq.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006ec4:	4b4d      	ldr	r3, [pc, #308]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ed2:	494a      	ldr	r1, [pc, #296]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00a      	beq.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006ee6:	4b45      	ldr	r3, [pc, #276]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ef4:	4941      	ldr	r1, [pc, #260]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00a      	beq.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006f08:	4b3c      	ldr	r3, [pc, #240]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f0e:	f023 0203 	bic.w	r2, r3, #3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f16:	4939      	ldr	r1, [pc, #228]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d028      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f2a:	4b34      	ldr	r3, [pc, #208]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f30:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f38:	4930      	ldr	r1, [pc, #192]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f48:	d106      	bne.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f4a:	4b2c      	ldr	r3, [pc, #176]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	4a2b      	ldr	r2, [pc, #172]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f54:	60d3      	str	r3, [r2, #12]
 8006f56:	e011      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f60:	d10c      	bne.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	3304      	adds	r3, #4
 8006f66:	2101      	movs	r1, #1
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f000 f8f9 	bl	8007160 <RCCEx_PLLSAI1_Config>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006f72:	7cfb      	ldrb	r3, [r7, #19]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d001      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8006f78:	7cfb      	ldrb	r3, [r7, #19]
 8006f7a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d04d      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f90:	d108      	bne.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8006f92:	4b1a      	ldr	r3, [pc, #104]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f98:	4a18      	ldr	r2, [pc, #96]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f9e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006fa2:	e012      	b.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006fa4:	4b15      	ldr	r3, [pc, #84]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006faa:	4a14      	ldr	r2, [pc, #80]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fb0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006fb4:	4b11      	ldr	r3, [pc, #68]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fc2:	490e      	ldr	r1, [pc, #56]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fd2:	d106      	bne.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fd4:	4b09      	ldr	r3, [pc, #36]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	4a08      	ldr	r2, [pc, #32]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fde:	60d3      	str	r3, [r2, #12]
 8006fe0:	e020      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fe6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fea:	d109      	bne.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006fec:	4b03      	ldr	r3, [pc, #12]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	4a02      	ldr	r2, [pc, #8]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ff6:	60d3      	str	r3, [r2, #12]
 8006ff8:	e014      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006ffa:	bf00      	nop
 8006ffc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007004:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007008:	d10c      	bne.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	3304      	adds	r3, #4
 800700e:	2101      	movs	r1, #1
 8007010:	4618      	mov	r0, r3
 8007012:	f000 f8a5 	bl	8007160 <RCCEx_PLLSAI1_Config>
 8007016:	4603      	mov	r3, r0
 8007018:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800701a:	7cfb      	ldrb	r3, [r7, #19]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d001      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007020:	7cfb      	ldrb	r3, [r7, #19]
 8007022:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d028      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007030:	4b4a      	ldr	r3, [pc, #296]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007036:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800703e:	4947      	ldr	r1, [pc, #284]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007040:	4313      	orrs	r3, r2
 8007042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800704a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800704e:	d106      	bne.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007050:	4b42      	ldr	r3, [pc, #264]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	4a41      	ldr	r2, [pc, #260]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007056:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800705a:	60d3      	str	r3, [r2, #12]
 800705c:	e011      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007062:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007066:	d10c      	bne.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	3304      	adds	r3, #4
 800706c:	2101      	movs	r1, #1
 800706e:	4618      	mov	r0, r3
 8007070:	f000 f876 	bl	8007160 <RCCEx_PLLSAI1_Config>
 8007074:	4603      	mov	r3, r0
 8007076:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007078:	7cfb      	ldrb	r3, [r7, #19]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d001      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 800707e:	7cfb      	ldrb	r3, [r7, #19]
 8007080:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800708a:	2b00      	cmp	r3, #0
 800708c:	d01e      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800708e:	4b33      	ldr	r3, [pc, #204]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007094:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800709e:	492f      	ldr	r1, [pc, #188]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80070a0:	4313      	orrs	r3, r2
 80070a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070b0:	d10c      	bne.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	3304      	adds	r3, #4
 80070b6:	2102      	movs	r1, #2
 80070b8:	4618      	mov	r0, r3
 80070ba:	f000 f851 	bl	8007160 <RCCEx_PLLSAI1_Config>
 80070be:	4603      	mov	r3, r0
 80070c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80070c2:	7cfb      	ldrb	r3, [r7, #19]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d001      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 80070c8:	7cfb      	ldrb	r3, [r7, #19]
 80070ca:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00b      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80070d8:	4b20      	ldr	r3, [pc, #128]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80070da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070de:	f023 0204 	bic.w	r2, r3, #4
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070e8:	491c      	ldr	r1, [pc, #112]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80070ea:	4313      	orrs	r3, r2
 80070ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00b      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80070fc:	4b17      	ldr	r3, [pc, #92]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80070fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007102:	f023 0218 	bic.w	r2, r3, #24
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800710c:	4913      	ldr	r1, [pc, #76]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800710e:	4313      	orrs	r3, r2
 8007110:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d017      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007120:	4b0e      	ldr	r3, [pc, #56]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007122:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007126:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007130:	490a      	ldr	r1, [pc, #40]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007132:	4313      	orrs	r3, r2
 8007134:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800713e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007142:	d105      	bne.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007144:	4b05      	ldr	r3, [pc, #20]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	4a04      	ldr	r2, [pc, #16]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800714a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800714e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007150:	7cbb      	ldrb	r3, [r7, #18]
}
 8007152:	4618      	mov	r0, r3
 8007154:	3718      	adds	r7, #24
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	40021000 	.word	0x40021000

08007160 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800716a:	2300      	movs	r3, #0
 800716c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800716e:	4b70      	ldr	r3, [pc, #448]	; (8007330 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	f003 0303 	and.w	r3, r3, #3
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00e      	beq.n	8007198 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800717a:	4b6d      	ldr	r3, [pc, #436]	; (8007330 <RCCEx_PLLSAI1_Config+0x1d0>)
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	f003 0203 	and.w	r2, r3, #3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	429a      	cmp	r2, r3
 8007188:	d103      	bne.n	8007192 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
       ||
 800718e:	2b00      	cmp	r3, #0
 8007190:	d13f      	bne.n	8007212 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	73fb      	strb	r3, [r7, #15]
 8007196:	e03c      	b.n	8007212 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2b02      	cmp	r3, #2
 800719e:	d00c      	beq.n	80071ba <RCCEx_PLLSAI1_Config+0x5a>
 80071a0:	2b03      	cmp	r3, #3
 80071a2:	d013      	beq.n	80071cc <RCCEx_PLLSAI1_Config+0x6c>
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d120      	bne.n	80071ea <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80071a8:	4b61      	ldr	r3, [pc, #388]	; (8007330 <RCCEx_PLLSAI1_Config+0x1d0>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 0302 	and.w	r3, r3, #2
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d11d      	bne.n	80071f0 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071b8:	e01a      	b.n	80071f0 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80071ba:	4b5d      	ldr	r3, [pc, #372]	; (8007330 <RCCEx_PLLSAI1_Config+0x1d0>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d116      	bne.n	80071f4 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071ca:	e013      	b.n	80071f4 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80071cc:	4b58      	ldr	r3, [pc, #352]	; (8007330 <RCCEx_PLLSAI1_Config+0x1d0>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10f      	bne.n	80071f8 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80071d8:	4b55      	ldr	r3, [pc, #340]	; (8007330 <RCCEx_PLLSAI1_Config+0x1d0>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d109      	bne.n	80071f8 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80071e8:	e006      	b.n	80071f8 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	73fb      	strb	r3, [r7, #15]
      break;
 80071ee:	e004      	b.n	80071fa <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80071f0:	bf00      	nop
 80071f2:	e002      	b.n	80071fa <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80071f4:	bf00      	nop
 80071f6:	e000      	b.n	80071fa <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80071f8:	bf00      	nop
    }

    if(status == HAL_OK)
 80071fa:	7bfb      	ldrb	r3, [r7, #15]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d108      	bne.n	8007212 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8007200:	4b4b      	ldr	r3, [pc, #300]	; (8007330 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	f023 0203 	bic.w	r2, r3, #3
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4948      	ldr	r1, [pc, #288]	; (8007330 <RCCEx_PLLSAI1_Config+0x1d0>)
 800720e:	4313      	orrs	r3, r2
 8007210:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007212:	7bfb      	ldrb	r3, [r7, #15]
 8007214:	2b00      	cmp	r3, #0
 8007216:	f040 8086 	bne.w	8007326 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800721a:	4b45      	ldr	r3, [pc, #276]	; (8007330 <RCCEx_PLLSAI1_Config+0x1d0>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a44      	ldr	r2, [pc, #272]	; (8007330 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007220:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007224:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007226:	f7fe f8eb 	bl	8005400 <HAL_GetTick>
 800722a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800722c:	e009      	b.n	8007242 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800722e:	f7fe f8e7 	bl	8005400 <HAL_GetTick>
 8007232:	4602      	mov	r2, r0
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	2b02      	cmp	r3, #2
 800723a:	d902      	bls.n	8007242 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 800723c:	2303      	movs	r3, #3
 800723e:	73fb      	strb	r3, [r7, #15]
        break;
 8007240:	e005      	b.n	800724e <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007242:	4b3b      	ldr	r3, [pc, #236]	; (8007330 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1ef      	bne.n	800722e <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800724e:	7bfb      	ldrb	r3, [r7, #15]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d168      	bne.n	8007326 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d113      	bne.n	8007282 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800725a:	4b35      	ldr	r3, [pc, #212]	; (8007330 <RCCEx_PLLSAI1_Config+0x1d0>)
 800725c:	691a      	ldr	r2, [r3, #16]
 800725e:	4b35      	ldr	r3, [pc, #212]	; (8007334 <RCCEx_PLLSAI1_Config+0x1d4>)
 8007260:	4013      	ands	r3, r2
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	6892      	ldr	r2, [r2, #8]
 8007266:	0211      	lsls	r1, r2, #8
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	68d2      	ldr	r2, [r2, #12]
 800726c:	06d2      	lsls	r2, r2, #27
 800726e:	4311      	orrs	r1, r2
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	6852      	ldr	r2, [r2, #4]
 8007274:	3a01      	subs	r2, #1
 8007276:	0112      	lsls	r2, r2, #4
 8007278:	430a      	orrs	r2, r1
 800727a:	492d      	ldr	r1, [pc, #180]	; (8007330 <RCCEx_PLLSAI1_Config+0x1d0>)
 800727c:	4313      	orrs	r3, r2
 800727e:	610b      	str	r3, [r1, #16]
 8007280:	e02d      	b.n	80072de <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d115      	bne.n	80072b4 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007288:	4b29      	ldr	r3, [pc, #164]	; (8007330 <RCCEx_PLLSAI1_Config+0x1d0>)
 800728a:	691a      	ldr	r2, [r3, #16]
 800728c:	4b2a      	ldr	r3, [pc, #168]	; (8007338 <RCCEx_PLLSAI1_Config+0x1d8>)
 800728e:	4013      	ands	r3, r2
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	6892      	ldr	r2, [r2, #8]
 8007294:	0211      	lsls	r1, r2, #8
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	6912      	ldr	r2, [r2, #16]
 800729a:	0852      	lsrs	r2, r2, #1
 800729c:	3a01      	subs	r2, #1
 800729e:	0552      	lsls	r2, r2, #21
 80072a0:	4311      	orrs	r1, r2
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	6852      	ldr	r2, [r2, #4]
 80072a6:	3a01      	subs	r2, #1
 80072a8:	0112      	lsls	r2, r2, #4
 80072aa:	430a      	orrs	r2, r1
 80072ac:	4920      	ldr	r1, [pc, #128]	; (8007330 <RCCEx_PLLSAI1_Config+0x1d0>)
 80072ae:	4313      	orrs	r3, r2
 80072b0:	610b      	str	r3, [r1, #16]
 80072b2:	e014      	b.n	80072de <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80072b4:	4b1e      	ldr	r3, [pc, #120]	; (8007330 <RCCEx_PLLSAI1_Config+0x1d0>)
 80072b6:	691a      	ldr	r2, [r3, #16]
 80072b8:	4b20      	ldr	r3, [pc, #128]	; (800733c <RCCEx_PLLSAI1_Config+0x1dc>)
 80072ba:	4013      	ands	r3, r2
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	6892      	ldr	r2, [r2, #8]
 80072c0:	0211      	lsls	r1, r2, #8
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	6952      	ldr	r2, [r2, #20]
 80072c6:	0852      	lsrs	r2, r2, #1
 80072c8:	3a01      	subs	r2, #1
 80072ca:	0652      	lsls	r2, r2, #25
 80072cc:	4311      	orrs	r1, r2
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	6852      	ldr	r2, [r2, #4]
 80072d2:	3a01      	subs	r2, #1
 80072d4:	0112      	lsls	r2, r2, #4
 80072d6:	430a      	orrs	r2, r1
 80072d8:	4915      	ldr	r1, [pc, #84]	; (8007330 <RCCEx_PLLSAI1_Config+0x1d0>)
 80072da:	4313      	orrs	r3, r2
 80072dc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80072de:	4b14      	ldr	r3, [pc, #80]	; (8007330 <RCCEx_PLLSAI1_Config+0x1d0>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a13      	ldr	r2, [pc, #76]	; (8007330 <RCCEx_PLLSAI1_Config+0x1d0>)
 80072e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80072e8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072ea:	f7fe f889 	bl	8005400 <HAL_GetTick>
 80072ee:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80072f0:	e009      	b.n	8007306 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80072f2:	f7fe f885 	bl	8005400 <HAL_GetTick>
 80072f6:	4602      	mov	r2, r0
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d902      	bls.n	8007306 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8007300:	2303      	movs	r3, #3
 8007302:	73fb      	strb	r3, [r7, #15]
          break;
 8007304:	e005      	b.n	8007312 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007306:	4b0a      	ldr	r3, [pc, #40]	; (8007330 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800730e:	2b00      	cmp	r3, #0
 8007310:	d0ef      	beq.n	80072f2 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8007312:	7bfb      	ldrb	r3, [r7, #15]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d106      	bne.n	8007326 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007318:	4b05      	ldr	r3, [pc, #20]	; (8007330 <RCCEx_PLLSAI1_Config+0x1d0>)
 800731a:	691a      	ldr	r2, [r3, #16]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	4903      	ldr	r1, [pc, #12]	; (8007330 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007322:	4313      	orrs	r3, r2
 8007324:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007326:	7bfb      	ldrb	r3, [r7, #15]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}
 8007330:	40021000 	.word	0x40021000
 8007334:	07ff800f 	.word	0x07ff800f
 8007338:	ff9f800f 	.word	0xff9f800f
 800733c:	f9ff800f 	.word	0xf9ff800f

08007340 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800734a:	2300      	movs	r3, #0
 800734c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800734e:	4b70      	ldr	r3, [pc, #448]	; (8007510 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	f003 0303 	and.w	r3, r3, #3
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00e      	beq.n	8007378 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800735a:	4b6d      	ldr	r3, [pc, #436]	; (8007510 <RCCEx_PLLSAI2_Config+0x1d0>)
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	f003 0203 	and.w	r2, r3, #3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	429a      	cmp	r2, r3
 8007368:	d103      	bne.n	8007372 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
       ||
 800736e:	2b00      	cmp	r3, #0
 8007370:	d13f      	bne.n	80073f2 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	73fb      	strb	r3, [r7, #15]
 8007376:	e03c      	b.n	80073f2 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2b02      	cmp	r3, #2
 800737e:	d00c      	beq.n	800739a <RCCEx_PLLSAI2_Config+0x5a>
 8007380:	2b03      	cmp	r3, #3
 8007382:	d013      	beq.n	80073ac <RCCEx_PLLSAI2_Config+0x6c>
 8007384:	2b01      	cmp	r3, #1
 8007386:	d120      	bne.n	80073ca <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007388:	4b61      	ldr	r3, [pc, #388]	; (8007510 <RCCEx_PLLSAI2_Config+0x1d0>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 0302 	and.w	r3, r3, #2
 8007390:	2b00      	cmp	r3, #0
 8007392:	d11d      	bne.n	80073d0 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007398:	e01a      	b.n	80073d0 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800739a:	4b5d      	ldr	r3, [pc, #372]	; (8007510 <RCCEx_PLLSAI2_Config+0x1d0>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d116      	bne.n	80073d4 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073aa:	e013      	b.n	80073d4 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80073ac:	4b58      	ldr	r3, [pc, #352]	; (8007510 <RCCEx_PLLSAI2_Config+0x1d0>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d10f      	bne.n	80073d8 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80073b8:	4b55      	ldr	r3, [pc, #340]	; (8007510 <RCCEx_PLLSAI2_Config+0x1d0>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d109      	bne.n	80073d8 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80073c8:	e006      	b.n	80073d8 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	73fb      	strb	r3, [r7, #15]
      break;
 80073ce:	e004      	b.n	80073da <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80073d0:	bf00      	nop
 80073d2:	e002      	b.n	80073da <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80073d4:	bf00      	nop
 80073d6:	e000      	b.n	80073da <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80073d8:	bf00      	nop
    }

    if(status == HAL_OK)
 80073da:	7bfb      	ldrb	r3, [r7, #15]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d108      	bne.n	80073f2 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80073e0:	4b4b      	ldr	r3, [pc, #300]	; (8007510 <RCCEx_PLLSAI2_Config+0x1d0>)
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	f023 0203 	bic.w	r2, r3, #3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4948      	ldr	r1, [pc, #288]	; (8007510 <RCCEx_PLLSAI2_Config+0x1d0>)
 80073ee:	4313      	orrs	r3, r2
 80073f0:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80073f2:	7bfb      	ldrb	r3, [r7, #15]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f040 8086 	bne.w	8007506 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80073fa:	4b45      	ldr	r3, [pc, #276]	; (8007510 <RCCEx_PLLSAI2_Config+0x1d0>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a44      	ldr	r2, [pc, #272]	; (8007510 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007404:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007406:	f7fd fffb 	bl	8005400 <HAL_GetTick>
 800740a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800740c:	e009      	b.n	8007422 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800740e:	f7fd fff7 	bl	8005400 <HAL_GetTick>
 8007412:	4602      	mov	r2, r0
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	2b02      	cmp	r3, #2
 800741a:	d902      	bls.n	8007422 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	73fb      	strb	r3, [r7, #15]
        break;
 8007420:	e005      	b.n	800742e <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007422:	4b3b      	ldr	r3, [pc, #236]	; (8007510 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1ef      	bne.n	800740e <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800742e:	7bfb      	ldrb	r3, [r7, #15]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d168      	bne.n	8007506 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d113      	bne.n	8007462 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800743a:	4b35      	ldr	r3, [pc, #212]	; (8007510 <RCCEx_PLLSAI2_Config+0x1d0>)
 800743c:	695a      	ldr	r2, [r3, #20]
 800743e:	4b35      	ldr	r3, [pc, #212]	; (8007514 <RCCEx_PLLSAI2_Config+0x1d4>)
 8007440:	4013      	ands	r3, r2
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	6892      	ldr	r2, [r2, #8]
 8007446:	0211      	lsls	r1, r2, #8
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	68d2      	ldr	r2, [r2, #12]
 800744c:	06d2      	lsls	r2, r2, #27
 800744e:	4311      	orrs	r1, r2
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	6852      	ldr	r2, [r2, #4]
 8007454:	3a01      	subs	r2, #1
 8007456:	0112      	lsls	r2, r2, #4
 8007458:	430a      	orrs	r2, r1
 800745a:	492d      	ldr	r1, [pc, #180]	; (8007510 <RCCEx_PLLSAI2_Config+0x1d0>)
 800745c:	4313      	orrs	r3, r2
 800745e:	614b      	str	r3, [r1, #20]
 8007460:	e02d      	b.n	80074be <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	2b01      	cmp	r3, #1
 8007466:	d115      	bne.n	8007494 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007468:	4b29      	ldr	r3, [pc, #164]	; (8007510 <RCCEx_PLLSAI2_Config+0x1d0>)
 800746a:	695a      	ldr	r2, [r3, #20]
 800746c:	4b2a      	ldr	r3, [pc, #168]	; (8007518 <RCCEx_PLLSAI2_Config+0x1d8>)
 800746e:	4013      	ands	r3, r2
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	6892      	ldr	r2, [r2, #8]
 8007474:	0211      	lsls	r1, r2, #8
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	6912      	ldr	r2, [r2, #16]
 800747a:	0852      	lsrs	r2, r2, #1
 800747c:	3a01      	subs	r2, #1
 800747e:	0552      	lsls	r2, r2, #21
 8007480:	4311      	orrs	r1, r2
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	6852      	ldr	r2, [r2, #4]
 8007486:	3a01      	subs	r2, #1
 8007488:	0112      	lsls	r2, r2, #4
 800748a:	430a      	orrs	r2, r1
 800748c:	4920      	ldr	r1, [pc, #128]	; (8007510 <RCCEx_PLLSAI2_Config+0x1d0>)
 800748e:	4313      	orrs	r3, r2
 8007490:	614b      	str	r3, [r1, #20]
 8007492:	e014      	b.n	80074be <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007494:	4b1e      	ldr	r3, [pc, #120]	; (8007510 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007496:	695a      	ldr	r2, [r3, #20]
 8007498:	4b20      	ldr	r3, [pc, #128]	; (800751c <RCCEx_PLLSAI2_Config+0x1dc>)
 800749a:	4013      	ands	r3, r2
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	6892      	ldr	r2, [r2, #8]
 80074a0:	0211      	lsls	r1, r2, #8
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	6952      	ldr	r2, [r2, #20]
 80074a6:	0852      	lsrs	r2, r2, #1
 80074a8:	3a01      	subs	r2, #1
 80074aa:	0652      	lsls	r2, r2, #25
 80074ac:	4311      	orrs	r1, r2
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	6852      	ldr	r2, [r2, #4]
 80074b2:	3a01      	subs	r2, #1
 80074b4:	0112      	lsls	r2, r2, #4
 80074b6:	430a      	orrs	r2, r1
 80074b8:	4915      	ldr	r1, [pc, #84]	; (8007510 <RCCEx_PLLSAI2_Config+0x1d0>)
 80074ba:	4313      	orrs	r3, r2
 80074bc:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80074be:	4b14      	ldr	r3, [pc, #80]	; (8007510 <RCCEx_PLLSAI2_Config+0x1d0>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a13      	ldr	r2, [pc, #76]	; (8007510 <RCCEx_PLLSAI2_Config+0x1d0>)
 80074c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074ca:	f7fd ff99 	bl	8005400 <HAL_GetTick>
 80074ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80074d0:	e009      	b.n	80074e6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80074d2:	f7fd ff95 	bl	8005400 <HAL_GetTick>
 80074d6:	4602      	mov	r2, r0
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	1ad3      	subs	r3, r2, r3
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d902      	bls.n	80074e6 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80074e0:	2303      	movs	r3, #3
 80074e2:	73fb      	strb	r3, [r7, #15]
          break;
 80074e4:	e005      	b.n	80074f2 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80074e6:	4b0a      	ldr	r3, [pc, #40]	; (8007510 <RCCEx_PLLSAI2_Config+0x1d0>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d0ef      	beq.n	80074d2 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 80074f2:	7bfb      	ldrb	r3, [r7, #15]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d106      	bne.n	8007506 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80074f8:	4b05      	ldr	r3, [pc, #20]	; (8007510 <RCCEx_PLLSAI2_Config+0x1d0>)
 80074fa:	695a      	ldr	r2, [r3, #20]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	4903      	ldr	r1, [pc, #12]	; (8007510 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007502:	4313      	orrs	r3, r2
 8007504:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007506:	7bfb      	ldrb	r3, [r7, #15]
}
 8007508:	4618      	mov	r0, r3
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	40021000 	.word	0x40021000
 8007514:	07ff800f 	.word	0x07ff800f
 8007518:	ff9f800f 	.word	0xff9f800f
 800751c:	f9ff800f 	.word	0xf9ff800f

08007520 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d101      	bne.n	8007532 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e07c      	b.n	800762c <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800753e:	b2db      	uxtb	r3, r3
 8007540:	2b00      	cmp	r3, #0
 8007542:	d106      	bne.n	8007552 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f7fd fd01 	bl	8004f54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2202      	movs	r2, #2
 8007556:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007568:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007572:	d902      	bls.n	800757a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007574:	2300      	movs	r3, #0
 8007576:	60fb      	str	r3, [r7, #12]
 8007578:	e002      	b.n	8007580 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800757a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800757e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007588:	d007      	beq.n	800759a <HAL_SPI_Init+0x7a>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007592:	d002      	beq.n	800759a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10b      	bne.n	80075ba <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80075aa:	d903      	bls.n	80075b4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2202      	movs	r2, #2
 80075b0:	631a      	str	r2, [r3, #48]	; 0x30
 80075b2:	e002      	b.n	80075ba <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	685a      	ldr	r2, [r3, #4]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	431a      	orrs	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	431a      	orrs	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	695b      	ldr	r3, [r3, #20]
 80075ce:	431a      	orrs	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	699b      	ldr	r3, [r3, #24]
 80075d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075d8:	431a      	orrs	r2, r3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	69db      	ldr	r3, [r3, #28]
 80075de:	431a      	orrs	r2, r3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a1b      	ldr	r3, [r3, #32]
 80075e4:	ea42 0103 	orr.w	r1, r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	430a      	orrs	r2, r1
 80075f2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	699b      	ldr	r3, [r3, #24]
 80075f8:	0c1b      	lsrs	r3, r3, #16
 80075fa:	f003 0204 	and.w	r2, r3, #4
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007602:	431a      	orrs	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007608:	431a      	orrs	r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	ea42 0103 	orr.w	r1, r2, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	68fa      	ldr	r2, [r7, #12]
 8007618:	430a      	orrs	r2, r1
 800761a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2201      	movs	r2, #1
 8007626:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3710      	adds	r7, #16
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b088      	sub	sp, #32
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	603b      	str	r3, [r7, #0]
 8007640:	4613      	mov	r3, r2
 8007642:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007644:	2300      	movs	r3, #0
 8007646:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800764e:	2b01      	cmp	r3, #1
 8007650:	d101      	bne.n	8007656 <HAL_SPI_Transmit+0x22>
 8007652:	2302      	movs	r3, #2
 8007654:	e150      	b.n	80078f8 <HAL_SPI_Transmit+0x2c4>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2201      	movs	r2, #1
 800765a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800765e:	f7fd fecf 	bl	8005400 <HAL_GetTick>
 8007662:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007664:	88fb      	ldrh	r3, [r7, #6]
 8007666:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800766e:	b2db      	uxtb	r3, r3
 8007670:	2b01      	cmp	r3, #1
 8007672:	d002      	beq.n	800767a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007674:	2302      	movs	r3, #2
 8007676:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007678:	e135      	b.n	80078e6 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d002      	beq.n	8007686 <HAL_SPI_Transmit+0x52>
 8007680:	88fb      	ldrh	r3, [r7, #6]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d102      	bne.n	800768c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	77fb      	strb	r3, [r7, #31]
    goto error;
 800768a:	e12c      	b.n	80078e6 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2203      	movs	r2, #3
 8007690:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	88fa      	ldrh	r2, [r7, #6]
 80076a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	88fa      	ldrh	r2, [r7, #6]
 80076aa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2200      	movs	r2, #0
 80076b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2200      	movs	r2, #0
 80076be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2200      	movs	r2, #0
 80076c6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2200      	movs	r2, #0
 80076cc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076d6:	d107      	bne.n	80076e8 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076e6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f2:	2b40      	cmp	r3, #64	; 0x40
 80076f4:	d007      	beq.n	8007706 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007704:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800770e:	d94b      	bls.n	80077a8 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d002      	beq.n	800771e <HAL_SPI_Transmit+0xea>
 8007718:	8afb      	ldrh	r3, [r7, #22]
 800771a:	2b01      	cmp	r3, #1
 800771c:	d13e      	bne.n	800779c <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007722:	881a      	ldrh	r2, [r3, #0]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772e:	1c9a      	adds	r2, r3, #2
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007738:	b29b      	uxth	r3, r3
 800773a:	3b01      	subs	r3, #1
 800773c:	b29a      	uxth	r2, r3
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007742:	e02b      	b.n	800779c <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	f003 0302 	and.w	r3, r3, #2
 800774e:	2b02      	cmp	r3, #2
 8007750:	d112      	bne.n	8007778 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007756:	881a      	ldrh	r2, [r3, #0]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007762:	1c9a      	adds	r2, r3, #2
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800776c:	b29b      	uxth	r3, r3
 800776e:	3b01      	subs	r3, #1
 8007770:	b29a      	uxth	r2, r3
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007776:	e011      	b.n	800779c <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007778:	f7fd fe42 	bl	8005400 <HAL_GetTick>
 800777c:	4602      	mov	r2, r0
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	1ad3      	subs	r3, r2, r3
 8007782:	683a      	ldr	r2, [r7, #0]
 8007784:	429a      	cmp	r2, r3
 8007786:	d803      	bhi.n	8007790 <HAL_SPI_Transmit+0x15c>
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800778e:	d102      	bne.n	8007796 <HAL_SPI_Transmit+0x162>
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d102      	bne.n	800779c <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8007796:	2303      	movs	r3, #3
 8007798:	77fb      	strb	r3, [r7, #31]
          goto error;
 800779a:	e0a4      	b.n	80078e6 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1ce      	bne.n	8007744 <HAL_SPI_Transmit+0x110>
 80077a6:	e07c      	b.n	80078a2 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d002      	beq.n	80077b6 <HAL_SPI_Transmit+0x182>
 80077b0:	8afb      	ldrh	r3, [r7, #22]
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d170      	bne.n	8007898 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d912      	bls.n	80077e6 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c4:	881a      	ldrh	r2, [r3, #0]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d0:	1c9a      	adds	r2, r3, #2
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077da:	b29b      	uxth	r3, r3
 80077dc:	3b02      	subs	r3, #2
 80077de:	b29a      	uxth	r2, r3
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80077e4:	e058      	b.n	8007898 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	330c      	adds	r3, #12
 80077f0:	7812      	ldrb	r2, [r2, #0]
 80077f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f8:	1c5a      	adds	r2, r3, #1
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007802:	b29b      	uxth	r3, r3
 8007804:	3b01      	subs	r3, #1
 8007806:	b29a      	uxth	r2, r3
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800780c:	e044      	b.n	8007898 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	f003 0302 	and.w	r3, r3, #2
 8007818:	2b02      	cmp	r3, #2
 800781a:	d12b      	bne.n	8007874 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007820:	b29b      	uxth	r3, r3
 8007822:	2b01      	cmp	r3, #1
 8007824:	d912      	bls.n	800784c <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782a:	881a      	ldrh	r2, [r3, #0]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007836:	1c9a      	adds	r2, r3, #2
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007840:	b29b      	uxth	r3, r3
 8007842:	3b02      	subs	r3, #2
 8007844:	b29a      	uxth	r2, r3
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	87da      	strh	r2, [r3, #62]	; 0x3e
 800784a:	e025      	b.n	8007898 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	330c      	adds	r3, #12
 8007856:	7812      	ldrb	r2, [r2, #0]
 8007858:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785e:	1c5a      	adds	r2, r3, #1
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007868:	b29b      	uxth	r3, r3
 800786a:	3b01      	subs	r3, #1
 800786c:	b29a      	uxth	r2, r3
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007872:	e011      	b.n	8007898 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007874:	f7fd fdc4 	bl	8005400 <HAL_GetTick>
 8007878:	4602      	mov	r2, r0
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	683a      	ldr	r2, [r7, #0]
 8007880:	429a      	cmp	r2, r3
 8007882:	d803      	bhi.n	800788c <HAL_SPI_Transmit+0x258>
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800788a:	d102      	bne.n	8007892 <HAL_SPI_Transmit+0x25e>
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d102      	bne.n	8007898 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8007892:	2303      	movs	r3, #3
 8007894:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007896:	e026      	b.n	80078e6 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800789c:	b29b      	uxth	r3, r3
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d1b5      	bne.n	800780e <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078a2:	69ba      	ldr	r2, [r7, #24]
 80078a4:	6839      	ldr	r1, [r7, #0]
 80078a6:	68f8      	ldr	r0, [r7, #12]
 80078a8:	f000 fc94 	bl	80081d4 <SPI_EndRxTxTransaction>
 80078ac:	4603      	mov	r3, r0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d002      	beq.n	80078b8 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2220      	movs	r2, #32
 80078b6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d10a      	bne.n	80078d6 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078c0:	2300      	movs	r3, #0
 80078c2:	613b      	str	r3, [r7, #16]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	613b      	str	r3, [r7, #16]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	613b      	str	r3, [r7, #16]
 80078d4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d002      	beq.n	80078e4 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	77fb      	strb	r3, [r7, #31]
 80078e2:	e000      	b.n	80078e6 <HAL_SPI_Transmit+0x2b2>
  }

error:
 80078e4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2201      	movs	r2, #1
 80078ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80078f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3720      	adds	r7, #32
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b088      	sub	sp, #32
 8007904:	af02      	add	r7, sp, #8
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	603b      	str	r3, [r7, #0]
 800790c:	4613      	mov	r3, r2
 800790e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007910:	2300      	movs	r3, #0
 8007912:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800791c:	d112      	bne.n	8007944 <HAL_SPI_Receive+0x44>
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10e      	bne.n	8007944 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2204      	movs	r2, #4
 800792a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800792e:	88fa      	ldrh	r2, [r7, #6]
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	9300      	str	r3, [sp, #0]
 8007934:	4613      	mov	r3, r2
 8007936:	68ba      	ldr	r2, [r7, #8]
 8007938:	68b9      	ldr	r1, [r7, #8]
 800793a:	68f8      	ldr	r0, [r7, #12]
 800793c:	f000 f908 	bl	8007b50 <HAL_SPI_TransmitReceive>
 8007940:	4603      	mov	r3, r0
 8007942:	e101      	b.n	8007b48 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800794a:	2b01      	cmp	r3, #1
 800794c:	d101      	bne.n	8007952 <HAL_SPI_Receive+0x52>
 800794e:	2302      	movs	r3, #2
 8007950:	e0fa      	b.n	8007b48 <HAL_SPI_Receive+0x248>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2201      	movs	r2, #1
 8007956:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800795a:	f7fd fd51 	bl	8005400 <HAL_GetTick>
 800795e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007966:	b2db      	uxtb	r3, r3
 8007968:	2b01      	cmp	r3, #1
 800796a:	d002      	beq.n	8007972 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800796c:	2302      	movs	r3, #2
 800796e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007970:	e0e1      	b.n	8007b36 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d002      	beq.n	800797e <HAL_SPI_Receive+0x7e>
 8007978:	88fb      	ldrh	r3, [r7, #6]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d102      	bne.n	8007984 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007982:	e0d8      	b.n	8007b36 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2204      	movs	r2, #4
 8007988:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2200      	movs	r2, #0
 8007990:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	68ba      	ldr	r2, [r7, #8]
 8007996:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	88fa      	ldrh	r2, [r7, #6]
 800799c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	88fa      	ldrh	r2, [r7, #6]
 80079a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2200      	movs	r2, #0
 80079ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2200      	movs	r2, #0
 80079be:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2200      	movs	r2, #0
 80079c4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80079ce:	d908      	bls.n	80079e2 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	685a      	ldr	r2, [r3, #4]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80079de:	605a      	str	r2, [r3, #4]
 80079e0:	e007      	b.n	80079f2 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	685a      	ldr	r2, [r3, #4]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80079f0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079fa:	d107      	bne.n	8007a0c <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007a0a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a16:	2b40      	cmp	r3, #64	; 0x40
 8007a18:	d007      	beq.n	8007a2a <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a28:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a32:	d867      	bhi.n	8007b04 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007a34:	e030      	b.n	8007a98 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	f003 0301 	and.w	r3, r3, #1
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d117      	bne.n	8007a74 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f103 020c 	add.w	r2, r3, #12
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a50:	7812      	ldrb	r2, [r2, #0]
 8007a52:	b2d2      	uxtb	r2, r2
 8007a54:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5a:	1c5a      	adds	r2, r3, #1
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007a72:	e011      	b.n	8007a98 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a74:	f7fd fcc4 	bl	8005400 <HAL_GetTick>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	1ad3      	subs	r3, r2, r3
 8007a7e:	683a      	ldr	r2, [r7, #0]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d803      	bhi.n	8007a8c <HAL_SPI_Receive+0x18c>
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a8a:	d102      	bne.n	8007a92 <HAL_SPI_Receive+0x192>
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d102      	bne.n	8007a98 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8007a92:	2303      	movs	r3, #3
 8007a94:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007a96:	e04e      	b.n	8007b36 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d1c8      	bne.n	8007a36 <HAL_SPI_Receive+0x136>
 8007aa4:	e034      	b.n	8007b10 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	f003 0301 	and.w	r3, r3, #1
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d115      	bne.n	8007ae0 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68da      	ldr	r2, [r3, #12]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007abe:	b292      	uxth	r2, r2
 8007ac0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac6:	1c9a      	adds	r2, r3, #2
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007ade:	e011      	b.n	8007b04 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ae0:	f7fd fc8e 	bl	8005400 <HAL_GetTick>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	683a      	ldr	r2, [r7, #0]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d803      	bhi.n	8007af8 <HAL_SPI_Receive+0x1f8>
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af6:	d102      	bne.n	8007afe <HAL_SPI_Receive+0x1fe>
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d102      	bne.n	8007b04 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8007afe:	2303      	movs	r3, #3
 8007b00:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007b02:	e018      	b.n	8007b36 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d1ca      	bne.n	8007aa6 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b10:	693a      	ldr	r2, [r7, #16]
 8007b12:	6839      	ldr	r1, [r7, #0]
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f000 fb05 	bl	8008124 <SPI_EndRxTransaction>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d002      	beq.n	8007b26 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2220      	movs	r2, #32
 8007b24:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d002      	beq.n	8007b34 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	75fb      	strb	r3, [r7, #23]
 8007b32:	e000      	b.n	8007b36 <HAL_SPI_Receive+0x236>
  }

error :
 8007b34:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3718      	adds	r7, #24
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b08a      	sub	sp, #40	; 0x28
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]
 8007b5c:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007b62:	2300      	movs	r3, #0
 8007b64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d101      	bne.n	8007b76 <HAL_SPI_TransmitReceive+0x26>
 8007b72:	2302      	movs	r3, #2
 8007b74:	e1fb      	b.n	8007f6e <HAL_SPI_TransmitReceive+0x41e>
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b7e:	f7fd fc3f 	bl	8005400 <HAL_GetTick>
 8007b82:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007b8a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007b92:	887b      	ldrh	r3, [r7, #2]
 8007b94:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007b96:	887b      	ldrh	r3, [r7, #2]
 8007b98:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007b9a:	7efb      	ldrb	r3, [r7, #27]
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d00e      	beq.n	8007bbe <HAL_SPI_TransmitReceive+0x6e>
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ba6:	d106      	bne.n	8007bb6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d102      	bne.n	8007bb6 <HAL_SPI_TransmitReceive+0x66>
 8007bb0:	7efb      	ldrb	r3, [r7, #27]
 8007bb2:	2b04      	cmp	r3, #4
 8007bb4:	d003      	beq.n	8007bbe <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007bb6:	2302      	movs	r3, #2
 8007bb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007bbc:	e1cd      	b.n	8007f5a <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d005      	beq.n	8007bd0 <HAL_SPI_TransmitReceive+0x80>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d002      	beq.n	8007bd0 <HAL_SPI_TransmitReceive+0x80>
 8007bca:	887b      	ldrh	r3, [r7, #2]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d103      	bne.n	8007bd8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007bd6:	e1c0      	b.n	8007f5a <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	2b04      	cmp	r3, #4
 8007be2:	d003      	beq.n	8007bec <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2205      	movs	r2, #5
 8007be8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	887a      	ldrh	r2, [r7, #2]
 8007bfc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	887a      	ldrh	r2, [r7, #2]
 8007c04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	68ba      	ldr	r2, [r7, #8]
 8007c0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	887a      	ldrh	r2, [r7, #2]
 8007c12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	887a      	ldrh	r2, [r7, #2]
 8007c18:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2200      	movs	r2, #0
 8007c24:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007c2e:	d802      	bhi.n	8007c36 <HAL_SPI_TransmitReceive+0xe6>
 8007c30:	8a3b      	ldrh	r3, [r7, #16]
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d908      	bls.n	8007c48 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	685a      	ldr	r2, [r3, #4]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c44:	605a      	str	r2, [r3, #4]
 8007c46:	e007      	b.n	8007c58 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	685a      	ldr	r2, [r3, #4]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007c56:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c62:	2b40      	cmp	r3, #64	; 0x40
 8007c64:	d007      	beq.n	8007c76 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007c7e:	d97c      	bls.n	8007d7a <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d002      	beq.n	8007c8e <HAL_SPI_TransmitReceive+0x13e>
 8007c88:	8a7b      	ldrh	r3, [r7, #18]
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d169      	bne.n	8007d62 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c92:	881a      	ldrh	r2, [r3, #0]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c9e:	1c9a      	adds	r2, r3, #2
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	3b01      	subs	r3, #1
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cb2:	e056      	b.n	8007d62 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	f003 0302 	and.w	r3, r3, #2
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	d11b      	bne.n	8007cfa <HAL_SPI_TransmitReceive+0x1aa>
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d016      	beq.n	8007cfa <HAL_SPI_TransmitReceive+0x1aa>
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d113      	bne.n	8007cfa <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd6:	881a      	ldrh	r2, [r3, #0]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce2:	1c9a      	adds	r2, r3, #2
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	3b01      	subs	r3, #1
 8007cf0:	b29a      	uxth	r2, r3
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	f003 0301 	and.w	r3, r3, #1
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d11c      	bne.n	8007d42 <HAL_SPI_TransmitReceive+0x1f2>
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d016      	beq.n	8007d42 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	68da      	ldr	r2, [r3, #12]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1e:	b292      	uxth	r2, r2
 8007d20:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d26:	1c9a      	adds	r2, r3, #2
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	3b01      	subs	r3, #1
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007d42:	f7fd fb5d 	bl	8005400 <HAL_GetTick>
 8007d46:	4602      	mov	r2, r0
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	1ad3      	subs	r3, r2, r3
 8007d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d807      	bhi.n	8007d62 <HAL_SPI_TransmitReceive+0x212>
 8007d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d58:	d003      	beq.n	8007d62 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007d60:	e0fb      	b.n	8007f5a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1a3      	bne.n	8007cb4 <HAL_SPI_TransmitReceive+0x164>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d19d      	bne.n	8007cb4 <HAL_SPI_TransmitReceive+0x164>
 8007d78:	e0df      	b.n	8007f3a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d003      	beq.n	8007d8a <HAL_SPI_TransmitReceive+0x23a>
 8007d82:	8a7b      	ldrh	r3, [r7, #18]
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	f040 80cb 	bne.w	8007f20 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d912      	bls.n	8007dba <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d98:	881a      	ldrh	r2, [r3, #0]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da4:	1c9a      	adds	r2, r3, #2
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	3b02      	subs	r3, #2
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007db8:	e0b2      	b.n	8007f20 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	330c      	adds	r3, #12
 8007dc4:	7812      	ldrb	r2, [r2, #0]
 8007dc6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dcc:	1c5a      	adds	r2, r3, #1
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007de0:	e09e      	b.n	8007f20 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	f003 0302 	and.w	r3, r3, #2
 8007dec:	2b02      	cmp	r3, #2
 8007dee:	d134      	bne.n	8007e5a <HAL_SPI_TransmitReceive+0x30a>
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d02f      	beq.n	8007e5a <HAL_SPI_TransmitReceive+0x30a>
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d12c      	bne.n	8007e5a <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d912      	bls.n	8007e30 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e0e:	881a      	ldrh	r2, [r3, #0]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e1a:	1c9a      	adds	r2, r3, #2
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	3b02      	subs	r3, #2
 8007e28:	b29a      	uxth	r2, r3
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007e2e:	e012      	b.n	8007e56 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	330c      	adds	r3, #12
 8007e3a:	7812      	ldrb	r2, [r2, #0]
 8007e3c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e42:	1c5a      	adds	r2, r3, #1
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	3b01      	subs	r3, #1
 8007e50:	b29a      	uxth	r2, r3
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e56:	2300      	movs	r3, #0
 8007e58:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	f003 0301 	and.w	r3, r3, #1
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d148      	bne.n	8007efa <HAL_SPI_TransmitReceive+0x3aa>
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d042      	beq.n	8007efa <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d923      	bls.n	8007ec8 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68da      	ldr	r2, [r3, #12]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8a:	b292      	uxth	r2, r2
 8007e8c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e92:	1c9a      	adds	r2, r3, #2
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	3b02      	subs	r3, #2
 8007ea2:	b29a      	uxth	r2, r3
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d81f      	bhi.n	8007ef6 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	685a      	ldr	r2, [r3, #4]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ec4:	605a      	str	r2, [r3, #4]
 8007ec6:	e016      	b.n	8007ef6 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f103 020c 	add.w	r2, r3, #12
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed4:	7812      	ldrb	r2, [r2, #0]
 8007ed6:	b2d2      	uxtb	r2, r2
 8007ed8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ede:	1c5a      	adds	r2, r3, #1
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	3b01      	subs	r3, #1
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007efa:	f7fd fa81 	bl	8005400 <HAL_GetTick>
 8007efe:	4602      	mov	r2, r0
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d803      	bhi.n	8007f12 <HAL_SPI_TransmitReceive+0x3c2>
 8007f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f10:	d102      	bne.n	8007f18 <HAL_SPI_TransmitReceive+0x3c8>
 8007f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d103      	bne.n	8007f20 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007f1e:	e01c      	b.n	8007f5a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	f47f af5b 	bne.w	8007de2 <HAL_SPI_TransmitReceive+0x292>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f47f af54 	bne.w	8007de2 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f3a:	69fa      	ldr	r2, [r7, #28]
 8007f3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f3e:	68f8      	ldr	r0, [r7, #12]
 8007f40:	f000 f948 	bl	80081d4 <SPI_EndRxTxTransaction>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d006      	beq.n	8007f58 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2220      	movs	r2, #32
 8007f54:	661a      	str	r2, [r3, #96]	; 0x60
 8007f56:	e000      	b.n	8007f5a <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007f58:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007f6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3728      	adds	r7, #40	; 0x28
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b084      	sub	sp, #16
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	60f8      	str	r0, [r7, #12]
 8007f7e:	60b9      	str	r1, [r7, #8]
 8007f80:	603b      	str	r3, [r7, #0]
 8007f82:	4613      	mov	r3, r2
 8007f84:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f86:	e04c      	b.n	8008022 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f8e:	d048      	beq.n	8008022 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007f90:	f7fd fa36 	bl	8005400 <HAL_GetTick>
 8007f94:	4602      	mov	r2, r0
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	1ad3      	subs	r3, r2, r3
 8007f9a:	683a      	ldr	r2, [r7, #0]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d902      	bls.n	8007fa6 <SPI_WaitFlagStateUntilTimeout+0x30>
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d13d      	bne.n	8008022 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	685a      	ldr	r2, [r3, #4]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007fb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fbe:	d111      	bne.n	8007fe4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fc8:	d004      	beq.n	8007fd4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fd2:	d107      	bne.n	8007fe4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fe2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fec:	d10f      	bne.n	800800e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ffc:	601a      	str	r2, [r3, #0]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800800c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2201      	movs	r2, #1
 8008012:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2200      	movs	r2, #0
 800801a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800801e:	2303      	movs	r3, #3
 8008020:	e00f      	b.n	8008042 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	689a      	ldr	r2, [r3, #8]
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	4013      	ands	r3, r2
 800802c:	68ba      	ldr	r2, [r7, #8]
 800802e:	429a      	cmp	r2, r3
 8008030:	bf0c      	ite	eq
 8008032:	2301      	moveq	r3, #1
 8008034:	2300      	movne	r3, #0
 8008036:	b2db      	uxtb	r3, r3
 8008038:	461a      	mov	r2, r3
 800803a:	79fb      	ldrb	r3, [r7, #7]
 800803c:	429a      	cmp	r2, r3
 800803e:	d1a3      	bne.n	8007f88 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b084      	sub	sp, #16
 800804e:	af00      	add	r7, sp, #0
 8008050:	60f8      	str	r0, [r7, #12]
 8008052:	60b9      	str	r1, [r7, #8]
 8008054:	607a      	str	r2, [r7, #4]
 8008056:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8008058:	e057      	b.n	800810a <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008060:	d106      	bne.n	8008070 <SPI_WaitFifoStateUntilTimeout+0x26>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d103      	bne.n	8008070 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	330c      	adds	r3, #12
 800806e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008076:	d048      	beq.n	800810a <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008078:	f7fd f9c2 	bl	8005400 <HAL_GetTick>
 800807c:	4602      	mov	r2, r0
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	1ad3      	subs	r3, r2, r3
 8008082:	683a      	ldr	r2, [r7, #0]
 8008084:	429a      	cmp	r2, r3
 8008086:	d902      	bls.n	800808e <SPI_WaitFifoStateUntilTimeout+0x44>
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d13d      	bne.n	800810a <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	685a      	ldr	r2, [r3, #4]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800809c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080a6:	d111      	bne.n	80080cc <SPI_WaitFifoStateUntilTimeout+0x82>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080b0:	d004      	beq.n	80080bc <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080ba:	d107      	bne.n	80080cc <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080d4:	d10f      	bne.n	80080f6 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080e4:	601a      	str	r2, [r3, #0]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2201      	movs	r2, #1
 80080fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2200      	movs	r2, #0
 8008102:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	e008      	b.n	800811c <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	689a      	ldr	r2, [r3, #8]
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	4013      	ands	r3, r2
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	429a      	cmp	r2, r3
 8008118:	d19f      	bne.n	800805a <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800811a:	2300      	movs	r3, #0
}
 800811c:	4618      	mov	r0, r3
 800811e:	3710      	adds	r7, #16
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b086      	sub	sp, #24
 8008128:	af02      	add	r7, sp, #8
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008138:	d111      	bne.n	800815e <SPI_EndRxTransaction+0x3a>
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008142:	d004      	beq.n	800814e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800814c:	d107      	bne.n	800815e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800815c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	2200      	movs	r2, #0
 8008166:	2180      	movs	r1, #128	; 0x80
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f7ff ff04 	bl	8007f76 <SPI_WaitFlagStateUntilTimeout>
 800816e:	4603      	mov	r3, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d007      	beq.n	8008184 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008178:	f043 0220 	orr.w	r2, r3, #32
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008180:	2303      	movs	r3, #3
 8008182:	e023      	b.n	80081cc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800818c:	d11d      	bne.n	80081ca <SPI_EndRxTransaction+0xa6>
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008196:	d004      	beq.n	80081a2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081a0:	d113      	bne.n	80081ca <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	9300      	str	r3, [sp, #0]
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	f7ff ff4b 	bl	800804a <SPI_WaitFifoStateUntilTimeout>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d007      	beq.n	80081ca <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081be:	f043 0220 	orr.w	r2, r3, #32
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80081c6:	2303      	movs	r3, #3
 80081c8:	e000      	b.n	80081cc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3710      	adds	r7, #16
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b086      	sub	sp, #24
 80081d8:	af02      	add	r7, sp, #8
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	9300      	str	r3, [sp, #0]
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f7ff ff2c 	bl	800804a <SPI_WaitFifoStateUntilTimeout>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d007      	beq.n	8008208 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081fc:	f043 0220 	orr.w	r2, r3, #32
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008204:	2303      	movs	r3, #3
 8008206:	e027      	b.n	8008258 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	9300      	str	r3, [sp, #0]
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	2200      	movs	r2, #0
 8008210:	2180      	movs	r1, #128	; 0x80
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	f7ff feaf 	bl	8007f76 <SPI_WaitFlagStateUntilTimeout>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d007      	beq.n	800822e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008222:	f043 0220 	orr.w	r2, r3, #32
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	e014      	b.n	8008258 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	9300      	str	r3, [sp, #0]
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	2200      	movs	r2, #0
 8008236:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800823a:	68f8      	ldr	r0, [r7, #12]
 800823c:	f7ff ff05 	bl	800804a <SPI_WaitFifoStateUntilTimeout>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d007      	beq.n	8008256 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800824a:	f043 0220 	orr.w	r2, r3, #32
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008252:	2303      	movs	r3, #3
 8008254:	e000      	b.n	8008258 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3710      	adds	r7, #16
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d101      	bne.n	8008272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	e042      	b.n	80082f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008278:	2b00      	cmp	r3, #0
 800827a:	d106      	bne.n	800828a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f7fc fdeb 	bl	8004e60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2224      	movs	r2, #36	; 0x24
 800828e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f022 0201 	bic.w	r2, r2, #1
 80082a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 f8c4 	bl	8008430 <UART_SetConfig>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d101      	bne.n	80082b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e022      	b.n	80082f8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d002      	beq.n	80082c0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f001 fa78 	bl	80097b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	685a      	ldr	r2, [r3, #4]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	689a      	ldr	r2, [r3, #8]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f042 0201 	orr.w	r2, r2, #1
 80082ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f001 faff 	bl	80098f4 <UART_CheckIdleState>
 80082f6:	4603      	mov	r3, r0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3708      	adds	r7, #8
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b08a      	sub	sp, #40	; 0x28
 8008304:	af02      	add	r7, sp, #8
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	603b      	str	r3, [r7, #0]
 800830c:	4613      	mov	r3, r2
 800830e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008316:	2b20      	cmp	r3, #32
 8008318:	f040 8084 	bne.w	8008424 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d002      	beq.n	8008328 <HAL_UART_Transmit+0x28>
 8008322:	88fb      	ldrh	r3, [r7, #6]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d101      	bne.n	800832c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	e07c      	b.n	8008426 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008332:	2b01      	cmp	r3, #1
 8008334:	d101      	bne.n	800833a <HAL_UART_Transmit+0x3a>
 8008336:	2302      	movs	r3, #2
 8008338:	e075      	b.n	8008426 <HAL_UART_Transmit+0x126>
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2201      	movs	r2, #1
 800833e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2200      	movs	r2, #0
 8008346:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2221      	movs	r2, #33	; 0x21
 800834e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008352:	f7fd f855 	bl	8005400 <HAL_GetTick>
 8008356:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	88fa      	ldrh	r2, [r7, #6]
 800835c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	88fa      	ldrh	r2, [r7, #6]
 8008364:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008370:	d108      	bne.n	8008384 <HAL_UART_Transmit+0x84>
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d104      	bne.n	8008384 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800837a:	2300      	movs	r3, #0
 800837c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	61bb      	str	r3, [r7, #24]
 8008382:	e003      	b.n	800838c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008388:	2300      	movs	r3, #0
 800838a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800838c:	e02d      	b.n	80083ea <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	9300      	str	r3, [sp, #0]
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	2200      	movs	r2, #0
 8008396:	2180      	movs	r1, #128	; 0x80
 8008398:	68f8      	ldr	r0, [r7, #12]
 800839a:	f001 faf3 	bl	8009984 <UART_WaitOnFlagUntilTimeout>
 800839e:	4603      	mov	r3, r0
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d001      	beq.n	80083a8 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80083a4:	2303      	movs	r3, #3
 80083a6:	e03e      	b.n	8008426 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d10b      	bne.n	80083c6 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	881a      	ldrh	r2, [r3, #0]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083ba:	b292      	uxth	r2, r2
 80083bc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	3302      	adds	r3, #2
 80083c2:	61bb      	str	r3, [r7, #24]
 80083c4:	e008      	b.n	80083d8 <HAL_UART_Transmit+0xd8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	781a      	ldrb	r2, [r3, #0]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	b292      	uxth	r2, r2
 80083d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	3301      	adds	r3, #1
 80083d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80083de:	b29b      	uxth	r3, r3
 80083e0:	3b01      	subs	r3, #1
 80083e2:	b29a      	uxth	r2, r3
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d1cb      	bne.n	800838e <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	9300      	str	r3, [sp, #0]
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	2200      	movs	r2, #0
 80083fe:	2140      	movs	r1, #64	; 0x40
 8008400:	68f8      	ldr	r0, [r7, #12]
 8008402:	f001 fabf 	bl	8009984 <UART_WaitOnFlagUntilTimeout>
 8008406:	4603      	mov	r3, r0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d001      	beq.n	8008410 <HAL_UART_Transmit+0x110>
    {
      return HAL_TIMEOUT;
 800840c:	2303      	movs	r3, #3
 800840e:	e00a      	b.n	8008426 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2220      	movs	r2, #32
 8008414:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2200      	movs	r2, #0
 800841c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008420:	2300      	movs	r3, #0
 8008422:	e000      	b.n	8008426 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8008424:	2302      	movs	r3, #2
  }
}
 8008426:	4618      	mov	r0, r3
 8008428:	3720      	adds	r7, #32
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
	...

08008430 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008430:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008434:	b088      	sub	sp, #32
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800843a:	2300      	movs	r3, #0
 800843c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 800843e:	2300      	movs	r3, #0
 8008440:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8008442:	2300      	movs	r3, #0
 8008444:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	689a      	ldr	r2, [r3, #8]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	691b      	ldr	r3, [r3, #16]
 800844e:	431a      	orrs	r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	695b      	ldr	r3, [r3, #20]
 8008454:	431a      	orrs	r2, r3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	69db      	ldr	r3, [r3, #28]
 800845a:	4313      	orrs	r3, r2
 800845c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008462:	69fa      	ldr	r2, [r7, #28]
 8008464:	4313      	orrs	r3, r2
 8008466:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	4bac      	ldr	r3, [pc, #688]	; (8008720 <UART_SetConfig+0x2f0>)
 8008470:	4013      	ands	r3, r2
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	6812      	ldr	r2, [r2, #0]
 8008476:	69f9      	ldr	r1, [r7, #28]
 8008478:	430b      	orrs	r3, r1
 800847a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	68da      	ldr	r2, [r3, #12]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	430a      	orrs	r2, r1
 8008490:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	699b      	ldr	r3, [r3, #24]
 8008496:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4aa1      	ldr	r2, [pc, #644]	; (8008724 <UART_SetConfig+0x2f4>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d004      	beq.n	80084ac <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a1b      	ldr	r3, [r3, #32]
 80084a6:	69fa      	ldr	r2, [r7, #28]
 80084a8:	4313      	orrs	r3, r2
 80084aa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80084b6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	6812      	ldr	r2, [r2, #0]
 80084be:	69f9      	ldr	r1, [r7, #28]
 80084c0:	430b      	orrs	r3, r1
 80084c2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ca:	f023 010f 	bic.w	r1, r3, #15
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	430a      	orrs	r2, r1
 80084d8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a92      	ldr	r2, [pc, #584]	; (8008728 <UART_SetConfig+0x2f8>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d121      	bne.n	8008528 <UART_SetConfig+0xf8>
 80084e4:	4b91      	ldr	r3, [pc, #580]	; (800872c <UART_SetConfig+0x2fc>)
 80084e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084ea:	f003 0303 	and.w	r3, r3, #3
 80084ee:	2b03      	cmp	r3, #3
 80084f0:	d816      	bhi.n	8008520 <UART_SetConfig+0xf0>
 80084f2:	a201      	add	r2, pc, #4	; (adr r2, 80084f8 <UART_SetConfig+0xc8>)
 80084f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f8:	08008509 	.word	0x08008509
 80084fc:	08008515 	.word	0x08008515
 8008500:	0800850f 	.word	0x0800850f
 8008504:	0800851b 	.word	0x0800851b
 8008508:	2301      	movs	r3, #1
 800850a:	76fb      	strb	r3, [r7, #27]
 800850c:	e0e8      	b.n	80086e0 <UART_SetConfig+0x2b0>
 800850e:	2302      	movs	r3, #2
 8008510:	76fb      	strb	r3, [r7, #27]
 8008512:	e0e5      	b.n	80086e0 <UART_SetConfig+0x2b0>
 8008514:	2304      	movs	r3, #4
 8008516:	76fb      	strb	r3, [r7, #27]
 8008518:	e0e2      	b.n	80086e0 <UART_SetConfig+0x2b0>
 800851a:	2308      	movs	r3, #8
 800851c:	76fb      	strb	r3, [r7, #27]
 800851e:	e0df      	b.n	80086e0 <UART_SetConfig+0x2b0>
 8008520:	2310      	movs	r3, #16
 8008522:	76fb      	strb	r3, [r7, #27]
 8008524:	bf00      	nop
 8008526:	e0db      	b.n	80086e0 <UART_SetConfig+0x2b0>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a80      	ldr	r2, [pc, #512]	; (8008730 <UART_SetConfig+0x300>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d134      	bne.n	800859c <UART_SetConfig+0x16c>
 8008532:	4b7e      	ldr	r3, [pc, #504]	; (800872c <UART_SetConfig+0x2fc>)
 8008534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008538:	f003 030c 	and.w	r3, r3, #12
 800853c:	2b0c      	cmp	r3, #12
 800853e:	d829      	bhi.n	8008594 <UART_SetConfig+0x164>
 8008540:	a201      	add	r2, pc, #4	; (adr r2, 8008548 <UART_SetConfig+0x118>)
 8008542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008546:	bf00      	nop
 8008548:	0800857d 	.word	0x0800857d
 800854c:	08008595 	.word	0x08008595
 8008550:	08008595 	.word	0x08008595
 8008554:	08008595 	.word	0x08008595
 8008558:	08008589 	.word	0x08008589
 800855c:	08008595 	.word	0x08008595
 8008560:	08008595 	.word	0x08008595
 8008564:	08008595 	.word	0x08008595
 8008568:	08008583 	.word	0x08008583
 800856c:	08008595 	.word	0x08008595
 8008570:	08008595 	.word	0x08008595
 8008574:	08008595 	.word	0x08008595
 8008578:	0800858f 	.word	0x0800858f
 800857c:	2300      	movs	r3, #0
 800857e:	76fb      	strb	r3, [r7, #27]
 8008580:	e0ae      	b.n	80086e0 <UART_SetConfig+0x2b0>
 8008582:	2302      	movs	r3, #2
 8008584:	76fb      	strb	r3, [r7, #27]
 8008586:	e0ab      	b.n	80086e0 <UART_SetConfig+0x2b0>
 8008588:	2304      	movs	r3, #4
 800858a:	76fb      	strb	r3, [r7, #27]
 800858c:	e0a8      	b.n	80086e0 <UART_SetConfig+0x2b0>
 800858e:	2308      	movs	r3, #8
 8008590:	76fb      	strb	r3, [r7, #27]
 8008592:	e0a5      	b.n	80086e0 <UART_SetConfig+0x2b0>
 8008594:	2310      	movs	r3, #16
 8008596:	76fb      	strb	r3, [r7, #27]
 8008598:	bf00      	nop
 800859a:	e0a1      	b.n	80086e0 <UART_SetConfig+0x2b0>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a64      	ldr	r2, [pc, #400]	; (8008734 <UART_SetConfig+0x304>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d120      	bne.n	80085e8 <UART_SetConfig+0x1b8>
 80085a6:	4b61      	ldr	r3, [pc, #388]	; (800872c <UART_SetConfig+0x2fc>)
 80085a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80085b0:	2b10      	cmp	r3, #16
 80085b2:	d00f      	beq.n	80085d4 <UART_SetConfig+0x1a4>
 80085b4:	2b10      	cmp	r3, #16
 80085b6:	d802      	bhi.n	80085be <UART_SetConfig+0x18e>
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d005      	beq.n	80085c8 <UART_SetConfig+0x198>
 80085bc:	e010      	b.n	80085e0 <UART_SetConfig+0x1b0>
 80085be:	2b20      	cmp	r3, #32
 80085c0:	d005      	beq.n	80085ce <UART_SetConfig+0x19e>
 80085c2:	2b30      	cmp	r3, #48	; 0x30
 80085c4:	d009      	beq.n	80085da <UART_SetConfig+0x1aa>
 80085c6:	e00b      	b.n	80085e0 <UART_SetConfig+0x1b0>
 80085c8:	2300      	movs	r3, #0
 80085ca:	76fb      	strb	r3, [r7, #27]
 80085cc:	e088      	b.n	80086e0 <UART_SetConfig+0x2b0>
 80085ce:	2302      	movs	r3, #2
 80085d0:	76fb      	strb	r3, [r7, #27]
 80085d2:	e085      	b.n	80086e0 <UART_SetConfig+0x2b0>
 80085d4:	2304      	movs	r3, #4
 80085d6:	76fb      	strb	r3, [r7, #27]
 80085d8:	e082      	b.n	80086e0 <UART_SetConfig+0x2b0>
 80085da:	2308      	movs	r3, #8
 80085dc:	76fb      	strb	r3, [r7, #27]
 80085de:	e07f      	b.n	80086e0 <UART_SetConfig+0x2b0>
 80085e0:	2310      	movs	r3, #16
 80085e2:	76fb      	strb	r3, [r7, #27]
 80085e4:	bf00      	nop
 80085e6:	e07b      	b.n	80086e0 <UART_SetConfig+0x2b0>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a52      	ldr	r2, [pc, #328]	; (8008738 <UART_SetConfig+0x308>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d120      	bne.n	8008634 <UART_SetConfig+0x204>
 80085f2:	4b4e      	ldr	r3, [pc, #312]	; (800872c <UART_SetConfig+0x2fc>)
 80085f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80085fc:	2b40      	cmp	r3, #64	; 0x40
 80085fe:	d00f      	beq.n	8008620 <UART_SetConfig+0x1f0>
 8008600:	2b40      	cmp	r3, #64	; 0x40
 8008602:	d802      	bhi.n	800860a <UART_SetConfig+0x1da>
 8008604:	2b00      	cmp	r3, #0
 8008606:	d005      	beq.n	8008614 <UART_SetConfig+0x1e4>
 8008608:	e010      	b.n	800862c <UART_SetConfig+0x1fc>
 800860a:	2b80      	cmp	r3, #128	; 0x80
 800860c:	d005      	beq.n	800861a <UART_SetConfig+0x1ea>
 800860e:	2bc0      	cmp	r3, #192	; 0xc0
 8008610:	d009      	beq.n	8008626 <UART_SetConfig+0x1f6>
 8008612:	e00b      	b.n	800862c <UART_SetConfig+0x1fc>
 8008614:	2300      	movs	r3, #0
 8008616:	76fb      	strb	r3, [r7, #27]
 8008618:	e062      	b.n	80086e0 <UART_SetConfig+0x2b0>
 800861a:	2302      	movs	r3, #2
 800861c:	76fb      	strb	r3, [r7, #27]
 800861e:	e05f      	b.n	80086e0 <UART_SetConfig+0x2b0>
 8008620:	2304      	movs	r3, #4
 8008622:	76fb      	strb	r3, [r7, #27]
 8008624:	e05c      	b.n	80086e0 <UART_SetConfig+0x2b0>
 8008626:	2308      	movs	r3, #8
 8008628:	76fb      	strb	r3, [r7, #27]
 800862a:	e059      	b.n	80086e0 <UART_SetConfig+0x2b0>
 800862c:	2310      	movs	r3, #16
 800862e:	76fb      	strb	r3, [r7, #27]
 8008630:	bf00      	nop
 8008632:	e055      	b.n	80086e0 <UART_SetConfig+0x2b0>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a40      	ldr	r2, [pc, #256]	; (800873c <UART_SetConfig+0x30c>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d124      	bne.n	8008688 <UART_SetConfig+0x258>
 800863e:	4b3b      	ldr	r3, [pc, #236]	; (800872c <UART_SetConfig+0x2fc>)
 8008640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008644:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800864c:	d012      	beq.n	8008674 <UART_SetConfig+0x244>
 800864e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008652:	d802      	bhi.n	800865a <UART_SetConfig+0x22a>
 8008654:	2b00      	cmp	r3, #0
 8008656:	d007      	beq.n	8008668 <UART_SetConfig+0x238>
 8008658:	e012      	b.n	8008680 <UART_SetConfig+0x250>
 800865a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800865e:	d006      	beq.n	800866e <UART_SetConfig+0x23e>
 8008660:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008664:	d009      	beq.n	800867a <UART_SetConfig+0x24a>
 8008666:	e00b      	b.n	8008680 <UART_SetConfig+0x250>
 8008668:	2300      	movs	r3, #0
 800866a:	76fb      	strb	r3, [r7, #27]
 800866c:	e038      	b.n	80086e0 <UART_SetConfig+0x2b0>
 800866e:	2302      	movs	r3, #2
 8008670:	76fb      	strb	r3, [r7, #27]
 8008672:	e035      	b.n	80086e0 <UART_SetConfig+0x2b0>
 8008674:	2304      	movs	r3, #4
 8008676:	76fb      	strb	r3, [r7, #27]
 8008678:	e032      	b.n	80086e0 <UART_SetConfig+0x2b0>
 800867a:	2308      	movs	r3, #8
 800867c:	76fb      	strb	r3, [r7, #27]
 800867e:	e02f      	b.n	80086e0 <UART_SetConfig+0x2b0>
 8008680:	2310      	movs	r3, #16
 8008682:	76fb      	strb	r3, [r7, #27]
 8008684:	bf00      	nop
 8008686:	e02b      	b.n	80086e0 <UART_SetConfig+0x2b0>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a25      	ldr	r2, [pc, #148]	; (8008724 <UART_SetConfig+0x2f4>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d124      	bne.n	80086dc <UART_SetConfig+0x2ac>
 8008692:	4b26      	ldr	r3, [pc, #152]	; (800872c <UART_SetConfig+0x2fc>)
 8008694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008698:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800869c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086a0:	d012      	beq.n	80086c8 <UART_SetConfig+0x298>
 80086a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086a6:	d802      	bhi.n	80086ae <UART_SetConfig+0x27e>
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d007      	beq.n	80086bc <UART_SetConfig+0x28c>
 80086ac:	e012      	b.n	80086d4 <UART_SetConfig+0x2a4>
 80086ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086b2:	d006      	beq.n	80086c2 <UART_SetConfig+0x292>
 80086b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80086b8:	d009      	beq.n	80086ce <UART_SetConfig+0x29e>
 80086ba:	e00b      	b.n	80086d4 <UART_SetConfig+0x2a4>
 80086bc:	2300      	movs	r3, #0
 80086be:	76fb      	strb	r3, [r7, #27]
 80086c0:	e00e      	b.n	80086e0 <UART_SetConfig+0x2b0>
 80086c2:	2302      	movs	r3, #2
 80086c4:	76fb      	strb	r3, [r7, #27]
 80086c6:	e00b      	b.n	80086e0 <UART_SetConfig+0x2b0>
 80086c8:	2304      	movs	r3, #4
 80086ca:	76fb      	strb	r3, [r7, #27]
 80086cc:	e008      	b.n	80086e0 <UART_SetConfig+0x2b0>
 80086ce:	2308      	movs	r3, #8
 80086d0:	76fb      	strb	r3, [r7, #27]
 80086d2:	e005      	b.n	80086e0 <UART_SetConfig+0x2b0>
 80086d4:	2310      	movs	r3, #16
 80086d6:	76fb      	strb	r3, [r7, #27]
 80086d8:	bf00      	nop
 80086da:	e001      	b.n	80086e0 <UART_SetConfig+0x2b0>
 80086dc:	2310      	movs	r3, #16
 80086de:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a0f      	ldr	r2, [pc, #60]	; (8008724 <UART_SetConfig+0x2f4>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	f040 842d 	bne.w	8008f46 <UART_SetConfig+0xb16>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80086ec:	7efb      	ldrb	r3, [r7, #27]
 80086ee:	2b08      	cmp	r3, #8
 80086f0:	f200 816b 	bhi.w	80089ca <UART_SetConfig+0x59a>
 80086f4:	a201      	add	r2, pc, #4	; (adr r2, 80086fc <UART_SetConfig+0x2cc>)
 80086f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086fa:	bf00      	nop
 80086fc:	08008741 	.word	0x08008741
 8008700:	080089cb 	.word	0x080089cb
 8008704:	080087e3 	.word	0x080087e3
 8008708:	080089cb 	.word	0x080089cb
 800870c:	0800887b 	.word	0x0800887b
 8008710:	080089cb 	.word	0x080089cb
 8008714:	080089cb 	.word	0x080089cb
 8008718:	080089cb 	.word	0x080089cb
 800871c:	0800891d 	.word	0x0800891d
 8008720:	cfff69f3 	.word	0xcfff69f3
 8008724:	40008000 	.word	0x40008000
 8008728:	40013800 	.word	0x40013800
 800872c:	40021000 	.word	0x40021000
 8008730:	40004400 	.word	0x40004400
 8008734:	40004800 	.word	0x40004800
 8008738:	40004c00 	.word	0x40004c00
 800873c:	40005000 	.word	0x40005000
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008740:	f7fe f8f8 	bl	8006934 <HAL_RCC_GetPCLK1Freq>
 8008744:	4602      	mov	r2, r0
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874a:	2b00      	cmp	r3, #0
 800874c:	d044      	beq.n	80087d8 <UART_SetConfig+0x3a8>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008752:	2b01      	cmp	r3, #1
 8008754:	d03e      	beq.n	80087d4 <UART_SetConfig+0x3a4>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875a:	2b02      	cmp	r3, #2
 800875c:	d038      	beq.n	80087d0 <UART_SetConfig+0x3a0>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008762:	2b03      	cmp	r3, #3
 8008764:	d032      	beq.n	80087cc <UART_SetConfig+0x39c>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876a:	2b04      	cmp	r3, #4
 800876c:	d02c      	beq.n	80087c8 <UART_SetConfig+0x398>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008772:	2b05      	cmp	r3, #5
 8008774:	d026      	beq.n	80087c4 <UART_SetConfig+0x394>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877a:	2b06      	cmp	r3, #6
 800877c:	d020      	beq.n	80087c0 <UART_SetConfig+0x390>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008782:	2b07      	cmp	r3, #7
 8008784:	d01a      	beq.n	80087bc <UART_SetConfig+0x38c>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878a:	2b08      	cmp	r3, #8
 800878c:	d014      	beq.n	80087b8 <UART_SetConfig+0x388>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008792:	2b09      	cmp	r3, #9
 8008794:	d00e      	beq.n	80087b4 <UART_SetConfig+0x384>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879a:	2b0a      	cmp	r3, #10
 800879c:	d008      	beq.n	80087b0 <UART_SetConfig+0x380>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a2:	2b0b      	cmp	r3, #11
 80087a4:	d102      	bne.n	80087ac <UART_SetConfig+0x37c>
 80087a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087aa:	e016      	b.n	80087da <UART_SetConfig+0x3aa>
 80087ac:	2301      	movs	r3, #1
 80087ae:	e014      	b.n	80087da <UART_SetConfig+0x3aa>
 80087b0:	2380      	movs	r3, #128	; 0x80
 80087b2:	e012      	b.n	80087da <UART_SetConfig+0x3aa>
 80087b4:	2340      	movs	r3, #64	; 0x40
 80087b6:	e010      	b.n	80087da <UART_SetConfig+0x3aa>
 80087b8:	2320      	movs	r3, #32
 80087ba:	e00e      	b.n	80087da <UART_SetConfig+0x3aa>
 80087bc:	2310      	movs	r3, #16
 80087be:	e00c      	b.n	80087da <UART_SetConfig+0x3aa>
 80087c0:	230c      	movs	r3, #12
 80087c2:	e00a      	b.n	80087da <UART_SetConfig+0x3aa>
 80087c4:	230a      	movs	r3, #10
 80087c6:	e008      	b.n	80087da <UART_SetConfig+0x3aa>
 80087c8:	2308      	movs	r3, #8
 80087ca:	e006      	b.n	80087da <UART_SetConfig+0x3aa>
 80087cc:	2306      	movs	r3, #6
 80087ce:	e004      	b.n	80087da <UART_SetConfig+0x3aa>
 80087d0:	2304      	movs	r3, #4
 80087d2:	e002      	b.n	80087da <UART_SetConfig+0x3aa>
 80087d4:	2302      	movs	r3, #2
 80087d6:	e000      	b.n	80087da <UART_SetConfig+0x3aa>
 80087d8:	2301      	movs	r3, #1
 80087da:	fbb2 f3f3 	udiv	r3, r2, r3
 80087de:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
#endif /* USART_PRESC_PRESCALER */
        break;
 80087e0:	e0f6      	b.n	80089d0 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d044      	beq.n	8008874 <UART_SetConfig+0x444>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d03e      	beq.n	8008870 <UART_SetConfig+0x440>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f6:	2b02      	cmp	r3, #2
 80087f8:	d038      	beq.n	800886c <UART_SetConfig+0x43c>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fe:	2b03      	cmp	r3, #3
 8008800:	d032      	beq.n	8008868 <UART_SetConfig+0x438>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008806:	2b04      	cmp	r3, #4
 8008808:	d02c      	beq.n	8008864 <UART_SetConfig+0x434>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880e:	2b05      	cmp	r3, #5
 8008810:	d026      	beq.n	8008860 <UART_SetConfig+0x430>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008816:	2b06      	cmp	r3, #6
 8008818:	d020      	beq.n	800885c <UART_SetConfig+0x42c>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800881e:	2b07      	cmp	r3, #7
 8008820:	d01a      	beq.n	8008858 <UART_SetConfig+0x428>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008826:	2b08      	cmp	r3, #8
 8008828:	d014      	beq.n	8008854 <UART_SetConfig+0x424>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882e:	2b09      	cmp	r3, #9
 8008830:	d00e      	beq.n	8008850 <UART_SetConfig+0x420>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008836:	2b0a      	cmp	r3, #10
 8008838:	d008      	beq.n	800884c <UART_SetConfig+0x41c>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883e:	2b0b      	cmp	r3, #11
 8008840:	d102      	bne.n	8008848 <UART_SetConfig+0x418>
 8008842:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008846:	e016      	b.n	8008876 <UART_SetConfig+0x446>
 8008848:	4ba1      	ldr	r3, [pc, #644]	; (8008ad0 <UART_SetConfig+0x6a0>)
 800884a:	e014      	b.n	8008876 <UART_SetConfig+0x446>
 800884c:	4ba1      	ldr	r3, [pc, #644]	; (8008ad4 <UART_SetConfig+0x6a4>)
 800884e:	e012      	b.n	8008876 <UART_SetConfig+0x446>
 8008850:	4ba1      	ldr	r3, [pc, #644]	; (8008ad8 <UART_SetConfig+0x6a8>)
 8008852:	e010      	b.n	8008876 <UART_SetConfig+0x446>
 8008854:	4ba1      	ldr	r3, [pc, #644]	; (8008adc <UART_SetConfig+0x6ac>)
 8008856:	e00e      	b.n	8008876 <UART_SetConfig+0x446>
 8008858:	4ba1      	ldr	r3, [pc, #644]	; (8008ae0 <UART_SetConfig+0x6b0>)
 800885a:	e00c      	b.n	8008876 <UART_SetConfig+0x446>
 800885c:	4ba1      	ldr	r3, [pc, #644]	; (8008ae4 <UART_SetConfig+0x6b4>)
 800885e:	e00a      	b.n	8008876 <UART_SetConfig+0x446>
 8008860:	4ba1      	ldr	r3, [pc, #644]	; (8008ae8 <UART_SetConfig+0x6b8>)
 8008862:	e008      	b.n	8008876 <UART_SetConfig+0x446>
 8008864:	4ba1      	ldr	r3, [pc, #644]	; (8008aec <UART_SetConfig+0x6bc>)
 8008866:	e006      	b.n	8008876 <UART_SetConfig+0x446>
 8008868:	4ba1      	ldr	r3, [pc, #644]	; (8008af0 <UART_SetConfig+0x6c0>)
 800886a:	e004      	b.n	8008876 <UART_SetConfig+0x446>
 800886c:	4ba1      	ldr	r3, [pc, #644]	; (8008af4 <UART_SetConfig+0x6c4>)
 800886e:	e002      	b.n	8008876 <UART_SetConfig+0x446>
 8008870:	4ba1      	ldr	r3, [pc, #644]	; (8008af8 <UART_SetConfig+0x6c8>)
 8008872:	e000      	b.n	8008876 <UART_SetConfig+0x446>
 8008874:	4b96      	ldr	r3, [pc, #600]	; (8008ad0 <UART_SetConfig+0x6a0>)
 8008876:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 8008878:	e0aa      	b.n	80089d0 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800887a:	f7fd ffc5 	bl	8006808 <HAL_RCC_GetSysClockFreq>
 800887e:	4602      	mov	r2, r0
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008884:	2b00      	cmp	r3, #0
 8008886:	d044      	beq.n	8008912 <UART_SetConfig+0x4e2>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888c:	2b01      	cmp	r3, #1
 800888e:	d03e      	beq.n	800890e <UART_SetConfig+0x4de>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008894:	2b02      	cmp	r3, #2
 8008896:	d038      	beq.n	800890a <UART_SetConfig+0x4da>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889c:	2b03      	cmp	r3, #3
 800889e:	d032      	beq.n	8008906 <UART_SetConfig+0x4d6>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a4:	2b04      	cmp	r3, #4
 80088a6:	d02c      	beq.n	8008902 <UART_SetConfig+0x4d2>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ac:	2b05      	cmp	r3, #5
 80088ae:	d026      	beq.n	80088fe <UART_SetConfig+0x4ce>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b4:	2b06      	cmp	r3, #6
 80088b6:	d020      	beq.n	80088fa <UART_SetConfig+0x4ca>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088bc:	2b07      	cmp	r3, #7
 80088be:	d01a      	beq.n	80088f6 <UART_SetConfig+0x4c6>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c4:	2b08      	cmp	r3, #8
 80088c6:	d014      	beq.n	80088f2 <UART_SetConfig+0x4c2>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088cc:	2b09      	cmp	r3, #9
 80088ce:	d00e      	beq.n	80088ee <UART_SetConfig+0x4be>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d4:	2b0a      	cmp	r3, #10
 80088d6:	d008      	beq.n	80088ea <UART_SetConfig+0x4ba>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088dc:	2b0b      	cmp	r3, #11
 80088de:	d102      	bne.n	80088e6 <UART_SetConfig+0x4b6>
 80088e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088e4:	e016      	b.n	8008914 <UART_SetConfig+0x4e4>
 80088e6:	2301      	movs	r3, #1
 80088e8:	e014      	b.n	8008914 <UART_SetConfig+0x4e4>
 80088ea:	2380      	movs	r3, #128	; 0x80
 80088ec:	e012      	b.n	8008914 <UART_SetConfig+0x4e4>
 80088ee:	2340      	movs	r3, #64	; 0x40
 80088f0:	e010      	b.n	8008914 <UART_SetConfig+0x4e4>
 80088f2:	2320      	movs	r3, #32
 80088f4:	e00e      	b.n	8008914 <UART_SetConfig+0x4e4>
 80088f6:	2310      	movs	r3, #16
 80088f8:	e00c      	b.n	8008914 <UART_SetConfig+0x4e4>
 80088fa:	230c      	movs	r3, #12
 80088fc:	e00a      	b.n	8008914 <UART_SetConfig+0x4e4>
 80088fe:	230a      	movs	r3, #10
 8008900:	e008      	b.n	8008914 <UART_SetConfig+0x4e4>
 8008902:	2308      	movs	r3, #8
 8008904:	e006      	b.n	8008914 <UART_SetConfig+0x4e4>
 8008906:	2306      	movs	r3, #6
 8008908:	e004      	b.n	8008914 <UART_SetConfig+0x4e4>
 800890a:	2304      	movs	r3, #4
 800890c:	e002      	b.n	8008914 <UART_SetConfig+0x4e4>
 800890e:	2302      	movs	r3, #2
 8008910:	e000      	b.n	8008914 <UART_SetConfig+0x4e4>
 8008912:	2301      	movs	r3, #1
 8008914:	fbb2 f3f3 	udiv	r3, r2, r3
 8008918:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
#endif /* USART_PRESC_PRESCALER */
        break;
 800891a:	e059      	b.n	80089d0 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008920:	2b00      	cmp	r3, #0
 8008922:	d04e      	beq.n	80089c2 <UART_SetConfig+0x592>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008928:	2b01      	cmp	r3, #1
 800892a:	d047      	beq.n	80089bc <UART_SetConfig+0x58c>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008930:	2b02      	cmp	r3, #2
 8008932:	d040      	beq.n	80089b6 <UART_SetConfig+0x586>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008938:	2b03      	cmp	r3, #3
 800893a:	d039      	beq.n	80089b0 <UART_SetConfig+0x580>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008940:	2b04      	cmp	r3, #4
 8008942:	d032      	beq.n	80089aa <UART_SetConfig+0x57a>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008948:	2b05      	cmp	r3, #5
 800894a:	d02b      	beq.n	80089a4 <UART_SetConfig+0x574>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008950:	2b06      	cmp	r3, #6
 8008952:	d024      	beq.n	800899e <UART_SetConfig+0x56e>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008958:	2b07      	cmp	r3, #7
 800895a:	d01d      	beq.n	8008998 <UART_SetConfig+0x568>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008960:	2b08      	cmp	r3, #8
 8008962:	d016      	beq.n	8008992 <UART_SetConfig+0x562>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008968:	2b09      	cmp	r3, #9
 800896a:	d00f      	beq.n	800898c <UART_SetConfig+0x55c>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008970:	2b0a      	cmp	r3, #10
 8008972:	d008      	beq.n	8008986 <UART_SetConfig+0x556>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008978:	2b0b      	cmp	r3, #11
 800897a:	d101      	bne.n	8008980 <UART_SetConfig+0x550>
 800897c:	2380      	movs	r3, #128	; 0x80
 800897e:	e022      	b.n	80089c6 <UART_SetConfig+0x596>
 8008980:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008984:	e01f      	b.n	80089c6 <UART_SetConfig+0x596>
 8008986:	f44f 7380 	mov.w	r3, #256	; 0x100
 800898a:	e01c      	b.n	80089c6 <UART_SetConfig+0x596>
 800898c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008990:	e019      	b.n	80089c6 <UART_SetConfig+0x596>
 8008992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008996:	e016      	b.n	80089c6 <UART_SetConfig+0x596>
 8008998:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800899c:	e013      	b.n	80089c6 <UART_SetConfig+0x596>
 800899e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80089a2:	e010      	b.n	80089c6 <UART_SetConfig+0x596>
 80089a4:	f640 43cc 	movw	r3, #3276	; 0xccc
 80089a8:	e00d      	b.n	80089c6 <UART_SetConfig+0x596>
 80089aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089ae:	e00a      	b.n	80089c6 <UART_SetConfig+0x596>
 80089b0:	f241 5355 	movw	r3, #5461	; 0x1555
 80089b4:	e007      	b.n	80089c6 <UART_SetConfig+0x596>
 80089b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80089ba:	e004      	b.n	80089c6 <UART_SetConfig+0x596>
 80089bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80089c0:	e001      	b.n	80089c6 <UART_SetConfig+0x596>
 80089c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089c6:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 80089c8:	e002      	b.n	80089d0 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80089ca:	2301      	movs	r3, #1
 80089cc:	74fb      	strb	r3, [r7, #19]
        break;
 80089ce:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	f000 86c2 	beq.w	800975c <UART_SetConfig+0x132c>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685a      	ldr	r2, [r3, #4]
 80089dc:	4613      	mov	r3, r2
 80089de:	005b      	lsls	r3, r3, #1
 80089e0:	4413      	add	r3, r2
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d305      	bcc.n	80089f4 <UART_SetConfig+0x5c4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d903      	bls.n	80089fc <UART_SetConfig+0x5cc>
      {
        ret = HAL_ERROR;
 80089f4:	2301      	movs	r3, #1
 80089f6:	74fb      	strb	r3, [r7, #19]
 80089f8:	f000 beb0 	b.w	800975c <UART_SetConfig+0x132c>
      }
      else
      {
        switch (clocksource)
 80089fc:	7efb      	ldrb	r3, [r7, #27]
 80089fe:	2b08      	cmp	r3, #8
 8008a00:	f200 828c 	bhi.w	8008f1c <UART_SetConfig+0xaec>
 8008a04:	a201      	add	r2, pc, #4	; (adr r2, 8008a0c <UART_SetConfig+0x5dc>)
 8008a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a0a:	bf00      	nop
 8008a0c:	08008a31 	.word	0x08008a31
 8008a10:	08008f1d 	.word	0x08008f1d
 8008a14:	08008b9b 	.word	0x08008b9b
 8008a18:	08008f1d 	.word	0x08008f1d
 8008a1c:	08008c91 	.word	0x08008c91
 8008a20:	08008f1d 	.word	0x08008f1d
 8008a24:	08008f1d 	.word	0x08008f1d
 8008a28:	08008f1d 	.word	0x08008f1d
 8008a2c:	08008dcd 	.word	0x08008dcd
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a30:	f7fd ff80 	bl	8006934 <HAL_RCC_GetPCLK1Freq>
 8008a34:	4603      	mov	r3, r0
 8008a36:	4618      	mov	r0, r3
 8008a38:	f04f 0100 	mov.w	r1, #0
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d07e      	beq.n	8008b42 <UART_SetConfig+0x712>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d075      	beq.n	8008b38 <UART_SetConfig+0x708>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a50:	2b02      	cmp	r3, #2
 8008a52:	d06c      	beq.n	8008b2e <UART_SetConfig+0x6fe>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a58:	2b03      	cmp	r3, #3
 8008a5a:	d063      	beq.n	8008b24 <UART_SetConfig+0x6f4>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a60:	2b04      	cmp	r3, #4
 8008a62:	d05a      	beq.n	8008b1a <UART_SetConfig+0x6ea>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a68:	2b05      	cmp	r3, #5
 8008a6a:	d051      	beq.n	8008b10 <UART_SetConfig+0x6e0>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a70:	2b06      	cmp	r3, #6
 8008a72:	d048      	beq.n	8008b06 <UART_SetConfig+0x6d6>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a78:	2b07      	cmp	r3, #7
 8008a7a:	d03f      	beq.n	8008afc <UART_SetConfig+0x6cc>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a80:	2b08      	cmp	r3, #8
 8008a82:	d01f      	beq.n	8008ac4 <UART_SetConfig+0x694>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a88:	2b09      	cmp	r3, #9
 8008a8a:	d016      	beq.n	8008aba <UART_SetConfig+0x68a>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a90:	2b0a      	cmp	r3, #10
 8008a92:	d00d      	beq.n	8008ab0 <UART_SetConfig+0x680>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a98:	2b0b      	cmp	r3, #11
 8008a9a:	d104      	bne.n	8008aa6 <UART_SetConfig+0x676>
 8008a9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008aa0:	f04f 0400 	mov.w	r4, #0
 8008aa4:	e051      	b.n	8008b4a <UART_SetConfig+0x71a>
 8008aa6:	f04f 0301 	mov.w	r3, #1
 8008aaa:	f04f 0400 	mov.w	r4, #0
 8008aae:	e04c      	b.n	8008b4a <UART_SetConfig+0x71a>
 8008ab0:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008ab4:	f04f 0400 	mov.w	r4, #0
 8008ab8:	e047      	b.n	8008b4a <UART_SetConfig+0x71a>
 8008aba:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008abe:	f04f 0400 	mov.w	r4, #0
 8008ac2:	e042      	b.n	8008b4a <UART_SetConfig+0x71a>
 8008ac4:	f04f 0320 	mov.w	r3, #32
 8008ac8:	f04f 0400 	mov.w	r4, #0
 8008acc:	e03d      	b.n	8008b4a <UART_SetConfig+0x71a>
 8008ace:	bf00      	nop
 8008ad0:	00f42400 	.word	0x00f42400
 8008ad4:	0001e848 	.word	0x0001e848
 8008ad8:	0003d090 	.word	0x0003d090
 8008adc:	0007a120 	.word	0x0007a120
 8008ae0:	000f4240 	.word	0x000f4240
 8008ae4:	00145855 	.word	0x00145855
 8008ae8:	00186a00 	.word	0x00186a00
 8008aec:	001e8480 	.word	0x001e8480
 8008af0:	0028b0aa 	.word	0x0028b0aa
 8008af4:	003d0900 	.word	0x003d0900
 8008af8:	007a1200 	.word	0x007a1200
 8008afc:	f04f 0310 	mov.w	r3, #16
 8008b00:	f04f 0400 	mov.w	r4, #0
 8008b04:	e021      	b.n	8008b4a <UART_SetConfig+0x71a>
 8008b06:	f04f 030c 	mov.w	r3, #12
 8008b0a:	f04f 0400 	mov.w	r4, #0
 8008b0e:	e01c      	b.n	8008b4a <UART_SetConfig+0x71a>
 8008b10:	f04f 030a 	mov.w	r3, #10
 8008b14:	f04f 0400 	mov.w	r4, #0
 8008b18:	e017      	b.n	8008b4a <UART_SetConfig+0x71a>
 8008b1a:	f04f 0308 	mov.w	r3, #8
 8008b1e:	f04f 0400 	mov.w	r4, #0
 8008b22:	e012      	b.n	8008b4a <UART_SetConfig+0x71a>
 8008b24:	f04f 0306 	mov.w	r3, #6
 8008b28:	f04f 0400 	mov.w	r4, #0
 8008b2c:	e00d      	b.n	8008b4a <UART_SetConfig+0x71a>
 8008b2e:	f04f 0304 	mov.w	r3, #4
 8008b32:	f04f 0400 	mov.w	r4, #0
 8008b36:	e008      	b.n	8008b4a <UART_SetConfig+0x71a>
 8008b38:	f04f 0302 	mov.w	r3, #2
 8008b3c:	f04f 0400 	mov.w	r4, #0
 8008b40:	e003      	b.n	8008b4a <UART_SetConfig+0x71a>
 8008b42:	f04f 0301 	mov.w	r3, #1
 8008b46:	f04f 0400 	mov.w	r4, #0
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	4623      	mov	r3, r4
 8008b4e:	f7f7 fba7 	bl	80002a0 <__aeabi_uldivmod>
 8008b52:	4603      	mov	r3, r0
 8008b54:	460c      	mov	r4, r1
 8008b56:	4619      	mov	r1, r3
 8008b58:	4622      	mov	r2, r4
 8008b5a:	f04f 0300 	mov.w	r3, #0
 8008b5e:	f04f 0400 	mov.w	r4, #0
 8008b62:	0214      	lsls	r4, r2, #8
 8008b64:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008b68:	020b      	lsls	r3, r1, #8
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	6852      	ldr	r2, [r2, #4]
 8008b6e:	0852      	lsrs	r2, r2, #1
 8008b70:	4611      	mov	r1, r2
 8008b72:	f04f 0200 	mov.w	r2, #0
 8008b76:	eb13 0b01 	adds.w	fp, r3, r1
 8008b7a:	eb44 0c02 	adc.w	ip, r4, r2
 8008b7e:	4658      	mov	r0, fp
 8008b80:	4661      	mov	r1, ip
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	f04f 0400 	mov.w	r4, #0
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	4623      	mov	r3, r4
 8008b8e:	f7f7 fb87 	bl	80002a0 <__aeabi_uldivmod>
 8008b92:	4603      	mov	r3, r0
 8008b94:	460c      	mov	r4, r1
 8008b96:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8008b98:	e1c3      	b.n	8008f22 <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d05b      	beq.n	8008c5a <UART_SetConfig+0x82a>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d053      	beq.n	8008c52 <UART_SetConfig+0x822>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bae:	2b02      	cmp	r3, #2
 8008bb0:	d04b      	beq.n	8008c4a <UART_SetConfig+0x81a>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb6:	2b03      	cmp	r3, #3
 8008bb8:	d043      	beq.n	8008c42 <UART_SetConfig+0x812>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bbe:	2b04      	cmp	r3, #4
 8008bc0:	d03b      	beq.n	8008c3a <UART_SetConfig+0x80a>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc6:	2b05      	cmp	r3, #5
 8008bc8:	d033      	beq.n	8008c32 <UART_SetConfig+0x802>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bce:	2b06      	cmp	r3, #6
 8008bd0:	d02b      	beq.n	8008c2a <UART_SetConfig+0x7fa>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd6:	2b07      	cmp	r3, #7
 8008bd8:	d023      	beq.n	8008c22 <UART_SetConfig+0x7f2>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bde:	2b08      	cmp	r3, #8
 8008be0:	d01b      	beq.n	8008c1a <UART_SetConfig+0x7ea>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be6:	2b09      	cmp	r3, #9
 8008be8:	d013      	beq.n	8008c12 <UART_SetConfig+0x7e2>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bee:	2b0a      	cmp	r3, #10
 8008bf0:	d00b      	beq.n	8008c0a <UART_SetConfig+0x7da>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf6:	2b0b      	cmp	r3, #11
 8008bf8:	d103      	bne.n	8008c02 <UART_SetConfig+0x7d2>
 8008bfa:	4bad      	ldr	r3, [pc, #692]	; (8008eb0 <UART_SetConfig+0xa80>)
 8008bfc:	f04f 0400 	mov.w	r4, #0
 8008c00:	e02e      	b.n	8008c60 <UART_SetConfig+0x830>
 8008c02:	4bac      	ldr	r3, [pc, #688]	; (8008eb4 <UART_SetConfig+0xa84>)
 8008c04:	f04f 0400 	mov.w	r4, #0
 8008c08:	e02a      	b.n	8008c60 <UART_SetConfig+0x830>
 8008c0a:	4bab      	ldr	r3, [pc, #684]	; (8008eb8 <UART_SetConfig+0xa88>)
 8008c0c:	f04f 0400 	mov.w	r4, #0
 8008c10:	e026      	b.n	8008c60 <UART_SetConfig+0x830>
 8008c12:	4baa      	ldr	r3, [pc, #680]	; (8008ebc <UART_SetConfig+0xa8c>)
 8008c14:	f04f 0400 	mov.w	r4, #0
 8008c18:	e022      	b.n	8008c60 <UART_SetConfig+0x830>
 8008c1a:	4ba9      	ldr	r3, [pc, #676]	; (8008ec0 <UART_SetConfig+0xa90>)
 8008c1c:	f04f 0400 	mov.w	r4, #0
 8008c20:	e01e      	b.n	8008c60 <UART_SetConfig+0x830>
 8008c22:	4ba8      	ldr	r3, [pc, #672]	; (8008ec4 <UART_SetConfig+0xa94>)
 8008c24:	f04f 0400 	mov.w	r4, #0
 8008c28:	e01a      	b.n	8008c60 <UART_SetConfig+0x830>
 8008c2a:	a49d      	add	r4, pc, #628	; (adr r4, 8008ea0 <UART_SetConfig+0xa70>)
 8008c2c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008c30:	e016      	b.n	8008c60 <UART_SetConfig+0x830>
 8008c32:	4ba5      	ldr	r3, [pc, #660]	; (8008ec8 <UART_SetConfig+0xa98>)
 8008c34:	f04f 0400 	mov.w	r4, #0
 8008c38:	e012      	b.n	8008c60 <UART_SetConfig+0x830>
 8008c3a:	4ba4      	ldr	r3, [pc, #656]	; (8008ecc <UART_SetConfig+0xa9c>)
 8008c3c:	f04f 0400 	mov.w	r4, #0
 8008c40:	e00e      	b.n	8008c60 <UART_SetConfig+0x830>
 8008c42:	a499      	add	r4, pc, #612	; (adr r4, 8008ea8 <UART_SetConfig+0xa78>)
 8008c44:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008c48:	e00a      	b.n	8008c60 <UART_SetConfig+0x830>
 8008c4a:	4ba1      	ldr	r3, [pc, #644]	; (8008ed0 <UART_SetConfig+0xaa0>)
 8008c4c:	f04f 0400 	mov.w	r4, #0
 8008c50:	e006      	b.n	8008c60 <UART_SetConfig+0x830>
 8008c52:	4ba0      	ldr	r3, [pc, #640]	; (8008ed4 <UART_SetConfig+0xaa4>)
 8008c54:	f04f 0400 	mov.w	r4, #0
 8008c58:	e002      	b.n	8008c60 <UART_SetConfig+0x830>
 8008c5a:	4b96      	ldr	r3, [pc, #600]	; (8008eb4 <UART_SetConfig+0xa84>)
 8008c5c:	f04f 0400 	mov.w	r4, #0
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	6852      	ldr	r2, [r2, #4]
 8008c64:	0852      	lsrs	r2, r2, #1
 8008c66:	4611      	mov	r1, r2
 8008c68:	f04f 0200 	mov.w	r2, #0
 8008c6c:	eb13 0b01 	adds.w	fp, r3, r1
 8008c70:	eb44 0c02 	adc.w	ip, r4, r2
 8008c74:	4658      	mov	r0, fp
 8008c76:	4661      	mov	r1, ip
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	f04f 0400 	mov.w	r4, #0
 8008c80:	461a      	mov	r2, r3
 8008c82:	4623      	mov	r3, r4
 8008c84:	f7f7 fb0c 	bl	80002a0 <__aeabi_uldivmod>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	460c      	mov	r4, r1
 8008c8c:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8008c8e:	e148      	b.n	8008f22 <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c90:	f7fd fdba 	bl	8006808 <HAL_RCC_GetSysClockFreq>
 8008c94:	4603      	mov	r3, r0
 8008c96:	4618      	mov	r0, r3
 8008c98:	f04f 0100 	mov.w	r1, #0
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d067      	beq.n	8008d74 <UART_SetConfig+0x944>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d05e      	beq.n	8008d6a <UART_SetConfig+0x93a>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb0:	2b02      	cmp	r3, #2
 8008cb2:	d055      	beq.n	8008d60 <UART_SetConfig+0x930>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb8:	2b03      	cmp	r3, #3
 8008cba:	d04c      	beq.n	8008d56 <UART_SetConfig+0x926>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc0:	2b04      	cmp	r3, #4
 8008cc2:	d043      	beq.n	8008d4c <UART_SetConfig+0x91c>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc8:	2b05      	cmp	r3, #5
 8008cca:	d03a      	beq.n	8008d42 <UART_SetConfig+0x912>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd0:	2b06      	cmp	r3, #6
 8008cd2:	d031      	beq.n	8008d38 <UART_SetConfig+0x908>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd8:	2b07      	cmp	r3, #7
 8008cda:	d028      	beq.n	8008d2e <UART_SetConfig+0x8fe>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce0:	2b08      	cmp	r3, #8
 8008ce2:	d01f      	beq.n	8008d24 <UART_SetConfig+0x8f4>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce8:	2b09      	cmp	r3, #9
 8008cea:	d016      	beq.n	8008d1a <UART_SetConfig+0x8ea>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf0:	2b0a      	cmp	r3, #10
 8008cf2:	d00d      	beq.n	8008d10 <UART_SetConfig+0x8e0>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf8:	2b0b      	cmp	r3, #11
 8008cfa:	d104      	bne.n	8008d06 <UART_SetConfig+0x8d6>
 8008cfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d00:	f04f 0400 	mov.w	r4, #0
 8008d04:	e03a      	b.n	8008d7c <UART_SetConfig+0x94c>
 8008d06:	f04f 0301 	mov.w	r3, #1
 8008d0a:	f04f 0400 	mov.w	r4, #0
 8008d0e:	e035      	b.n	8008d7c <UART_SetConfig+0x94c>
 8008d10:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008d14:	f04f 0400 	mov.w	r4, #0
 8008d18:	e030      	b.n	8008d7c <UART_SetConfig+0x94c>
 8008d1a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008d1e:	f04f 0400 	mov.w	r4, #0
 8008d22:	e02b      	b.n	8008d7c <UART_SetConfig+0x94c>
 8008d24:	f04f 0320 	mov.w	r3, #32
 8008d28:	f04f 0400 	mov.w	r4, #0
 8008d2c:	e026      	b.n	8008d7c <UART_SetConfig+0x94c>
 8008d2e:	f04f 0310 	mov.w	r3, #16
 8008d32:	f04f 0400 	mov.w	r4, #0
 8008d36:	e021      	b.n	8008d7c <UART_SetConfig+0x94c>
 8008d38:	f04f 030c 	mov.w	r3, #12
 8008d3c:	f04f 0400 	mov.w	r4, #0
 8008d40:	e01c      	b.n	8008d7c <UART_SetConfig+0x94c>
 8008d42:	f04f 030a 	mov.w	r3, #10
 8008d46:	f04f 0400 	mov.w	r4, #0
 8008d4a:	e017      	b.n	8008d7c <UART_SetConfig+0x94c>
 8008d4c:	f04f 0308 	mov.w	r3, #8
 8008d50:	f04f 0400 	mov.w	r4, #0
 8008d54:	e012      	b.n	8008d7c <UART_SetConfig+0x94c>
 8008d56:	f04f 0306 	mov.w	r3, #6
 8008d5a:	f04f 0400 	mov.w	r4, #0
 8008d5e:	e00d      	b.n	8008d7c <UART_SetConfig+0x94c>
 8008d60:	f04f 0304 	mov.w	r3, #4
 8008d64:	f04f 0400 	mov.w	r4, #0
 8008d68:	e008      	b.n	8008d7c <UART_SetConfig+0x94c>
 8008d6a:	f04f 0302 	mov.w	r3, #2
 8008d6e:	f04f 0400 	mov.w	r4, #0
 8008d72:	e003      	b.n	8008d7c <UART_SetConfig+0x94c>
 8008d74:	f04f 0301 	mov.w	r3, #1
 8008d78:	f04f 0400 	mov.w	r4, #0
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	4623      	mov	r3, r4
 8008d80:	f7f7 fa8e 	bl	80002a0 <__aeabi_uldivmod>
 8008d84:	4603      	mov	r3, r0
 8008d86:	460c      	mov	r4, r1
 8008d88:	4619      	mov	r1, r3
 8008d8a:	4622      	mov	r2, r4
 8008d8c:	f04f 0300 	mov.w	r3, #0
 8008d90:	f04f 0400 	mov.w	r4, #0
 8008d94:	0214      	lsls	r4, r2, #8
 8008d96:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008d9a:	020b      	lsls	r3, r1, #8
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	6852      	ldr	r2, [r2, #4]
 8008da0:	0852      	lsrs	r2, r2, #1
 8008da2:	4611      	mov	r1, r2
 8008da4:	f04f 0200 	mov.w	r2, #0
 8008da8:	eb13 0b01 	adds.w	fp, r3, r1
 8008dac:	eb44 0c02 	adc.w	ip, r4, r2
 8008db0:	4658      	mov	r0, fp
 8008db2:	4661      	mov	r1, ip
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	f04f 0400 	mov.w	r4, #0
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	4623      	mov	r3, r4
 8008dc0:	f7f7 fa6e 	bl	80002a0 <__aeabi_uldivmod>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	460c      	mov	r4, r1
 8008dc8:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8008dca:	e0aa      	b.n	8008f22 <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	f000 8087 	beq.w	8008ee4 <UART_SetConfig+0xab4>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d05b      	beq.n	8008e96 <UART_SetConfig+0xa66>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de2:	2b02      	cmp	r3, #2
 8008de4:	d052      	beq.n	8008e8c <UART_SetConfig+0xa5c>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dea:	2b03      	cmp	r3, #3
 8008dec:	d04a      	beq.n	8008e84 <UART_SetConfig+0xa54>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df2:	2b04      	cmp	r3, #4
 8008df4:	d041      	beq.n	8008e7a <UART_SetConfig+0xa4a>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dfa:	2b05      	cmp	r3, #5
 8008dfc:	d039      	beq.n	8008e72 <UART_SetConfig+0xa42>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e02:	2b06      	cmp	r3, #6
 8008e04:	d031      	beq.n	8008e6a <UART_SetConfig+0xa3a>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0a:	2b07      	cmp	r3, #7
 8008e0c:	d028      	beq.n	8008e60 <UART_SetConfig+0xa30>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e12:	2b08      	cmp	r3, #8
 8008e14:	d01f      	beq.n	8008e56 <UART_SetConfig+0xa26>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1a:	2b09      	cmp	r3, #9
 8008e1c:	d016      	beq.n	8008e4c <UART_SetConfig+0xa1c>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e22:	2b0a      	cmp	r3, #10
 8008e24:	d00d      	beq.n	8008e42 <UART_SetConfig+0xa12>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2a:	2b0b      	cmp	r3, #11
 8008e2c:	d104      	bne.n	8008e38 <UART_SetConfig+0xa08>
 8008e2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e32:	f04f 0400 	mov.w	r4, #0
 8008e36:	e059      	b.n	8008eec <UART_SetConfig+0xabc>
 8008e38:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008e3c:	f04f 0400 	mov.w	r4, #0
 8008e40:	e054      	b.n	8008eec <UART_SetConfig+0xabc>
 8008e42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e46:	f04f 0400 	mov.w	r4, #0
 8008e4a:	e04f      	b.n	8008eec <UART_SetConfig+0xabc>
 8008e4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008e50:	f04f 0400 	mov.w	r4, #0
 8008e54:	e04a      	b.n	8008eec <UART_SetConfig+0xabc>
 8008e56:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008e5a:	f04f 0400 	mov.w	r4, #0
 8008e5e:	e045      	b.n	8008eec <UART_SetConfig+0xabc>
 8008e60:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008e64:	f04f 0400 	mov.w	r4, #0
 8008e68:	e040      	b.n	8008eec <UART_SetConfig+0xabc>
 8008e6a:	4b1b      	ldr	r3, [pc, #108]	; (8008ed8 <UART_SetConfig+0xaa8>)
 8008e6c:	f04f 0400 	mov.w	r4, #0
 8008e70:	e03c      	b.n	8008eec <UART_SetConfig+0xabc>
 8008e72:	4b1a      	ldr	r3, [pc, #104]	; (8008edc <UART_SetConfig+0xaac>)
 8008e74:	f04f 0400 	mov.w	r4, #0
 8008e78:	e038      	b.n	8008eec <UART_SetConfig+0xabc>
 8008e7a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e7e:	f04f 0400 	mov.w	r4, #0
 8008e82:	e033      	b.n	8008eec <UART_SetConfig+0xabc>
 8008e84:	4b16      	ldr	r3, [pc, #88]	; (8008ee0 <UART_SetConfig+0xab0>)
 8008e86:	f04f 0400 	mov.w	r4, #0
 8008e8a:	e02f      	b.n	8008eec <UART_SetConfig+0xabc>
 8008e8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008e90:	f04f 0400 	mov.w	r4, #0
 8008e94:	e02a      	b.n	8008eec <UART_SetConfig+0xabc>
 8008e96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008e9a:	f04f 0400 	mov.w	r4, #0
 8008e9e:	e025      	b.n	8008eec <UART_SetConfig+0xabc>
 8008ea0:	14585500 	.word	0x14585500
 8008ea4:	00000000 	.word	0x00000000
 8008ea8:	28b0aa00 	.word	0x28b0aa00
 8008eac:	00000000 	.word	0x00000000
 8008eb0:	00f42400 	.word	0x00f42400
 8008eb4:	f4240000 	.word	0xf4240000
 8008eb8:	01e84800 	.word	0x01e84800
 8008ebc:	03d09000 	.word	0x03d09000
 8008ec0:	07a12000 	.word	0x07a12000
 8008ec4:	0f424000 	.word	0x0f424000
 8008ec8:	186a0000 	.word	0x186a0000
 8008ecc:	1e848000 	.word	0x1e848000
 8008ed0:	3d090000 	.word	0x3d090000
 8008ed4:	7a120000 	.word	0x7a120000
 8008ed8:	000aaa00 	.word	0x000aaa00
 8008edc:	000ccc00 	.word	0x000ccc00
 8008ee0:	00155500 	.word	0x00155500
 8008ee4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008ee8:	f04f 0400 	mov.w	r4, #0
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	6852      	ldr	r2, [r2, #4]
 8008ef0:	0852      	lsrs	r2, r2, #1
 8008ef2:	4611      	mov	r1, r2
 8008ef4:	f04f 0200 	mov.w	r2, #0
 8008ef8:	eb13 0b01 	adds.w	fp, r3, r1
 8008efc:	eb44 0c02 	adc.w	ip, r4, r2
 8008f00:	4658      	mov	r0, fp
 8008f02:	4661      	mov	r1, ip
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	f04f 0400 	mov.w	r4, #0
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	4623      	mov	r3, r4
 8008f10:	f7f7 f9c6 	bl	80002a0 <__aeabi_uldivmod>
 8008f14:	4603      	mov	r3, r0
 8008f16:	460c      	mov	r4, r1
 8008f18:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8008f1a:	e002      	b.n	8008f22 <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	74fb      	strb	r3, [r7, #19]
            break;
 8008f20:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f28:	d309      	bcc.n	8008f3e <UART_SetConfig+0xb0e>
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f30:	d205      	bcs.n	8008f3e <UART_SetConfig+0xb0e>
        {
          huart->Instance->BRR = usartdiv;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	697a      	ldr	r2, [r7, #20]
 8008f38:	60da      	str	r2, [r3, #12]
 8008f3a:	f000 bc0f 	b.w	800975c <UART_SetConfig+0x132c>
        }
        else
        {
          ret = HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	74fb      	strb	r3, [r7, #19]
 8008f42:	f000 bc0b 	b.w	800975c <UART_SetConfig+0x132c>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	69db      	ldr	r3, [r3, #28]
 8008f4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f4e:	f040 81ff 	bne.w	8009350 <UART_SetConfig+0xf20>
  {
    switch (clocksource)
 8008f52:	7efb      	ldrb	r3, [r7, #27]
 8008f54:	2b08      	cmp	r3, #8
 8008f56:	f200 81db 	bhi.w	8009310 <UART_SetConfig+0xee0>
 8008f5a:	a201      	add	r2, pc, #4	; (adr r2, 8008f60 <UART_SetConfig+0xb30>)
 8008f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f60:	08008f85 	.word	0x08008f85
 8008f64:	0800903b 	.word	0x0800903b
 8008f68:	080090f1 	.word	0x080090f1
 8008f6c:	08009311 	.word	0x08009311
 8008f70:	08009199 	.word	0x08009199
 8008f74:	08009311 	.word	0x08009311
 8008f78:	08009311 	.word	0x08009311
 8008f7c:	08009311 	.word	0x08009311
 8008f80:	0800924f 	.word	0x0800924f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f84:	f7fd fcd6 	bl	8006934 <HAL_RCC_GetPCLK1Freq>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d044      	beq.n	800901c <UART_SetConfig+0xbec>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d03e      	beq.n	8009018 <UART_SetConfig+0xbe8>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9e:	2b02      	cmp	r3, #2
 8008fa0:	d038      	beq.n	8009014 <UART_SetConfig+0xbe4>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa6:	2b03      	cmp	r3, #3
 8008fa8:	d032      	beq.n	8009010 <UART_SetConfig+0xbe0>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fae:	2b04      	cmp	r3, #4
 8008fb0:	d02c      	beq.n	800900c <UART_SetConfig+0xbdc>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb6:	2b05      	cmp	r3, #5
 8008fb8:	d026      	beq.n	8009008 <UART_SetConfig+0xbd8>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fbe:	2b06      	cmp	r3, #6
 8008fc0:	d020      	beq.n	8009004 <UART_SetConfig+0xbd4>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc6:	2b07      	cmp	r3, #7
 8008fc8:	d01a      	beq.n	8009000 <UART_SetConfig+0xbd0>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fce:	2b08      	cmp	r3, #8
 8008fd0:	d014      	beq.n	8008ffc <UART_SetConfig+0xbcc>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd6:	2b09      	cmp	r3, #9
 8008fd8:	d00e      	beq.n	8008ff8 <UART_SetConfig+0xbc8>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fde:	2b0a      	cmp	r3, #10
 8008fe0:	d008      	beq.n	8008ff4 <UART_SetConfig+0xbc4>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe6:	2b0b      	cmp	r3, #11
 8008fe8:	d102      	bne.n	8008ff0 <UART_SetConfig+0xbc0>
 8008fea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fee:	e016      	b.n	800901e <UART_SetConfig+0xbee>
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	e014      	b.n	800901e <UART_SetConfig+0xbee>
 8008ff4:	2380      	movs	r3, #128	; 0x80
 8008ff6:	e012      	b.n	800901e <UART_SetConfig+0xbee>
 8008ff8:	2340      	movs	r3, #64	; 0x40
 8008ffa:	e010      	b.n	800901e <UART_SetConfig+0xbee>
 8008ffc:	2320      	movs	r3, #32
 8008ffe:	e00e      	b.n	800901e <UART_SetConfig+0xbee>
 8009000:	2310      	movs	r3, #16
 8009002:	e00c      	b.n	800901e <UART_SetConfig+0xbee>
 8009004:	230c      	movs	r3, #12
 8009006:	e00a      	b.n	800901e <UART_SetConfig+0xbee>
 8009008:	230a      	movs	r3, #10
 800900a:	e008      	b.n	800901e <UART_SetConfig+0xbee>
 800900c:	2308      	movs	r3, #8
 800900e:	e006      	b.n	800901e <UART_SetConfig+0xbee>
 8009010:	2306      	movs	r3, #6
 8009012:	e004      	b.n	800901e <UART_SetConfig+0xbee>
 8009014:	2304      	movs	r3, #4
 8009016:	e002      	b.n	800901e <UART_SetConfig+0xbee>
 8009018:	2302      	movs	r3, #2
 800901a:	e000      	b.n	800901e <UART_SetConfig+0xbee>
 800901c:	2301      	movs	r3, #1
 800901e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009022:	005a      	lsls	r2, r3, #1
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	085b      	lsrs	r3, r3, #1
 800902a:	441a      	add	r2, r3
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	fbb2 f3f3 	udiv	r3, r2, r3
 8009034:	b29b      	uxth	r3, r3
 8009036:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8009038:	e16d      	b.n	8009316 <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800903a:	f7fd fc91 	bl	8006960 <HAL_RCC_GetPCLK2Freq>
 800903e:	4602      	mov	r2, r0
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009044:	2b00      	cmp	r3, #0
 8009046:	d044      	beq.n	80090d2 <UART_SetConfig+0xca2>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904c:	2b01      	cmp	r3, #1
 800904e:	d03e      	beq.n	80090ce <UART_SetConfig+0xc9e>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009054:	2b02      	cmp	r3, #2
 8009056:	d038      	beq.n	80090ca <UART_SetConfig+0xc9a>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800905c:	2b03      	cmp	r3, #3
 800905e:	d032      	beq.n	80090c6 <UART_SetConfig+0xc96>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009064:	2b04      	cmp	r3, #4
 8009066:	d02c      	beq.n	80090c2 <UART_SetConfig+0xc92>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906c:	2b05      	cmp	r3, #5
 800906e:	d026      	beq.n	80090be <UART_SetConfig+0xc8e>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009074:	2b06      	cmp	r3, #6
 8009076:	d020      	beq.n	80090ba <UART_SetConfig+0xc8a>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907c:	2b07      	cmp	r3, #7
 800907e:	d01a      	beq.n	80090b6 <UART_SetConfig+0xc86>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009084:	2b08      	cmp	r3, #8
 8009086:	d014      	beq.n	80090b2 <UART_SetConfig+0xc82>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908c:	2b09      	cmp	r3, #9
 800908e:	d00e      	beq.n	80090ae <UART_SetConfig+0xc7e>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009094:	2b0a      	cmp	r3, #10
 8009096:	d008      	beq.n	80090aa <UART_SetConfig+0xc7a>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909c:	2b0b      	cmp	r3, #11
 800909e:	d102      	bne.n	80090a6 <UART_SetConfig+0xc76>
 80090a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090a4:	e016      	b.n	80090d4 <UART_SetConfig+0xca4>
 80090a6:	2301      	movs	r3, #1
 80090a8:	e014      	b.n	80090d4 <UART_SetConfig+0xca4>
 80090aa:	2380      	movs	r3, #128	; 0x80
 80090ac:	e012      	b.n	80090d4 <UART_SetConfig+0xca4>
 80090ae:	2340      	movs	r3, #64	; 0x40
 80090b0:	e010      	b.n	80090d4 <UART_SetConfig+0xca4>
 80090b2:	2320      	movs	r3, #32
 80090b4:	e00e      	b.n	80090d4 <UART_SetConfig+0xca4>
 80090b6:	2310      	movs	r3, #16
 80090b8:	e00c      	b.n	80090d4 <UART_SetConfig+0xca4>
 80090ba:	230c      	movs	r3, #12
 80090bc:	e00a      	b.n	80090d4 <UART_SetConfig+0xca4>
 80090be:	230a      	movs	r3, #10
 80090c0:	e008      	b.n	80090d4 <UART_SetConfig+0xca4>
 80090c2:	2308      	movs	r3, #8
 80090c4:	e006      	b.n	80090d4 <UART_SetConfig+0xca4>
 80090c6:	2306      	movs	r3, #6
 80090c8:	e004      	b.n	80090d4 <UART_SetConfig+0xca4>
 80090ca:	2304      	movs	r3, #4
 80090cc:	e002      	b.n	80090d4 <UART_SetConfig+0xca4>
 80090ce:	2302      	movs	r3, #2
 80090d0:	e000      	b.n	80090d4 <UART_SetConfig+0xca4>
 80090d2:	2301      	movs	r3, #1
 80090d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80090d8:	005a      	lsls	r2, r3, #1
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	085b      	lsrs	r3, r3, #1
 80090e0:	441a      	add	r2, r3
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80090ee:	e112      	b.n	8009316 <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d043      	beq.n	8009180 <UART_SetConfig+0xd50>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d03d      	beq.n	800917c <UART_SetConfig+0xd4c>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009104:	2b02      	cmp	r3, #2
 8009106:	d037      	beq.n	8009178 <UART_SetConfig+0xd48>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910c:	2b03      	cmp	r3, #3
 800910e:	d031      	beq.n	8009174 <UART_SetConfig+0xd44>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009114:	2b04      	cmp	r3, #4
 8009116:	d02b      	beq.n	8009170 <UART_SetConfig+0xd40>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911c:	2b05      	cmp	r3, #5
 800911e:	d025      	beq.n	800916c <UART_SetConfig+0xd3c>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009124:	2b06      	cmp	r3, #6
 8009126:	d01f      	beq.n	8009168 <UART_SetConfig+0xd38>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912c:	2b07      	cmp	r3, #7
 800912e:	d019      	beq.n	8009164 <UART_SetConfig+0xd34>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009134:	2b08      	cmp	r3, #8
 8009136:	d013      	beq.n	8009160 <UART_SetConfig+0xd30>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913c:	2b09      	cmp	r3, #9
 800913e:	d00d      	beq.n	800915c <UART_SetConfig+0xd2c>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009144:	2b0a      	cmp	r3, #10
 8009146:	d007      	beq.n	8009158 <UART_SetConfig+0xd28>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914c:	2b0b      	cmp	r3, #11
 800914e:	d101      	bne.n	8009154 <UART_SetConfig+0xd24>
 8009150:	4b8c      	ldr	r3, [pc, #560]	; (8009384 <UART_SetConfig+0xf54>)
 8009152:	e016      	b.n	8009182 <UART_SetConfig+0xd52>
 8009154:	4b8c      	ldr	r3, [pc, #560]	; (8009388 <UART_SetConfig+0xf58>)
 8009156:	e014      	b.n	8009182 <UART_SetConfig+0xd52>
 8009158:	4b8c      	ldr	r3, [pc, #560]	; (800938c <UART_SetConfig+0xf5c>)
 800915a:	e012      	b.n	8009182 <UART_SetConfig+0xd52>
 800915c:	4b8c      	ldr	r3, [pc, #560]	; (8009390 <UART_SetConfig+0xf60>)
 800915e:	e010      	b.n	8009182 <UART_SetConfig+0xd52>
 8009160:	4b8c      	ldr	r3, [pc, #560]	; (8009394 <UART_SetConfig+0xf64>)
 8009162:	e00e      	b.n	8009182 <UART_SetConfig+0xd52>
 8009164:	4b8c      	ldr	r3, [pc, #560]	; (8009398 <UART_SetConfig+0xf68>)
 8009166:	e00c      	b.n	8009182 <UART_SetConfig+0xd52>
 8009168:	4b8c      	ldr	r3, [pc, #560]	; (800939c <UART_SetConfig+0xf6c>)
 800916a:	e00a      	b.n	8009182 <UART_SetConfig+0xd52>
 800916c:	4b8c      	ldr	r3, [pc, #560]	; (80093a0 <UART_SetConfig+0xf70>)
 800916e:	e008      	b.n	8009182 <UART_SetConfig+0xd52>
 8009170:	4b8c      	ldr	r3, [pc, #560]	; (80093a4 <UART_SetConfig+0xf74>)
 8009172:	e006      	b.n	8009182 <UART_SetConfig+0xd52>
 8009174:	4b8c      	ldr	r3, [pc, #560]	; (80093a8 <UART_SetConfig+0xf78>)
 8009176:	e004      	b.n	8009182 <UART_SetConfig+0xd52>
 8009178:	4b8c      	ldr	r3, [pc, #560]	; (80093ac <UART_SetConfig+0xf7c>)
 800917a:	e002      	b.n	8009182 <UART_SetConfig+0xd52>
 800917c:	4b8c      	ldr	r3, [pc, #560]	; (80093b0 <UART_SetConfig+0xf80>)
 800917e:	e000      	b.n	8009182 <UART_SetConfig+0xd52>
 8009180:	4b81      	ldr	r3, [pc, #516]	; (8009388 <UART_SetConfig+0xf58>)
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	6852      	ldr	r2, [r2, #4]
 8009186:	0852      	lsrs	r2, r2, #1
 8009188:	441a      	add	r2, r3
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009192:	b29b      	uxth	r3, r3
 8009194:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8009196:	e0be      	b.n	8009316 <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009198:	f7fd fb36 	bl	8006808 <HAL_RCC_GetSysClockFreq>
 800919c:	4602      	mov	r2, r0
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d044      	beq.n	8009230 <UART_SetConfig+0xe00>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d03e      	beq.n	800922c <UART_SetConfig+0xdfc>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b2:	2b02      	cmp	r3, #2
 80091b4:	d038      	beq.n	8009228 <UART_SetConfig+0xdf8>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ba:	2b03      	cmp	r3, #3
 80091bc:	d032      	beq.n	8009224 <UART_SetConfig+0xdf4>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c2:	2b04      	cmp	r3, #4
 80091c4:	d02c      	beq.n	8009220 <UART_SetConfig+0xdf0>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ca:	2b05      	cmp	r3, #5
 80091cc:	d026      	beq.n	800921c <UART_SetConfig+0xdec>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d2:	2b06      	cmp	r3, #6
 80091d4:	d020      	beq.n	8009218 <UART_SetConfig+0xde8>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091da:	2b07      	cmp	r3, #7
 80091dc:	d01a      	beq.n	8009214 <UART_SetConfig+0xde4>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e2:	2b08      	cmp	r3, #8
 80091e4:	d014      	beq.n	8009210 <UART_SetConfig+0xde0>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ea:	2b09      	cmp	r3, #9
 80091ec:	d00e      	beq.n	800920c <UART_SetConfig+0xddc>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f2:	2b0a      	cmp	r3, #10
 80091f4:	d008      	beq.n	8009208 <UART_SetConfig+0xdd8>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fa:	2b0b      	cmp	r3, #11
 80091fc:	d102      	bne.n	8009204 <UART_SetConfig+0xdd4>
 80091fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009202:	e016      	b.n	8009232 <UART_SetConfig+0xe02>
 8009204:	2301      	movs	r3, #1
 8009206:	e014      	b.n	8009232 <UART_SetConfig+0xe02>
 8009208:	2380      	movs	r3, #128	; 0x80
 800920a:	e012      	b.n	8009232 <UART_SetConfig+0xe02>
 800920c:	2340      	movs	r3, #64	; 0x40
 800920e:	e010      	b.n	8009232 <UART_SetConfig+0xe02>
 8009210:	2320      	movs	r3, #32
 8009212:	e00e      	b.n	8009232 <UART_SetConfig+0xe02>
 8009214:	2310      	movs	r3, #16
 8009216:	e00c      	b.n	8009232 <UART_SetConfig+0xe02>
 8009218:	230c      	movs	r3, #12
 800921a:	e00a      	b.n	8009232 <UART_SetConfig+0xe02>
 800921c:	230a      	movs	r3, #10
 800921e:	e008      	b.n	8009232 <UART_SetConfig+0xe02>
 8009220:	2308      	movs	r3, #8
 8009222:	e006      	b.n	8009232 <UART_SetConfig+0xe02>
 8009224:	2306      	movs	r3, #6
 8009226:	e004      	b.n	8009232 <UART_SetConfig+0xe02>
 8009228:	2304      	movs	r3, #4
 800922a:	e002      	b.n	8009232 <UART_SetConfig+0xe02>
 800922c:	2302      	movs	r3, #2
 800922e:	e000      	b.n	8009232 <UART_SetConfig+0xe02>
 8009230:	2301      	movs	r3, #1
 8009232:	fbb2 f3f3 	udiv	r3, r2, r3
 8009236:	005a      	lsls	r2, r3, #1
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	085b      	lsrs	r3, r3, #1
 800923e:	441a      	add	r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	fbb2 f3f3 	udiv	r3, r2, r3
 8009248:	b29b      	uxth	r3, r3
 800924a:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800924c:	e063      	b.n	8009316 <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009252:	2b00      	cmp	r3, #0
 8009254:	d04f      	beq.n	80092f6 <UART_SetConfig+0xec6>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800925a:	2b01      	cmp	r3, #1
 800925c:	d048      	beq.n	80092f0 <UART_SetConfig+0xec0>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009262:	2b02      	cmp	r3, #2
 8009264:	d041      	beq.n	80092ea <UART_SetConfig+0xeba>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800926a:	2b03      	cmp	r3, #3
 800926c:	d03a      	beq.n	80092e4 <UART_SetConfig+0xeb4>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009272:	2b04      	cmp	r3, #4
 8009274:	d033      	beq.n	80092de <UART_SetConfig+0xeae>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800927a:	2b05      	cmp	r3, #5
 800927c:	d02c      	beq.n	80092d8 <UART_SetConfig+0xea8>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009282:	2b06      	cmp	r3, #6
 8009284:	d025      	beq.n	80092d2 <UART_SetConfig+0xea2>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800928a:	2b07      	cmp	r3, #7
 800928c:	d01e      	beq.n	80092cc <UART_SetConfig+0xe9c>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009292:	2b08      	cmp	r3, #8
 8009294:	d017      	beq.n	80092c6 <UART_SetConfig+0xe96>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929a:	2b09      	cmp	r3, #9
 800929c:	d010      	beq.n	80092c0 <UART_SetConfig+0xe90>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a2:	2b0a      	cmp	r3, #10
 80092a4:	d009      	beq.n	80092ba <UART_SetConfig+0xe8a>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092aa:	2b0b      	cmp	r3, #11
 80092ac:	d102      	bne.n	80092b4 <UART_SetConfig+0xe84>
 80092ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092b2:	e022      	b.n	80092fa <UART_SetConfig+0xeca>
 80092b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80092b8:	e01f      	b.n	80092fa <UART_SetConfig+0xeca>
 80092ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092be:	e01c      	b.n	80092fa <UART_SetConfig+0xeca>
 80092c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092c4:	e019      	b.n	80092fa <UART_SetConfig+0xeca>
 80092c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80092ca:	e016      	b.n	80092fa <UART_SetConfig+0xeca>
 80092cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092d0:	e013      	b.n	80092fa <UART_SetConfig+0xeca>
 80092d2:	f241 5354 	movw	r3, #5460	; 0x1554
 80092d6:	e010      	b.n	80092fa <UART_SetConfig+0xeca>
 80092d8:	f641 1398 	movw	r3, #6552	; 0x1998
 80092dc:	e00d      	b.n	80092fa <UART_SetConfig+0xeca>
 80092de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80092e2:	e00a      	b.n	80092fa <UART_SetConfig+0xeca>
 80092e4:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80092e8:	e007      	b.n	80092fa <UART_SetConfig+0xeca>
 80092ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80092ee:	e004      	b.n	80092fa <UART_SetConfig+0xeca>
 80092f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092f4:	e001      	b.n	80092fa <UART_SetConfig+0xeca>
 80092f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80092fa:	687a      	ldr	r2, [r7, #4]
 80092fc:	6852      	ldr	r2, [r2, #4]
 80092fe:	0852      	lsrs	r2, r2, #1
 8009300:	441a      	add	r2, r3
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	fbb2 f3f3 	udiv	r3, r2, r3
 800930a:	b29b      	uxth	r3, r3
 800930c:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800930e:	e002      	b.n	8009316 <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8009310:	2301      	movs	r3, #1
 8009312:	74fb      	strb	r3, [r7, #19]
        break;
 8009314:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	2b0f      	cmp	r3, #15
 800931a:	d916      	bls.n	800934a <UART_SetConfig+0xf1a>
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009322:	d212      	bcs.n	800934a <UART_SetConfig+0xf1a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	b29b      	uxth	r3, r3
 8009328:	f023 030f 	bic.w	r3, r3, #15
 800932c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	085b      	lsrs	r3, r3, #1
 8009332:	b29b      	uxth	r3, r3
 8009334:	f003 0307 	and.w	r3, r3, #7
 8009338:	b29a      	uxth	r2, r3
 800933a:	897b      	ldrh	r3, [r7, #10]
 800933c:	4313      	orrs	r3, r2
 800933e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	897a      	ldrh	r2, [r7, #10]
 8009346:	60da      	str	r2, [r3, #12]
 8009348:	e208      	b.n	800975c <UART_SetConfig+0x132c>
    }
    else
    {
      ret = HAL_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	74fb      	strb	r3, [r7, #19]
 800934e:	e205      	b.n	800975c <UART_SetConfig+0x132c>
    }
  }
  else
  {
    switch (clocksource)
 8009350:	7efb      	ldrb	r3, [r7, #27]
 8009352:	2b08      	cmp	r3, #8
 8009354:	f200 81f1 	bhi.w	800973a <UART_SetConfig+0x130a>
 8009358:	a201      	add	r2, pc, #4	; (adr r2, 8009360 <UART_SetConfig+0xf30>)
 800935a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800935e:	bf00      	nop
 8009360:	080093b5 	.word	0x080093b5
 8009364:	08009469 	.word	0x08009469
 8009368:	0800951d 	.word	0x0800951d
 800936c:	0800973b 	.word	0x0800973b
 8009370:	080095c7 	.word	0x080095c7
 8009374:	0800973b 	.word	0x0800973b
 8009378:	0800973b 	.word	0x0800973b
 800937c:	0800973b 	.word	0x0800973b
 8009380:	0800967b 	.word	0x0800967b
 8009384:	0001e848 	.word	0x0001e848
 8009388:	01e84800 	.word	0x01e84800
 800938c:	0003d090 	.word	0x0003d090
 8009390:	0007a120 	.word	0x0007a120
 8009394:	000f4240 	.word	0x000f4240
 8009398:	001e8480 	.word	0x001e8480
 800939c:	0028b0aa 	.word	0x0028b0aa
 80093a0:	0030d400 	.word	0x0030d400
 80093a4:	003d0900 	.word	0x003d0900
 80093a8:	00516154 	.word	0x00516154
 80093ac:	007a1200 	.word	0x007a1200
 80093b0:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093b4:	f7fd fabe 	bl	8006934 <HAL_RCC_GetPCLK1Freq>
 80093b8:	4602      	mov	r2, r0
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d044      	beq.n	800944c <UART_SetConfig+0x101c>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d03e      	beq.n	8009448 <UART_SetConfig+0x1018>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ce:	2b02      	cmp	r3, #2
 80093d0:	d038      	beq.n	8009444 <UART_SetConfig+0x1014>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d6:	2b03      	cmp	r3, #3
 80093d8:	d032      	beq.n	8009440 <UART_SetConfig+0x1010>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093de:	2b04      	cmp	r3, #4
 80093e0:	d02c      	beq.n	800943c <UART_SetConfig+0x100c>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e6:	2b05      	cmp	r3, #5
 80093e8:	d026      	beq.n	8009438 <UART_SetConfig+0x1008>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ee:	2b06      	cmp	r3, #6
 80093f0:	d020      	beq.n	8009434 <UART_SetConfig+0x1004>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f6:	2b07      	cmp	r3, #7
 80093f8:	d01a      	beq.n	8009430 <UART_SetConfig+0x1000>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093fe:	2b08      	cmp	r3, #8
 8009400:	d014      	beq.n	800942c <UART_SetConfig+0xffc>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009406:	2b09      	cmp	r3, #9
 8009408:	d00e      	beq.n	8009428 <UART_SetConfig+0xff8>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800940e:	2b0a      	cmp	r3, #10
 8009410:	d008      	beq.n	8009424 <UART_SetConfig+0xff4>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009416:	2b0b      	cmp	r3, #11
 8009418:	d102      	bne.n	8009420 <UART_SetConfig+0xff0>
 800941a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800941e:	e016      	b.n	800944e <UART_SetConfig+0x101e>
 8009420:	2301      	movs	r3, #1
 8009422:	e014      	b.n	800944e <UART_SetConfig+0x101e>
 8009424:	2380      	movs	r3, #128	; 0x80
 8009426:	e012      	b.n	800944e <UART_SetConfig+0x101e>
 8009428:	2340      	movs	r3, #64	; 0x40
 800942a:	e010      	b.n	800944e <UART_SetConfig+0x101e>
 800942c:	2320      	movs	r3, #32
 800942e:	e00e      	b.n	800944e <UART_SetConfig+0x101e>
 8009430:	2310      	movs	r3, #16
 8009432:	e00c      	b.n	800944e <UART_SetConfig+0x101e>
 8009434:	230c      	movs	r3, #12
 8009436:	e00a      	b.n	800944e <UART_SetConfig+0x101e>
 8009438:	230a      	movs	r3, #10
 800943a:	e008      	b.n	800944e <UART_SetConfig+0x101e>
 800943c:	2308      	movs	r3, #8
 800943e:	e006      	b.n	800944e <UART_SetConfig+0x101e>
 8009440:	2306      	movs	r3, #6
 8009442:	e004      	b.n	800944e <UART_SetConfig+0x101e>
 8009444:	2304      	movs	r3, #4
 8009446:	e002      	b.n	800944e <UART_SetConfig+0x101e>
 8009448:	2302      	movs	r3, #2
 800944a:	e000      	b.n	800944e <UART_SetConfig+0x101e>
 800944c:	2301      	movs	r3, #1
 800944e:	fbb2 f2f3 	udiv	r2, r2, r3
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	085b      	lsrs	r3, r3, #1
 8009458:	441a      	add	r2, r3
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009462:	b29b      	uxth	r3, r3
 8009464:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8009466:	e16b      	b.n	8009740 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009468:	f7fd fa7a 	bl	8006960 <HAL_RCC_GetPCLK2Freq>
 800946c:	4602      	mov	r2, r0
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009472:	2b00      	cmp	r3, #0
 8009474:	d044      	beq.n	8009500 <UART_SetConfig+0x10d0>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800947a:	2b01      	cmp	r3, #1
 800947c:	d03e      	beq.n	80094fc <UART_SetConfig+0x10cc>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009482:	2b02      	cmp	r3, #2
 8009484:	d038      	beq.n	80094f8 <UART_SetConfig+0x10c8>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800948a:	2b03      	cmp	r3, #3
 800948c:	d032      	beq.n	80094f4 <UART_SetConfig+0x10c4>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009492:	2b04      	cmp	r3, #4
 8009494:	d02c      	beq.n	80094f0 <UART_SetConfig+0x10c0>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800949a:	2b05      	cmp	r3, #5
 800949c:	d026      	beq.n	80094ec <UART_SetConfig+0x10bc>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a2:	2b06      	cmp	r3, #6
 80094a4:	d020      	beq.n	80094e8 <UART_SetConfig+0x10b8>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094aa:	2b07      	cmp	r3, #7
 80094ac:	d01a      	beq.n	80094e4 <UART_SetConfig+0x10b4>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b2:	2b08      	cmp	r3, #8
 80094b4:	d014      	beq.n	80094e0 <UART_SetConfig+0x10b0>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ba:	2b09      	cmp	r3, #9
 80094bc:	d00e      	beq.n	80094dc <UART_SetConfig+0x10ac>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c2:	2b0a      	cmp	r3, #10
 80094c4:	d008      	beq.n	80094d8 <UART_SetConfig+0x10a8>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ca:	2b0b      	cmp	r3, #11
 80094cc:	d102      	bne.n	80094d4 <UART_SetConfig+0x10a4>
 80094ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80094d2:	e016      	b.n	8009502 <UART_SetConfig+0x10d2>
 80094d4:	2301      	movs	r3, #1
 80094d6:	e014      	b.n	8009502 <UART_SetConfig+0x10d2>
 80094d8:	2380      	movs	r3, #128	; 0x80
 80094da:	e012      	b.n	8009502 <UART_SetConfig+0x10d2>
 80094dc:	2340      	movs	r3, #64	; 0x40
 80094de:	e010      	b.n	8009502 <UART_SetConfig+0x10d2>
 80094e0:	2320      	movs	r3, #32
 80094e2:	e00e      	b.n	8009502 <UART_SetConfig+0x10d2>
 80094e4:	2310      	movs	r3, #16
 80094e6:	e00c      	b.n	8009502 <UART_SetConfig+0x10d2>
 80094e8:	230c      	movs	r3, #12
 80094ea:	e00a      	b.n	8009502 <UART_SetConfig+0x10d2>
 80094ec:	230a      	movs	r3, #10
 80094ee:	e008      	b.n	8009502 <UART_SetConfig+0x10d2>
 80094f0:	2308      	movs	r3, #8
 80094f2:	e006      	b.n	8009502 <UART_SetConfig+0x10d2>
 80094f4:	2306      	movs	r3, #6
 80094f6:	e004      	b.n	8009502 <UART_SetConfig+0x10d2>
 80094f8:	2304      	movs	r3, #4
 80094fa:	e002      	b.n	8009502 <UART_SetConfig+0x10d2>
 80094fc:	2302      	movs	r3, #2
 80094fe:	e000      	b.n	8009502 <UART_SetConfig+0x10d2>
 8009500:	2301      	movs	r3, #1
 8009502:	fbb2 f2f3 	udiv	r2, r2, r3
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	085b      	lsrs	r3, r3, #1
 800950c:	441a      	add	r2, r3
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	fbb2 f3f3 	udiv	r3, r2, r3
 8009516:	b29b      	uxth	r3, r3
 8009518:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800951a:	e111      	b.n	8009740 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009520:	2b00      	cmp	r3, #0
 8009522:	d044      	beq.n	80095ae <UART_SetConfig+0x117e>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009528:	2b01      	cmp	r3, #1
 800952a:	d03e      	beq.n	80095aa <UART_SetConfig+0x117a>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009530:	2b02      	cmp	r3, #2
 8009532:	d038      	beq.n	80095a6 <UART_SetConfig+0x1176>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009538:	2b03      	cmp	r3, #3
 800953a:	d032      	beq.n	80095a2 <UART_SetConfig+0x1172>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009540:	2b04      	cmp	r3, #4
 8009542:	d02c      	beq.n	800959e <UART_SetConfig+0x116e>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009548:	2b05      	cmp	r3, #5
 800954a:	d026      	beq.n	800959a <UART_SetConfig+0x116a>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009550:	2b06      	cmp	r3, #6
 8009552:	d020      	beq.n	8009596 <UART_SetConfig+0x1166>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009558:	2b07      	cmp	r3, #7
 800955a:	d01a      	beq.n	8009592 <UART_SetConfig+0x1162>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009560:	2b08      	cmp	r3, #8
 8009562:	d014      	beq.n	800958e <UART_SetConfig+0x115e>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009568:	2b09      	cmp	r3, #9
 800956a:	d00e      	beq.n	800958a <UART_SetConfig+0x115a>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009570:	2b0a      	cmp	r3, #10
 8009572:	d008      	beq.n	8009586 <UART_SetConfig+0x1156>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009578:	2b0b      	cmp	r3, #11
 800957a:	d102      	bne.n	8009582 <UART_SetConfig+0x1152>
 800957c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009580:	e016      	b.n	80095b0 <UART_SetConfig+0x1180>
 8009582:	4b80      	ldr	r3, [pc, #512]	; (8009784 <UART_SetConfig+0x1354>)
 8009584:	e014      	b.n	80095b0 <UART_SetConfig+0x1180>
 8009586:	4b80      	ldr	r3, [pc, #512]	; (8009788 <UART_SetConfig+0x1358>)
 8009588:	e012      	b.n	80095b0 <UART_SetConfig+0x1180>
 800958a:	4b80      	ldr	r3, [pc, #512]	; (800978c <UART_SetConfig+0x135c>)
 800958c:	e010      	b.n	80095b0 <UART_SetConfig+0x1180>
 800958e:	4b80      	ldr	r3, [pc, #512]	; (8009790 <UART_SetConfig+0x1360>)
 8009590:	e00e      	b.n	80095b0 <UART_SetConfig+0x1180>
 8009592:	4b80      	ldr	r3, [pc, #512]	; (8009794 <UART_SetConfig+0x1364>)
 8009594:	e00c      	b.n	80095b0 <UART_SetConfig+0x1180>
 8009596:	4b80      	ldr	r3, [pc, #512]	; (8009798 <UART_SetConfig+0x1368>)
 8009598:	e00a      	b.n	80095b0 <UART_SetConfig+0x1180>
 800959a:	4b80      	ldr	r3, [pc, #512]	; (800979c <UART_SetConfig+0x136c>)
 800959c:	e008      	b.n	80095b0 <UART_SetConfig+0x1180>
 800959e:	4b80      	ldr	r3, [pc, #512]	; (80097a0 <UART_SetConfig+0x1370>)
 80095a0:	e006      	b.n	80095b0 <UART_SetConfig+0x1180>
 80095a2:	4b80      	ldr	r3, [pc, #512]	; (80097a4 <UART_SetConfig+0x1374>)
 80095a4:	e004      	b.n	80095b0 <UART_SetConfig+0x1180>
 80095a6:	4b80      	ldr	r3, [pc, #512]	; (80097a8 <UART_SetConfig+0x1378>)
 80095a8:	e002      	b.n	80095b0 <UART_SetConfig+0x1180>
 80095aa:	4b80      	ldr	r3, [pc, #512]	; (80097ac <UART_SetConfig+0x137c>)
 80095ac:	e000      	b.n	80095b0 <UART_SetConfig+0x1180>
 80095ae:	4b75      	ldr	r3, [pc, #468]	; (8009784 <UART_SetConfig+0x1354>)
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	6852      	ldr	r2, [r2, #4]
 80095b4:	0852      	lsrs	r2, r2, #1
 80095b6:	441a      	add	r2, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80095c4:	e0bc      	b.n	8009740 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095c6:	f7fd f91f 	bl	8006808 <HAL_RCC_GetSysClockFreq>
 80095ca:	4602      	mov	r2, r0
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d044      	beq.n	800965e <UART_SetConfig+0x122e>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d03e      	beq.n	800965a <UART_SetConfig+0x122a>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e0:	2b02      	cmp	r3, #2
 80095e2:	d038      	beq.n	8009656 <UART_SetConfig+0x1226>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e8:	2b03      	cmp	r3, #3
 80095ea:	d032      	beq.n	8009652 <UART_SetConfig+0x1222>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f0:	2b04      	cmp	r3, #4
 80095f2:	d02c      	beq.n	800964e <UART_SetConfig+0x121e>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f8:	2b05      	cmp	r3, #5
 80095fa:	d026      	beq.n	800964a <UART_SetConfig+0x121a>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009600:	2b06      	cmp	r3, #6
 8009602:	d020      	beq.n	8009646 <UART_SetConfig+0x1216>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009608:	2b07      	cmp	r3, #7
 800960a:	d01a      	beq.n	8009642 <UART_SetConfig+0x1212>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009610:	2b08      	cmp	r3, #8
 8009612:	d014      	beq.n	800963e <UART_SetConfig+0x120e>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009618:	2b09      	cmp	r3, #9
 800961a:	d00e      	beq.n	800963a <UART_SetConfig+0x120a>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009620:	2b0a      	cmp	r3, #10
 8009622:	d008      	beq.n	8009636 <UART_SetConfig+0x1206>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009628:	2b0b      	cmp	r3, #11
 800962a:	d102      	bne.n	8009632 <UART_SetConfig+0x1202>
 800962c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009630:	e016      	b.n	8009660 <UART_SetConfig+0x1230>
 8009632:	2301      	movs	r3, #1
 8009634:	e014      	b.n	8009660 <UART_SetConfig+0x1230>
 8009636:	2380      	movs	r3, #128	; 0x80
 8009638:	e012      	b.n	8009660 <UART_SetConfig+0x1230>
 800963a:	2340      	movs	r3, #64	; 0x40
 800963c:	e010      	b.n	8009660 <UART_SetConfig+0x1230>
 800963e:	2320      	movs	r3, #32
 8009640:	e00e      	b.n	8009660 <UART_SetConfig+0x1230>
 8009642:	2310      	movs	r3, #16
 8009644:	e00c      	b.n	8009660 <UART_SetConfig+0x1230>
 8009646:	230c      	movs	r3, #12
 8009648:	e00a      	b.n	8009660 <UART_SetConfig+0x1230>
 800964a:	230a      	movs	r3, #10
 800964c:	e008      	b.n	8009660 <UART_SetConfig+0x1230>
 800964e:	2308      	movs	r3, #8
 8009650:	e006      	b.n	8009660 <UART_SetConfig+0x1230>
 8009652:	2306      	movs	r3, #6
 8009654:	e004      	b.n	8009660 <UART_SetConfig+0x1230>
 8009656:	2304      	movs	r3, #4
 8009658:	e002      	b.n	8009660 <UART_SetConfig+0x1230>
 800965a:	2302      	movs	r3, #2
 800965c:	e000      	b.n	8009660 <UART_SetConfig+0x1230>
 800965e:	2301      	movs	r3, #1
 8009660:	fbb2 f2f3 	udiv	r2, r2, r3
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	085b      	lsrs	r3, r3, #1
 800966a:	441a      	add	r2, r3
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	fbb2 f3f3 	udiv	r3, r2, r3
 8009674:	b29b      	uxth	r3, r3
 8009676:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8009678:	e062      	b.n	8009740 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800967e:	2b00      	cmp	r3, #0
 8009680:	d04e      	beq.n	8009720 <UART_SetConfig+0x12f0>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009686:	2b01      	cmp	r3, #1
 8009688:	d047      	beq.n	800971a <UART_SetConfig+0x12ea>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968e:	2b02      	cmp	r3, #2
 8009690:	d040      	beq.n	8009714 <UART_SetConfig+0x12e4>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009696:	2b03      	cmp	r3, #3
 8009698:	d039      	beq.n	800970e <UART_SetConfig+0x12de>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800969e:	2b04      	cmp	r3, #4
 80096a0:	d032      	beq.n	8009708 <UART_SetConfig+0x12d8>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a6:	2b05      	cmp	r3, #5
 80096a8:	d02b      	beq.n	8009702 <UART_SetConfig+0x12d2>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ae:	2b06      	cmp	r3, #6
 80096b0:	d024      	beq.n	80096fc <UART_SetConfig+0x12cc>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b6:	2b07      	cmp	r3, #7
 80096b8:	d01d      	beq.n	80096f6 <UART_SetConfig+0x12c6>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096be:	2b08      	cmp	r3, #8
 80096c0:	d016      	beq.n	80096f0 <UART_SetConfig+0x12c0>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c6:	2b09      	cmp	r3, #9
 80096c8:	d00f      	beq.n	80096ea <UART_SetConfig+0x12ba>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ce:	2b0a      	cmp	r3, #10
 80096d0:	d008      	beq.n	80096e4 <UART_SetConfig+0x12b4>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d6:	2b0b      	cmp	r3, #11
 80096d8:	d101      	bne.n	80096de <UART_SetConfig+0x12ae>
 80096da:	2380      	movs	r3, #128	; 0x80
 80096dc:	e022      	b.n	8009724 <UART_SetConfig+0x12f4>
 80096de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096e2:	e01f      	b.n	8009724 <UART_SetConfig+0x12f4>
 80096e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096e8:	e01c      	b.n	8009724 <UART_SetConfig+0x12f4>
 80096ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096ee:	e019      	b.n	8009724 <UART_SetConfig+0x12f4>
 80096f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096f4:	e016      	b.n	8009724 <UART_SetConfig+0x12f4>
 80096f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80096fa:	e013      	b.n	8009724 <UART_SetConfig+0x12f4>
 80096fc:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8009700:	e010      	b.n	8009724 <UART_SetConfig+0x12f4>
 8009702:	f640 43cc 	movw	r3, #3276	; 0xccc
 8009706:	e00d      	b.n	8009724 <UART_SetConfig+0x12f4>
 8009708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800970c:	e00a      	b.n	8009724 <UART_SetConfig+0x12f4>
 800970e:	f241 5355 	movw	r3, #5461	; 0x1555
 8009712:	e007      	b.n	8009724 <UART_SetConfig+0x12f4>
 8009714:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009718:	e004      	b.n	8009724 <UART_SetConfig+0x12f4>
 800971a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800971e:	e001      	b.n	8009724 <UART_SetConfig+0x12f4>
 8009720:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	6852      	ldr	r2, [r2, #4]
 8009728:	0852      	lsrs	r2, r2, #1
 800972a:	441a      	add	r2, r3
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	fbb2 f3f3 	udiv	r3, r2, r3
 8009734:	b29b      	uxth	r3, r3
 8009736:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8009738:	e002      	b.n	8009740 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800973a:	2301      	movs	r3, #1
 800973c:	74fb      	strb	r3, [r7, #19]
        break;
 800973e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	2b0f      	cmp	r3, #15
 8009744:	d908      	bls.n	8009758 <UART_SetConfig+0x1328>
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800974c:	d204      	bcs.n	8009758 <UART_SetConfig+0x1328>
    {
      huart->Instance->BRR = usartdiv;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	697a      	ldr	r2, [r7, #20]
 8009754:	60da      	str	r2, [r3, #12]
 8009756:	e001      	b.n	800975c <UART_SetConfig+0x132c>
    }
    else
    {
      ret = HAL_ERROR;
 8009758:	2301      	movs	r3, #1
 800975a:	74fb      	strb	r3, [r7, #19]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2201      	movs	r2, #1
 8009760:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2201      	movs	r2, #1
 8009768:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009778:	7cfb      	ldrb	r3, [r7, #19]
}
 800977a:	4618      	mov	r0, r3
 800977c:	3720      	adds	r7, #32
 800977e:	46bd      	mov	sp, r7
 8009780:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8009784:	00f42400 	.word	0x00f42400
 8009788:	0001e848 	.word	0x0001e848
 800978c:	0003d090 	.word	0x0003d090
 8009790:	0007a120 	.word	0x0007a120
 8009794:	000f4240 	.word	0x000f4240
 8009798:	00145855 	.word	0x00145855
 800979c:	00186a00 	.word	0x00186a00
 80097a0:	001e8480 	.word	0x001e8480
 80097a4:	0028b0aa 	.word	0x0028b0aa
 80097a8:	003d0900 	.word	0x003d0900
 80097ac:	007a1200 	.word	0x007a1200

080097b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b083      	sub	sp, #12
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097bc:	f003 0301 	and.w	r3, r3, #1
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d00a      	beq.n	80097da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	430a      	orrs	r2, r1
 80097d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097de:	f003 0302 	and.w	r3, r3, #2
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d00a      	beq.n	80097fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	430a      	orrs	r2, r1
 80097fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009800:	f003 0304 	and.w	r3, r3, #4
 8009804:	2b00      	cmp	r3, #0
 8009806:	d00a      	beq.n	800981e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	430a      	orrs	r2, r1
 800981c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009822:	f003 0308 	and.w	r3, r3, #8
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00a      	beq.n	8009840 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	430a      	orrs	r2, r1
 800983e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009844:	f003 0310 	and.w	r3, r3, #16
 8009848:	2b00      	cmp	r3, #0
 800984a:	d00a      	beq.n	8009862 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	430a      	orrs	r2, r1
 8009860:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009866:	f003 0320 	and.w	r3, r3, #32
 800986a:	2b00      	cmp	r3, #0
 800986c:	d00a      	beq.n	8009884 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	689b      	ldr	r3, [r3, #8]
 8009874:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	430a      	orrs	r2, r1
 8009882:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800988c:	2b00      	cmp	r3, #0
 800988e:	d01a      	beq.n	80098c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	430a      	orrs	r2, r1
 80098a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098ae:	d10a      	bne.n	80098c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	430a      	orrs	r2, r1
 80098c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d00a      	beq.n	80098e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	430a      	orrs	r2, r1
 80098e6:	605a      	str	r2, [r3, #4]
  }
}
 80098e8:	bf00      	nop
 80098ea:	370c      	adds	r7, #12
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b086      	sub	sp, #24
 80098f8:	af02      	add	r7, sp, #8
 80098fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009904:	f7fb fd7c 	bl	8005400 <HAL_GetTick>
 8009908:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f003 0308 	and.w	r3, r3, #8
 8009914:	2b08      	cmp	r3, #8
 8009916:	d10e      	bne.n	8009936 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009918:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800991c:	9300      	str	r3, [sp, #0]
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2200      	movs	r2, #0
 8009922:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 f82c 	bl	8009984 <UART_WaitOnFlagUntilTimeout>
 800992c:	4603      	mov	r3, r0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d001      	beq.n	8009936 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009932:	2303      	movs	r3, #3
 8009934:	e022      	b.n	800997c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f003 0304 	and.w	r3, r3, #4
 8009940:	2b04      	cmp	r3, #4
 8009942:	d10e      	bne.n	8009962 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009944:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009948:	9300      	str	r3, [sp, #0]
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2200      	movs	r2, #0
 800994e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 f816 	bl	8009984 <UART_WaitOnFlagUntilTimeout>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d001      	beq.n	8009962 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800995e:	2303      	movs	r3, #3
 8009960:	e00c      	b.n	800997c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2220      	movs	r2, #32
 8009966:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2220      	movs	r2, #32
 800996e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800997a:	2300      	movs	r3, #0
}
 800997c:	4618      	mov	r0, r3
 800997e:	3710      	adds	r7, #16
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b084      	sub	sp, #16
 8009988:	af00      	add	r7, sp, #0
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	60b9      	str	r1, [r7, #8]
 800998e:	603b      	str	r3, [r7, #0]
 8009990:	4613      	mov	r3, r2
 8009992:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009994:	e02c      	b.n	80099f0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009996:	69bb      	ldr	r3, [r7, #24]
 8009998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800999c:	d028      	beq.n	80099f0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800999e:	f7fb fd2f 	bl	8005400 <HAL_GetTick>
 80099a2:	4602      	mov	r2, r0
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	1ad3      	subs	r3, r2, r3
 80099a8:	69ba      	ldr	r2, [r7, #24]
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d302      	bcc.n	80099b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80099ae:	69bb      	ldr	r3, [r7, #24]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d11d      	bne.n	80099f0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80099c2:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	689a      	ldr	r2, [r3, #8]
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f022 0201 	bic.w	r2, r2, #1
 80099d2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2220      	movs	r2, #32
 80099d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2220      	movs	r2, #32
 80099e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2200      	movs	r2, #0
 80099e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80099ec:	2303      	movs	r3, #3
 80099ee:	e00f      	b.n	8009a10 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	69da      	ldr	r2, [r3, #28]
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	4013      	ands	r3, r2
 80099fa:	68ba      	ldr	r2, [r7, #8]
 80099fc:	429a      	cmp	r2, r3
 80099fe:	bf0c      	ite	eq
 8009a00:	2301      	moveq	r3, #1
 8009a02:	2300      	movne	r3, #0
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	461a      	mov	r2, r3
 8009a08:	79fb      	ldrb	r3, [r7, #7]
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d0c3      	beq.n	8009996 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009a0e:	2300      	movs	r3, #0
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3710      	adds	r7, #16
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b085      	sub	sp, #20
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d101      	bne.n	8009a2e <HAL_UARTEx_DisableFifoMode+0x16>
 8009a2a:	2302      	movs	r3, #2
 8009a2c:	e027      	b.n	8009a7e <HAL_UARTEx_DisableFifoMode+0x66>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2201      	movs	r2, #1
 8009a32:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2224      	movs	r2, #36	; 0x24
 8009a3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f022 0201 	bic.w	r2, r2, #1
 8009a54:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009a5c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2200      	movs	r2, #0
 8009a62:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	68fa      	ldr	r2, [r7, #12]
 8009a6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2220      	movs	r2, #32
 8009a70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009a7c:	2300      	movs	r3, #0
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3714      	adds	r7, #20
 8009a82:	46bd      	mov	sp, r7
 8009a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a88:	4770      	bx	lr

08009a8a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a8a:	b580      	push	{r7, lr}
 8009a8c:	b084      	sub	sp, #16
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
 8009a92:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009a9a:	2b01      	cmp	r3, #1
 8009a9c:	d101      	bne.n	8009aa2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009a9e:	2302      	movs	r3, #2
 8009aa0:	e02d      	b.n	8009afe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2224      	movs	r2, #36	; 0x24
 8009aae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	681a      	ldr	r2, [r3, #0]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f022 0201 	bic.w	r2, r2, #1
 8009ac8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	683a      	ldr	r2, [r7, #0]
 8009ada:	430a      	orrs	r2, r1
 8009adc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 f850 	bl	8009b84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	68fa      	ldr	r2, [r7, #12]
 8009aea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2220      	movs	r2, #32
 8009af0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2200      	movs	r2, #0
 8009af8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	b084      	sub	sp, #16
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
 8009b0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d101      	bne.n	8009b1e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009b1a:	2302      	movs	r3, #2
 8009b1c:	e02d      	b.n	8009b7a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2201      	movs	r2, #1
 8009b22:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2224      	movs	r2, #36	; 0x24
 8009b2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f022 0201 	bic.w	r2, r2, #1
 8009b44:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	683a      	ldr	r2, [r7, #0]
 8009b56:	430a      	orrs	r2, r1
 8009b58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 f812 	bl	8009b84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	68fa      	ldr	r2, [r7, #12]
 8009b66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2220      	movs	r2, #32
 8009b6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009b78:	2300      	movs	r3, #0
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3710      	adds	r7, #16
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
	...

08009b84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b089      	sub	sp, #36	; 0x24
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009b8c:	4a2f      	ldr	r2, [pc, #188]	; (8009c4c <UARTEx_SetNbDataToProcess+0xc8>)
 8009b8e:	f107 0314 	add.w	r3, r7, #20
 8009b92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009b96:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009b9a:	4a2d      	ldr	r2, [pc, #180]	; (8009c50 <UARTEx_SetNbDataToProcess+0xcc>)
 8009b9c:	f107 030c 	add.w	r3, r7, #12
 8009ba0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009ba4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d108      	bne.n	8009bc2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009bc0:	e03d      	b.n	8009c3e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009bc2:	2308      	movs	r3, #8
 8009bc4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009bc6:	2308      	movs	r3, #8
 8009bc8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	0e5b      	lsrs	r3, r3, #25
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	f003 0307 	and.w	r3, r3, #7
 8009bd8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	689b      	ldr	r3, [r3, #8]
 8009be0:	0f5b      	lsrs	r3, r3, #29
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	f003 0307 	and.w	r3, r3, #7
 8009be8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009bea:	7fbb      	ldrb	r3, [r7, #30]
 8009bec:	7f3a      	ldrb	r2, [r7, #28]
 8009bee:	f107 0120 	add.w	r1, r7, #32
 8009bf2:	440a      	add	r2, r1
 8009bf4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009bf8:	fb02 f303 	mul.w	r3, r2, r3
 8009bfc:	7f3a      	ldrb	r2, [r7, #28]
 8009bfe:	f107 0120 	add.w	r1, r7, #32
 8009c02:	440a      	add	r2, r1
 8009c04:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009c08:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c0c:	b29a      	uxth	r2, r3
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009c14:	7ffb      	ldrb	r3, [r7, #31]
 8009c16:	7f7a      	ldrb	r2, [r7, #29]
 8009c18:	f107 0120 	add.w	r1, r7, #32
 8009c1c:	440a      	add	r2, r1
 8009c1e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009c22:	fb02 f303 	mul.w	r3, r2, r3
 8009c26:	7f7a      	ldrb	r2, [r7, #29]
 8009c28:	f107 0120 	add.w	r1, r7, #32
 8009c2c:	440a      	add	r2, r1
 8009c2e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009c32:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c36:	b29a      	uxth	r2, r3
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009c3e:	bf00      	nop
 8009c40:	3724      	adds	r7, #36	; 0x24
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr
 8009c4a:	bf00      	nop
 8009c4c:	0800b4c8 	.word	0x0800b4c8
 8009c50:	0800b4d0 	.word	0x0800b4d0

08009c54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009c54:	b084      	sub	sp, #16
 8009c56:	b580      	push	{r7, lr}
 8009c58:	b084      	sub	sp, #16
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
 8009c5e:	f107 001c 	add.w	r0, r7, #28
 8009c62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d122      	bne.n	8009cb2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	68db      	ldr	r3, [r3, #12]
 8009c7c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009c80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d105      	bne.n	8009ca6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	68db      	ldr	r3, [r3, #12]
 8009c9e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 fa1e 	bl	800a0e8 <USB_CoreReset>
 8009cac:	4603      	mov	r3, r0
 8009cae:	73fb      	strb	r3, [r7, #15]
 8009cb0:	e01a      	b.n	8009ce8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	68db      	ldr	r3, [r3, #12]
 8009cb6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 fa12 	bl	800a0e8 <USB_CoreReset>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009cc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d106      	bne.n	8009cdc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cd2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	639a      	str	r2, [r3, #56]	; 0x38
 8009cda:	e005      	b.n	8009ce8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ce0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8009ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3710      	adds	r7, #16
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009cf4:	b004      	add	sp, #16
 8009cf6:	4770      	bx	lr

08009cf8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b083      	sub	sp, #12
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	f023 0201 	bic.w	r2, r3, #1
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009d0c:	2300      	movs	r3, #0
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	370c      	adds	r7, #12
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr

08009d1a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b082      	sub	sp, #8
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
 8009d22:	460b      	mov	r3, r1
 8009d24:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009d32:	78fb      	ldrb	r3, [r7, #3]
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d106      	bne.n	8009d46 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	68db      	ldr	r3, [r3, #12]
 8009d3c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	60da      	str	r2, [r3, #12]
 8009d44:	e00b      	b.n	8009d5e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009d46:	78fb      	ldrb	r3, [r7, #3]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d106      	bne.n	8009d5a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	60da      	str	r2, [r3, #12]
 8009d58:	e001      	b.n	8009d5e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	e003      	b.n	8009d66 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009d5e:	2032      	movs	r0, #50	; 0x32
 8009d60:	f7fb fb5a 	bl	8005418 <HAL_Delay>

  return HAL_OK;
 8009d64:	2300      	movs	r3, #0
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3708      	adds	r7, #8
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
	...

08009d70 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009d70:	b084      	sub	sp, #16
 8009d72:	b580      	push	{r7, lr}
 8009d74:	b086      	sub	sp, #24
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
 8009d7a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009d7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009d82:	2300      	movs	r3, #0
 8009d84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	613b      	str	r3, [r7, #16]
 8009d8e:	e009      	b.n	8009da4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	3340      	adds	r3, #64	; 0x40
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	4413      	add	r3, r2
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	3301      	adds	r3, #1
 8009da2:	613b      	str	r3, [r7, #16]
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	2b0e      	cmp	r3, #14
 8009da8:	d9f2      	bls.n	8009d90 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d112      	bne.n	8009dd6 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	601a      	str	r2, [r3, #0]
 8009dd4:	e005      	b.n	8009de2 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dda:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009de8:	461a      	mov	r2, r3
 8009dea:	2300      	movs	r3, #0
 8009dec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009df4:	4619      	mov	r1, r3
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	680b      	ldr	r3, [r1, #0]
 8009e00:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009e02:	2103      	movs	r1, #3
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 f93d 	bl	800a084 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009e0a:	2110      	movs	r1, #16
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 f8f1 	bl	8009ff4 <USB_FlushTxFifo>
 8009e12:	4603      	mov	r3, r0
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d001      	beq.n	8009e1c <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f000 f90f 	bl	800a040 <USB_FlushRxFifo>
 8009e22:	4603      	mov	r3, r0
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d001      	beq.n	8009e2c <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e32:	461a      	mov	r2, r3
 8009e34:	2300      	movs	r3, #0
 8009e36:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e3e:	461a      	mov	r2, r3
 8009e40:	2300      	movs	r3, #0
 8009e42:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e50:	2300      	movs	r3, #0
 8009e52:	613b      	str	r3, [r7, #16]
 8009e54:	e043      	b.n	8009ede <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	015a      	lsls	r2, r3, #5
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	4413      	add	r3, r2
 8009e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e6c:	d118      	bne.n	8009ea0 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d10a      	bne.n	8009e8a <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	015a      	lsls	r2, r3, #5
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	4413      	add	r3, r2
 8009e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e80:	461a      	mov	r2, r3
 8009e82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009e86:	6013      	str	r3, [r2, #0]
 8009e88:	e013      	b.n	8009eb2 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	015a      	lsls	r2, r3, #5
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	4413      	add	r3, r2
 8009e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e96:	461a      	mov	r2, r3
 8009e98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009e9c:	6013      	str	r3, [r2, #0]
 8009e9e:	e008      	b.n	8009eb2 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	015a      	lsls	r2, r3, #5
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	4413      	add	r3, r2
 8009ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eac:	461a      	mov	r2, r3
 8009eae:	2300      	movs	r3, #0
 8009eb0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	015a      	lsls	r2, r3, #5
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	4413      	add	r3, r2
 8009eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	015a      	lsls	r2, r3, #5
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	4413      	add	r3, r2
 8009ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009ed6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	3301      	adds	r3, #1
 8009edc:	613b      	str	r3, [r7, #16]
 8009ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee0:	693a      	ldr	r2, [r7, #16]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d3b7      	bcc.n	8009e56 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	613b      	str	r3, [r7, #16]
 8009eea:	e043      	b.n	8009f74 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	015a      	lsls	r2, r3, #5
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	4413      	add	r3, r2
 8009ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009efe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f02:	d118      	bne.n	8009f36 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d10a      	bne.n	8009f20 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	015a      	lsls	r2, r3, #5
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	4413      	add	r3, r2
 8009f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f16:	461a      	mov	r2, r3
 8009f18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009f1c:	6013      	str	r3, [r2, #0]
 8009f1e:	e013      	b.n	8009f48 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	015a      	lsls	r2, r3, #5
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	4413      	add	r3, r2
 8009f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009f32:	6013      	str	r3, [r2, #0]
 8009f34:	e008      	b.n	8009f48 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	015a      	lsls	r2, r3, #5
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	4413      	add	r3, r2
 8009f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f42:	461a      	mov	r2, r3
 8009f44:	2300      	movs	r3, #0
 8009f46:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	015a      	lsls	r2, r3, #5
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	4413      	add	r3, r2
 8009f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f54:	461a      	mov	r2, r3
 8009f56:	2300      	movs	r3, #0
 8009f58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	015a      	lsls	r2, r3, #5
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	4413      	add	r3, r2
 8009f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f66:	461a      	mov	r2, r3
 8009f68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009f6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	3301      	adds	r3, #1
 8009f72:	613b      	str	r3, [r7, #16]
 8009f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f76:	693a      	ldr	r2, [r7, #16]
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d3b7      	bcc.n	8009eec <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f82:	691b      	ldr	r3, [r3, #16]
 8009f84:	68fa      	ldr	r2, [r7, #12]
 8009f86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f8e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009f9c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	699b      	ldr	r3, [r3, #24]
 8009fa2:	f043 0210 	orr.w	r2, r3, #16
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	699a      	ldr	r2, [r3, #24]
 8009fae:	4b10      	ldr	r3, [pc, #64]	; (8009ff0 <USB_DevInit+0x280>)
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d005      	beq.n	8009fc8 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	699b      	ldr	r3, [r3, #24]
 8009fc0:	f043 0208 	orr.w	r2, r3, #8
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d107      	bne.n	8009fde <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	699b      	ldr	r3, [r3, #24]
 8009fd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009fd6:	f043 0304 	orr.w	r3, r3, #4
 8009fda:	687a      	ldr	r2, [r7, #4]
 8009fdc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3718      	adds	r7, #24
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009fea:	b004      	add	sp, #16
 8009fec:	4770      	bx	lr
 8009fee:	bf00      	nop
 8009ff0:	803c3800 	.word	0x803c3800

08009ff4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b085      	sub	sp, #20
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009ffe:	2300      	movs	r3, #0
 800a000:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	019b      	lsls	r3, r3, #6
 800a006:	f043 0220 	orr.w	r2, r3, #32
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	3301      	adds	r3, #1
 800a012:	60fb      	str	r3, [r7, #12]
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	4a09      	ldr	r2, [pc, #36]	; (800a03c <USB_FlushTxFifo+0x48>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d901      	bls.n	800a020 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a01c:	2303      	movs	r3, #3
 800a01e:	e006      	b.n	800a02e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	691b      	ldr	r3, [r3, #16]
 800a024:	f003 0320 	and.w	r3, r3, #32
 800a028:	2b20      	cmp	r3, #32
 800a02a:	d0f0      	beq.n	800a00e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a02c:	2300      	movs	r3, #0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3714      	adds	r7, #20
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	4770      	bx	lr
 800a03a:	bf00      	nop
 800a03c:	00030d40 	.word	0x00030d40

0800a040 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a040:	b480      	push	{r7}
 800a042:	b085      	sub	sp, #20
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a048:	2300      	movs	r3, #0
 800a04a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2210      	movs	r2, #16
 800a050:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	3301      	adds	r3, #1
 800a056:	60fb      	str	r3, [r7, #12]
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	4a09      	ldr	r2, [pc, #36]	; (800a080 <USB_FlushRxFifo+0x40>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d901      	bls.n	800a064 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a060:	2303      	movs	r3, #3
 800a062:	e006      	b.n	800a072 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	691b      	ldr	r3, [r3, #16]
 800a068:	f003 0310 	and.w	r3, r3, #16
 800a06c:	2b10      	cmp	r3, #16
 800a06e:	d0f0      	beq.n	800a052 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	3714      	adds	r7, #20
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr
 800a07e:	bf00      	nop
 800a080:	00030d40 	.word	0x00030d40

0800a084 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a084:	b480      	push	{r7}
 800a086:	b085      	sub	sp, #20
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	460b      	mov	r3, r1
 800a08e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a09a:	681a      	ldr	r2, [r3, #0]
 800a09c:	78fb      	ldrb	r3, [r7, #3]
 800a09e:	68f9      	ldr	r1, [r7, #12]
 800a0a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a0a8:	2300      	movs	r3, #0
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3714      	adds	r7, #20
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr

0800a0b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a0b6:	b580      	push	{r7, lr}
 800a0b8:	b084      	sub	sp, #16
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	68fa      	ldr	r2, [r7, #12]
 800a0cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0d0:	f043 0302 	orr.w	r3, r3, #2
 800a0d4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800a0d6:	2003      	movs	r0, #3
 800a0d8:	f7fb f99e 	bl	8005418 <HAL_Delay>

  return HAL_OK;
 800a0dc:	2300      	movs	r3, #0
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
	...

0800a0e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b085      	sub	sp, #20
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	60fb      	str	r3, [r7, #12]
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	4a13      	ldr	r2, [pc, #76]	; (800a14c <USB_CoreReset+0x64>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d901      	bls.n	800a106 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a102:	2303      	movs	r3, #3
 800a104:	e01b      	b.n	800a13e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	691b      	ldr	r3, [r3, #16]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	daf2      	bge.n	800a0f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a10e:	2300      	movs	r3, #0
 800a110:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	691b      	ldr	r3, [r3, #16]
 800a116:	f043 0201 	orr.w	r2, r3, #1
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	3301      	adds	r3, #1
 800a122:	60fb      	str	r3, [r7, #12]
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	4a09      	ldr	r2, [pc, #36]	; (800a14c <USB_CoreReset+0x64>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d901      	bls.n	800a130 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a12c:	2303      	movs	r3, #3
 800a12e:	e006      	b.n	800a13e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	691b      	ldr	r3, [r3, #16]
 800a134:	f003 0301 	and.w	r3, r3, #1
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d0f0      	beq.n	800a11e <USB_CoreReset+0x36>

  return HAL_OK;
 800a13c:	2300      	movs	r3, #0
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3714      	adds	r7, #20
 800a142:	46bd      	mov	sp, r7
 800a144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a148:	4770      	bx	lr
 800a14a:	bf00      	nop
 800a14c:	00030d40 	.word	0x00030d40

0800a150 <__assert_func>:
 800a150:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a152:	461c      	mov	r4, r3
 800a154:	4b09      	ldr	r3, [pc, #36]	; (800a17c <__assert_func+0x2c>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4605      	mov	r5, r0
 800a15a:	68d8      	ldr	r0, [r3, #12]
 800a15c:	b152      	cbz	r2, 800a174 <__assert_func+0x24>
 800a15e:	4b08      	ldr	r3, [pc, #32]	; (800a180 <__assert_func+0x30>)
 800a160:	9100      	str	r1, [sp, #0]
 800a162:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a166:	4907      	ldr	r1, [pc, #28]	; (800a184 <__assert_func+0x34>)
 800a168:	462b      	mov	r3, r5
 800a16a:	4622      	mov	r2, r4
 800a16c:	f000 f814 	bl	800a198 <fiprintf>
 800a170:	f000 fc70 	bl	800aa54 <abort>
 800a174:	4b04      	ldr	r3, [pc, #16]	; (800a188 <__assert_func+0x38>)
 800a176:	461a      	mov	r2, r3
 800a178:	e7f2      	b.n	800a160 <__assert_func+0x10>
 800a17a:	bf00      	nop
 800a17c:	20000070 	.word	0x20000070
 800a180:	0800bda4 	.word	0x0800bda4
 800a184:	0800bdb1 	.word	0x0800bdb1
 800a188:	0800bddf 	.word	0x0800bddf

0800a18c <__errno>:
 800a18c:	4b01      	ldr	r3, [pc, #4]	; (800a194 <__errno+0x8>)
 800a18e:	6818      	ldr	r0, [r3, #0]
 800a190:	4770      	bx	lr
 800a192:	bf00      	nop
 800a194:	20000070 	.word	0x20000070

0800a198 <fiprintf>:
 800a198:	b40e      	push	{r1, r2, r3}
 800a19a:	b503      	push	{r0, r1, lr}
 800a19c:	4601      	mov	r1, r0
 800a19e:	ab03      	add	r3, sp, #12
 800a1a0:	4805      	ldr	r0, [pc, #20]	; (800a1b8 <fiprintf+0x20>)
 800a1a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1a6:	6800      	ldr	r0, [r0, #0]
 800a1a8:	9301      	str	r3, [sp, #4]
 800a1aa:	f000 f867 	bl	800a27c <_vfiprintf_r>
 800a1ae:	b002      	add	sp, #8
 800a1b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1b4:	b003      	add	sp, #12
 800a1b6:	4770      	bx	lr
 800a1b8:	20000070 	.word	0x20000070

0800a1bc <__libc_init_array>:
 800a1bc:	b570      	push	{r4, r5, r6, lr}
 800a1be:	4e0d      	ldr	r6, [pc, #52]	; (800a1f4 <__libc_init_array+0x38>)
 800a1c0:	4c0d      	ldr	r4, [pc, #52]	; (800a1f8 <__libc_init_array+0x3c>)
 800a1c2:	1ba4      	subs	r4, r4, r6
 800a1c4:	10a4      	asrs	r4, r4, #2
 800a1c6:	2500      	movs	r5, #0
 800a1c8:	42a5      	cmp	r5, r4
 800a1ca:	d109      	bne.n	800a1e0 <__libc_init_array+0x24>
 800a1cc:	4e0b      	ldr	r6, [pc, #44]	; (800a1fc <__libc_init_array+0x40>)
 800a1ce:	4c0c      	ldr	r4, [pc, #48]	; (800a200 <__libc_init_array+0x44>)
 800a1d0:	f000 ffd0 	bl	800b174 <_init>
 800a1d4:	1ba4      	subs	r4, r4, r6
 800a1d6:	10a4      	asrs	r4, r4, #2
 800a1d8:	2500      	movs	r5, #0
 800a1da:	42a5      	cmp	r5, r4
 800a1dc:	d105      	bne.n	800a1ea <__libc_init_array+0x2e>
 800a1de:	bd70      	pop	{r4, r5, r6, pc}
 800a1e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a1e4:	4798      	blx	r3
 800a1e6:	3501      	adds	r5, #1
 800a1e8:	e7ee      	b.n	800a1c8 <__libc_init_array+0xc>
 800a1ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a1ee:	4798      	blx	r3
 800a1f0:	3501      	adds	r5, #1
 800a1f2:	e7f2      	b.n	800a1da <__libc_init_array+0x1e>
 800a1f4:	0800be80 	.word	0x0800be80
 800a1f8:	0800be80 	.word	0x0800be80
 800a1fc:	0800be80 	.word	0x0800be80
 800a200:	0800be84 	.word	0x0800be84

0800a204 <memcpy>:
 800a204:	b510      	push	{r4, lr}
 800a206:	1e43      	subs	r3, r0, #1
 800a208:	440a      	add	r2, r1
 800a20a:	4291      	cmp	r1, r2
 800a20c:	d100      	bne.n	800a210 <memcpy+0xc>
 800a20e:	bd10      	pop	{r4, pc}
 800a210:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a214:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a218:	e7f7      	b.n	800a20a <memcpy+0x6>

0800a21a <memset>:
 800a21a:	4402      	add	r2, r0
 800a21c:	4603      	mov	r3, r0
 800a21e:	4293      	cmp	r3, r2
 800a220:	d100      	bne.n	800a224 <memset+0xa>
 800a222:	4770      	bx	lr
 800a224:	f803 1b01 	strb.w	r1, [r3], #1
 800a228:	e7f9      	b.n	800a21e <memset+0x4>

0800a22a <__sfputc_r>:
 800a22a:	6893      	ldr	r3, [r2, #8]
 800a22c:	3b01      	subs	r3, #1
 800a22e:	2b00      	cmp	r3, #0
 800a230:	b410      	push	{r4}
 800a232:	6093      	str	r3, [r2, #8]
 800a234:	da08      	bge.n	800a248 <__sfputc_r+0x1e>
 800a236:	6994      	ldr	r4, [r2, #24]
 800a238:	42a3      	cmp	r3, r4
 800a23a:	db01      	blt.n	800a240 <__sfputc_r+0x16>
 800a23c:	290a      	cmp	r1, #10
 800a23e:	d103      	bne.n	800a248 <__sfputc_r+0x1e>
 800a240:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a244:	f000 bb46 	b.w	800a8d4 <__swbuf_r>
 800a248:	6813      	ldr	r3, [r2, #0]
 800a24a:	1c58      	adds	r0, r3, #1
 800a24c:	6010      	str	r0, [r2, #0]
 800a24e:	7019      	strb	r1, [r3, #0]
 800a250:	4608      	mov	r0, r1
 800a252:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <__sfputs_r>:
 800a258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a25a:	4606      	mov	r6, r0
 800a25c:	460f      	mov	r7, r1
 800a25e:	4614      	mov	r4, r2
 800a260:	18d5      	adds	r5, r2, r3
 800a262:	42ac      	cmp	r4, r5
 800a264:	d101      	bne.n	800a26a <__sfputs_r+0x12>
 800a266:	2000      	movs	r0, #0
 800a268:	e007      	b.n	800a27a <__sfputs_r+0x22>
 800a26a:	463a      	mov	r2, r7
 800a26c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a270:	4630      	mov	r0, r6
 800a272:	f7ff ffda 	bl	800a22a <__sfputc_r>
 800a276:	1c43      	adds	r3, r0, #1
 800a278:	d1f3      	bne.n	800a262 <__sfputs_r+0xa>
 800a27a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a27c <_vfiprintf_r>:
 800a27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a280:	460c      	mov	r4, r1
 800a282:	b09d      	sub	sp, #116	; 0x74
 800a284:	4617      	mov	r7, r2
 800a286:	461d      	mov	r5, r3
 800a288:	4606      	mov	r6, r0
 800a28a:	b118      	cbz	r0, 800a294 <_vfiprintf_r+0x18>
 800a28c:	6983      	ldr	r3, [r0, #24]
 800a28e:	b90b      	cbnz	r3, 800a294 <_vfiprintf_r+0x18>
 800a290:	f000 fcd8 	bl	800ac44 <__sinit>
 800a294:	4b7c      	ldr	r3, [pc, #496]	; (800a488 <_vfiprintf_r+0x20c>)
 800a296:	429c      	cmp	r4, r3
 800a298:	d158      	bne.n	800a34c <_vfiprintf_r+0xd0>
 800a29a:	6874      	ldr	r4, [r6, #4]
 800a29c:	89a3      	ldrh	r3, [r4, #12]
 800a29e:	0718      	lsls	r0, r3, #28
 800a2a0:	d55e      	bpl.n	800a360 <_vfiprintf_r+0xe4>
 800a2a2:	6923      	ldr	r3, [r4, #16]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d05b      	beq.n	800a360 <_vfiprintf_r+0xe4>
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	9309      	str	r3, [sp, #36]	; 0x24
 800a2ac:	2320      	movs	r3, #32
 800a2ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2b2:	2330      	movs	r3, #48	; 0x30
 800a2b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2b8:	9503      	str	r5, [sp, #12]
 800a2ba:	f04f 0b01 	mov.w	fp, #1
 800a2be:	46b8      	mov	r8, r7
 800a2c0:	4645      	mov	r5, r8
 800a2c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a2c6:	b10b      	cbz	r3, 800a2cc <_vfiprintf_r+0x50>
 800a2c8:	2b25      	cmp	r3, #37	; 0x25
 800a2ca:	d154      	bne.n	800a376 <_vfiprintf_r+0xfa>
 800a2cc:	ebb8 0a07 	subs.w	sl, r8, r7
 800a2d0:	d00b      	beq.n	800a2ea <_vfiprintf_r+0x6e>
 800a2d2:	4653      	mov	r3, sl
 800a2d4:	463a      	mov	r2, r7
 800a2d6:	4621      	mov	r1, r4
 800a2d8:	4630      	mov	r0, r6
 800a2da:	f7ff ffbd 	bl	800a258 <__sfputs_r>
 800a2de:	3001      	adds	r0, #1
 800a2e0:	f000 80c2 	beq.w	800a468 <_vfiprintf_r+0x1ec>
 800a2e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2e6:	4453      	add	r3, sl
 800a2e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a2ea:	f898 3000 	ldrb.w	r3, [r8]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	f000 80ba 	beq.w	800a468 <_vfiprintf_r+0x1ec>
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a2fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2fe:	9304      	str	r3, [sp, #16]
 800a300:	9307      	str	r3, [sp, #28]
 800a302:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a306:	931a      	str	r3, [sp, #104]	; 0x68
 800a308:	46a8      	mov	r8, r5
 800a30a:	2205      	movs	r2, #5
 800a30c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800a310:	485e      	ldr	r0, [pc, #376]	; (800a48c <_vfiprintf_r+0x210>)
 800a312:	f7f5 ff75 	bl	8000200 <memchr>
 800a316:	9b04      	ldr	r3, [sp, #16]
 800a318:	bb78      	cbnz	r0, 800a37a <_vfiprintf_r+0xfe>
 800a31a:	06d9      	lsls	r1, r3, #27
 800a31c:	bf44      	itt	mi
 800a31e:	2220      	movmi	r2, #32
 800a320:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a324:	071a      	lsls	r2, r3, #28
 800a326:	bf44      	itt	mi
 800a328:	222b      	movmi	r2, #43	; 0x2b
 800a32a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a32e:	782a      	ldrb	r2, [r5, #0]
 800a330:	2a2a      	cmp	r2, #42	; 0x2a
 800a332:	d02a      	beq.n	800a38a <_vfiprintf_r+0x10e>
 800a334:	9a07      	ldr	r2, [sp, #28]
 800a336:	46a8      	mov	r8, r5
 800a338:	2000      	movs	r0, #0
 800a33a:	250a      	movs	r5, #10
 800a33c:	4641      	mov	r1, r8
 800a33e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a342:	3b30      	subs	r3, #48	; 0x30
 800a344:	2b09      	cmp	r3, #9
 800a346:	d969      	bls.n	800a41c <_vfiprintf_r+0x1a0>
 800a348:	b360      	cbz	r0, 800a3a4 <_vfiprintf_r+0x128>
 800a34a:	e024      	b.n	800a396 <_vfiprintf_r+0x11a>
 800a34c:	4b50      	ldr	r3, [pc, #320]	; (800a490 <_vfiprintf_r+0x214>)
 800a34e:	429c      	cmp	r4, r3
 800a350:	d101      	bne.n	800a356 <_vfiprintf_r+0xda>
 800a352:	68b4      	ldr	r4, [r6, #8]
 800a354:	e7a2      	b.n	800a29c <_vfiprintf_r+0x20>
 800a356:	4b4f      	ldr	r3, [pc, #316]	; (800a494 <_vfiprintf_r+0x218>)
 800a358:	429c      	cmp	r4, r3
 800a35a:	bf08      	it	eq
 800a35c:	68f4      	ldreq	r4, [r6, #12]
 800a35e:	e79d      	b.n	800a29c <_vfiprintf_r+0x20>
 800a360:	4621      	mov	r1, r4
 800a362:	4630      	mov	r0, r6
 800a364:	f000 fb08 	bl	800a978 <__swsetup_r>
 800a368:	2800      	cmp	r0, #0
 800a36a:	d09d      	beq.n	800a2a8 <_vfiprintf_r+0x2c>
 800a36c:	f04f 30ff 	mov.w	r0, #4294967295
 800a370:	b01d      	add	sp, #116	; 0x74
 800a372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a376:	46a8      	mov	r8, r5
 800a378:	e7a2      	b.n	800a2c0 <_vfiprintf_r+0x44>
 800a37a:	4a44      	ldr	r2, [pc, #272]	; (800a48c <_vfiprintf_r+0x210>)
 800a37c:	1a80      	subs	r0, r0, r2
 800a37e:	fa0b f000 	lsl.w	r0, fp, r0
 800a382:	4318      	orrs	r0, r3
 800a384:	9004      	str	r0, [sp, #16]
 800a386:	4645      	mov	r5, r8
 800a388:	e7be      	b.n	800a308 <_vfiprintf_r+0x8c>
 800a38a:	9a03      	ldr	r2, [sp, #12]
 800a38c:	1d11      	adds	r1, r2, #4
 800a38e:	6812      	ldr	r2, [r2, #0]
 800a390:	9103      	str	r1, [sp, #12]
 800a392:	2a00      	cmp	r2, #0
 800a394:	db01      	blt.n	800a39a <_vfiprintf_r+0x11e>
 800a396:	9207      	str	r2, [sp, #28]
 800a398:	e004      	b.n	800a3a4 <_vfiprintf_r+0x128>
 800a39a:	4252      	negs	r2, r2
 800a39c:	f043 0302 	orr.w	r3, r3, #2
 800a3a0:	9207      	str	r2, [sp, #28]
 800a3a2:	9304      	str	r3, [sp, #16]
 800a3a4:	f898 3000 	ldrb.w	r3, [r8]
 800a3a8:	2b2e      	cmp	r3, #46	; 0x2e
 800a3aa:	d10e      	bne.n	800a3ca <_vfiprintf_r+0x14e>
 800a3ac:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a3b0:	2b2a      	cmp	r3, #42	; 0x2a
 800a3b2:	d138      	bne.n	800a426 <_vfiprintf_r+0x1aa>
 800a3b4:	9b03      	ldr	r3, [sp, #12]
 800a3b6:	1d1a      	adds	r2, r3, #4
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	9203      	str	r2, [sp, #12]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	bfb8      	it	lt
 800a3c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3c4:	f108 0802 	add.w	r8, r8, #2
 800a3c8:	9305      	str	r3, [sp, #20]
 800a3ca:	4d33      	ldr	r5, [pc, #204]	; (800a498 <_vfiprintf_r+0x21c>)
 800a3cc:	f898 1000 	ldrb.w	r1, [r8]
 800a3d0:	2203      	movs	r2, #3
 800a3d2:	4628      	mov	r0, r5
 800a3d4:	f7f5 ff14 	bl	8000200 <memchr>
 800a3d8:	b140      	cbz	r0, 800a3ec <_vfiprintf_r+0x170>
 800a3da:	2340      	movs	r3, #64	; 0x40
 800a3dc:	1b40      	subs	r0, r0, r5
 800a3de:	fa03 f000 	lsl.w	r0, r3, r0
 800a3e2:	9b04      	ldr	r3, [sp, #16]
 800a3e4:	4303      	orrs	r3, r0
 800a3e6:	f108 0801 	add.w	r8, r8, #1
 800a3ea:	9304      	str	r3, [sp, #16]
 800a3ec:	f898 1000 	ldrb.w	r1, [r8]
 800a3f0:	482a      	ldr	r0, [pc, #168]	; (800a49c <_vfiprintf_r+0x220>)
 800a3f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3f6:	2206      	movs	r2, #6
 800a3f8:	f108 0701 	add.w	r7, r8, #1
 800a3fc:	f7f5 ff00 	bl	8000200 <memchr>
 800a400:	2800      	cmp	r0, #0
 800a402:	d037      	beq.n	800a474 <_vfiprintf_r+0x1f8>
 800a404:	4b26      	ldr	r3, [pc, #152]	; (800a4a0 <_vfiprintf_r+0x224>)
 800a406:	bb1b      	cbnz	r3, 800a450 <_vfiprintf_r+0x1d4>
 800a408:	9b03      	ldr	r3, [sp, #12]
 800a40a:	3307      	adds	r3, #7
 800a40c:	f023 0307 	bic.w	r3, r3, #7
 800a410:	3308      	adds	r3, #8
 800a412:	9303      	str	r3, [sp, #12]
 800a414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a416:	444b      	add	r3, r9
 800a418:	9309      	str	r3, [sp, #36]	; 0x24
 800a41a:	e750      	b.n	800a2be <_vfiprintf_r+0x42>
 800a41c:	fb05 3202 	mla	r2, r5, r2, r3
 800a420:	2001      	movs	r0, #1
 800a422:	4688      	mov	r8, r1
 800a424:	e78a      	b.n	800a33c <_vfiprintf_r+0xc0>
 800a426:	2300      	movs	r3, #0
 800a428:	f108 0801 	add.w	r8, r8, #1
 800a42c:	9305      	str	r3, [sp, #20]
 800a42e:	4619      	mov	r1, r3
 800a430:	250a      	movs	r5, #10
 800a432:	4640      	mov	r0, r8
 800a434:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a438:	3a30      	subs	r2, #48	; 0x30
 800a43a:	2a09      	cmp	r2, #9
 800a43c:	d903      	bls.n	800a446 <_vfiprintf_r+0x1ca>
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d0c3      	beq.n	800a3ca <_vfiprintf_r+0x14e>
 800a442:	9105      	str	r1, [sp, #20]
 800a444:	e7c1      	b.n	800a3ca <_vfiprintf_r+0x14e>
 800a446:	fb05 2101 	mla	r1, r5, r1, r2
 800a44a:	2301      	movs	r3, #1
 800a44c:	4680      	mov	r8, r0
 800a44e:	e7f0      	b.n	800a432 <_vfiprintf_r+0x1b6>
 800a450:	ab03      	add	r3, sp, #12
 800a452:	9300      	str	r3, [sp, #0]
 800a454:	4622      	mov	r2, r4
 800a456:	4b13      	ldr	r3, [pc, #76]	; (800a4a4 <_vfiprintf_r+0x228>)
 800a458:	a904      	add	r1, sp, #16
 800a45a:	4630      	mov	r0, r6
 800a45c:	f3af 8000 	nop.w
 800a460:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a464:	4681      	mov	r9, r0
 800a466:	d1d5      	bne.n	800a414 <_vfiprintf_r+0x198>
 800a468:	89a3      	ldrh	r3, [r4, #12]
 800a46a:	065b      	lsls	r3, r3, #25
 800a46c:	f53f af7e 	bmi.w	800a36c <_vfiprintf_r+0xf0>
 800a470:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a472:	e77d      	b.n	800a370 <_vfiprintf_r+0xf4>
 800a474:	ab03      	add	r3, sp, #12
 800a476:	9300      	str	r3, [sp, #0]
 800a478:	4622      	mov	r2, r4
 800a47a:	4b0a      	ldr	r3, [pc, #40]	; (800a4a4 <_vfiprintf_r+0x228>)
 800a47c:	a904      	add	r1, sp, #16
 800a47e:	4630      	mov	r0, r6
 800a480:	f000 f888 	bl	800a594 <_printf_i>
 800a484:	e7ec      	b.n	800a460 <_vfiprintf_r+0x1e4>
 800a486:	bf00      	nop
 800a488:	0800be38 	.word	0x0800be38
 800a48c:	0800bde4 	.word	0x0800bde4
 800a490:	0800be58 	.word	0x0800be58
 800a494:	0800be18 	.word	0x0800be18
 800a498:	0800bdea 	.word	0x0800bdea
 800a49c:	0800bdee 	.word	0x0800bdee
 800a4a0:	00000000 	.word	0x00000000
 800a4a4:	0800a259 	.word	0x0800a259

0800a4a8 <_printf_common>:
 800a4a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4ac:	4691      	mov	r9, r2
 800a4ae:	461f      	mov	r7, r3
 800a4b0:	688a      	ldr	r2, [r1, #8]
 800a4b2:	690b      	ldr	r3, [r1, #16]
 800a4b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	bfb8      	it	lt
 800a4bc:	4613      	movlt	r3, r2
 800a4be:	f8c9 3000 	str.w	r3, [r9]
 800a4c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a4c6:	4606      	mov	r6, r0
 800a4c8:	460c      	mov	r4, r1
 800a4ca:	b112      	cbz	r2, 800a4d2 <_printf_common+0x2a>
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	f8c9 3000 	str.w	r3, [r9]
 800a4d2:	6823      	ldr	r3, [r4, #0]
 800a4d4:	0699      	lsls	r1, r3, #26
 800a4d6:	bf42      	ittt	mi
 800a4d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a4dc:	3302      	addmi	r3, #2
 800a4de:	f8c9 3000 	strmi.w	r3, [r9]
 800a4e2:	6825      	ldr	r5, [r4, #0]
 800a4e4:	f015 0506 	ands.w	r5, r5, #6
 800a4e8:	d107      	bne.n	800a4fa <_printf_common+0x52>
 800a4ea:	f104 0a19 	add.w	sl, r4, #25
 800a4ee:	68e3      	ldr	r3, [r4, #12]
 800a4f0:	f8d9 2000 	ldr.w	r2, [r9]
 800a4f4:	1a9b      	subs	r3, r3, r2
 800a4f6:	42ab      	cmp	r3, r5
 800a4f8:	dc28      	bgt.n	800a54c <_printf_common+0xa4>
 800a4fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a4fe:	6822      	ldr	r2, [r4, #0]
 800a500:	3300      	adds	r3, #0
 800a502:	bf18      	it	ne
 800a504:	2301      	movne	r3, #1
 800a506:	0692      	lsls	r2, r2, #26
 800a508:	d42d      	bmi.n	800a566 <_printf_common+0xbe>
 800a50a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a50e:	4639      	mov	r1, r7
 800a510:	4630      	mov	r0, r6
 800a512:	47c0      	blx	r8
 800a514:	3001      	adds	r0, #1
 800a516:	d020      	beq.n	800a55a <_printf_common+0xb2>
 800a518:	6823      	ldr	r3, [r4, #0]
 800a51a:	68e5      	ldr	r5, [r4, #12]
 800a51c:	f8d9 2000 	ldr.w	r2, [r9]
 800a520:	f003 0306 	and.w	r3, r3, #6
 800a524:	2b04      	cmp	r3, #4
 800a526:	bf08      	it	eq
 800a528:	1aad      	subeq	r5, r5, r2
 800a52a:	68a3      	ldr	r3, [r4, #8]
 800a52c:	6922      	ldr	r2, [r4, #16]
 800a52e:	bf0c      	ite	eq
 800a530:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a534:	2500      	movne	r5, #0
 800a536:	4293      	cmp	r3, r2
 800a538:	bfc4      	itt	gt
 800a53a:	1a9b      	subgt	r3, r3, r2
 800a53c:	18ed      	addgt	r5, r5, r3
 800a53e:	f04f 0900 	mov.w	r9, #0
 800a542:	341a      	adds	r4, #26
 800a544:	454d      	cmp	r5, r9
 800a546:	d11a      	bne.n	800a57e <_printf_common+0xd6>
 800a548:	2000      	movs	r0, #0
 800a54a:	e008      	b.n	800a55e <_printf_common+0xb6>
 800a54c:	2301      	movs	r3, #1
 800a54e:	4652      	mov	r2, sl
 800a550:	4639      	mov	r1, r7
 800a552:	4630      	mov	r0, r6
 800a554:	47c0      	blx	r8
 800a556:	3001      	adds	r0, #1
 800a558:	d103      	bne.n	800a562 <_printf_common+0xba>
 800a55a:	f04f 30ff 	mov.w	r0, #4294967295
 800a55e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a562:	3501      	adds	r5, #1
 800a564:	e7c3      	b.n	800a4ee <_printf_common+0x46>
 800a566:	18e1      	adds	r1, r4, r3
 800a568:	1c5a      	adds	r2, r3, #1
 800a56a:	2030      	movs	r0, #48	; 0x30
 800a56c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a570:	4422      	add	r2, r4
 800a572:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a576:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a57a:	3302      	adds	r3, #2
 800a57c:	e7c5      	b.n	800a50a <_printf_common+0x62>
 800a57e:	2301      	movs	r3, #1
 800a580:	4622      	mov	r2, r4
 800a582:	4639      	mov	r1, r7
 800a584:	4630      	mov	r0, r6
 800a586:	47c0      	blx	r8
 800a588:	3001      	adds	r0, #1
 800a58a:	d0e6      	beq.n	800a55a <_printf_common+0xb2>
 800a58c:	f109 0901 	add.w	r9, r9, #1
 800a590:	e7d8      	b.n	800a544 <_printf_common+0x9c>
	...

0800a594 <_printf_i>:
 800a594:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a598:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a59c:	460c      	mov	r4, r1
 800a59e:	7e09      	ldrb	r1, [r1, #24]
 800a5a0:	b085      	sub	sp, #20
 800a5a2:	296e      	cmp	r1, #110	; 0x6e
 800a5a4:	4617      	mov	r7, r2
 800a5a6:	4606      	mov	r6, r0
 800a5a8:	4698      	mov	r8, r3
 800a5aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a5ac:	f000 80b3 	beq.w	800a716 <_printf_i+0x182>
 800a5b0:	d822      	bhi.n	800a5f8 <_printf_i+0x64>
 800a5b2:	2963      	cmp	r1, #99	; 0x63
 800a5b4:	d036      	beq.n	800a624 <_printf_i+0x90>
 800a5b6:	d80a      	bhi.n	800a5ce <_printf_i+0x3a>
 800a5b8:	2900      	cmp	r1, #0
 800a5ba:	f000 80b9 	beq.w	800a730 <_printf_i+0x19c>
 800a5be:	2958      	cmp	r1, #88	; 0x58
 800a5c0:	f000 8083 	beq.w	800a6ca <_printf_i+0x136>
 800a5c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5c8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a5cc:	e032      	b.n	800a634 <_printf_i+0xa0>
 800a5ce:	2964      	cmp	r1, #100	; 0x64
 800a5d0:	d001      	beq.n	800a5d6 <_printf_i+0x42>
 800a5d2:	2969      	cmp	r1, #105	; 0x69
 800a5d4:	d1f6      	bne.n	800a5c4 <_printf_i+0x30>
 800a5d6:	6820      	ldr	r0, [r4, #0]
 800a5d8:	6813      	ldr	r3, [r2, #0]
 800a5da:	0605      	lsls	r5, r0, #24
 800a5dc:	f103 0104 	add.w	r1, r3, #4
 800a5e0:	d52a      	bpl.n	800a638 <_printf_i+0xa4>
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	6011      	str	r1, [r2, #0]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	da03      	bge.n	800a5f2 <_printf_i+0x5e>
 800a5ea:	222d      	movs	r2, #45	; 0x2d
 800a5ec:	425b      	negs	r3, r3
 800a5ee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a5f2:	486f      	ldr	r0, [pc, #444]	; (800a7b0 <_printf_i+0x21c>)
 800a5f4:	220a      	movs	r2, #10
 800a5f6:	e039      	b.n	800a66c <_printf_i+0xd8>
 800a5f8:	2973      	cmp	r1, #115	; 0x73
 800a5fa:	f000 809d 	beq.w	800a738 <_printf_i+0x1a4>
 800a5fe:	d808      	bhi.n	800a612 <_printf_i+0x7e>
 800a600:	296f      	cmp	r1, #111	; 0x6f
 800a602:	d020      	beq.n	800a646 <_printf_i+0xb2>
 800a604:	2970      	cmp	r1, #112	; 0x70
 800a606:	d1dd      	bne.n	800a5c4 <_printf_i+0x30>
 800a608:	6823      	ldr	r3, [r4, #0]
 800a60a:	f043 0320 	orr.w	r3, r3, #32
 800a60e:	6023      	str	r3, [r4, #0]
 800a610:	e003      	b.n	800a61a <_printf_i+0x86>
 800a612:	2975      	cmp	r1, #117	; 0x75
 800a614:	d017      	beq.n	800a646 <_printf_i+0xb2>
 800a616:	2978      	cmp	r1, #120	; 0x78
 800a618:	d1d4      	bne.n	800a5c4 <_printf_i+0x30>
 800a61a:	2378      	movs	r3, #120	; 0x78
 800a61c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a620:	4864      	ldr	r0, [pc, #400]	; (800a7b4 <_printf_i+0x220>)
 800a622:	e055      	b.n	800a6d0 <_printf_i+0x13c>
 800a624:	6813      	ldr	r3, [r2, #0]
 800a626:	1d19      	adds	r1, r3, #4
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	6011      	str	r1, [r2, #0]
 800a62c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a630:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a634:	2301      	movs	r3, #1
 800a636:	e08c      	b.n	800a752 <_printf_i+0x1be>
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	6011      	str	r1, [r2, #0]
 800a63c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a640:	bf18      	it	ne
 800a642:	b21b      	sxthne	r3, r3
 800a644:	e7cf      	b.n	800a5e6 <_printf_i+0x52>
 800a646:	6813      	ldr	r3, [r2, #0]
 800a648:	6825      	ldr	r5, [r4, #0]
 800a64a:	1d18      	adds	r0, r3, #4
 800a64c:	6010      	str	r0, [r2, #0]
 800a64e:	0628      	lsls	r0, r5, #24
 800a650:	d501      	bpl.n	800a656 <_printf_i+0xc2>
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	e002      	b.n	800a65c <_printf_i+0xc8>
 800a656:	0668      	lsls	r0, r5, #25
 800a658:	d5fb      	bpl.n	800a652 <_printf_i+0xbe>
 800a65a:	881b      	ldrh	r3, [r3, #0]
 800a65c:	4854      	ldr	r0, [pc, #336]	; (800a7b0 <_printf_i+0x21c>)
 800a65e:	296f      	cmp	r1, #111	; 0x6f
 800a660:	bf14      	ite	ne
 800a662:	220a      	movne	r2, #10
 800a664:	2208      	moveq	r2, #8
 800a666:	2100      	movs	r1, #0
 800a668:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a66c:	6865      	ldr	r5, [r4, #4]
 800a66e:	60a5      	str	r5, [r4, #8]
 800a670:	2d00      	cmp	r5, #0
 800a672:	f2c0 8095 	blt.w	800a7a0 <_printf_i+0x20c>
 800a676:	6821      	ldr	r1, [r4, #0]
 800a678:	f021 0104 	bic.w	r1, r1, #4
 800a67c:	6021      	str	r1, [r4, #0]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d13d      	bne.n	800a6fe <_printf_i+0x16a>
 800a682:	2d00      	cmp	r5, #0
 800a684:	f040 808e 	bne.w	800a7a4 <_printf_i+0x210>
 800a688:	4665      	mov	r5, ip
 800a68a:	2a08      	cmp	r2, #8
 800a68c:	d10b      	bne.n	800a6a6 <_printf_i+0x112>
 800a68e:	6823      	ldr	r3, [r4, #0]
 800a690:	07db      	lsls	r3, r3, #31
 800a692:	d508      	bpl.n	800a6a6 <_printf_i+0x112>
 800a694:	6923      	ldr	r3, [r4, #16]
 800a696:	6862      	ldr	r2, [r4, #4]
 800a698:	429a      	cmp	r2, r3
 800a69a:	bfde      	ittt	le
 800a69c:	2330      	movle	r3, #48	; 0x30
 800a69e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a6a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a6a6:	ebac 0305 	sub.w	r3, ip, r5
 800a6aa:	6123      	str	r3, [r4, #16]
 800a6ac:	f8cd 8000 	str.w	r8, [sp]
 800a6b0:	463b      	mov	r3, r7
 800a6b2:	aa03      	add	r2, sp, #12
 800a6b4:	4621      	mov	r1, r4
 800a6b6:	4630      	mov	r0, r6
 800a6b8:	f7ff fef6 	bl	800a4a8 <_printf_common>
 800a6bc:	3001      	adds	r0, #1
 800a6be:	d14d      	bne.n	800a75c <_printf_i+0x1c8>
 800a6c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a6c4:	b005      	add	sp, #20
 800a6c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6ca:	4839      	ldr	r0, [pc, #228]	; (800a7b0 <_printf_i+0x21c>)
 800a6cc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a6d0:	6813      	ldr	r3, [r2, #0]
 800a6d2:	6821      	ldr	r1, [r4, #0]
 800a6d4:	1d1d      	adds	r5, r3, #4
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	6015      	str	r5, [r2, #0]
 800a6da:	060a      	lsls	r2, r1, #24
 800a6dc:	d50b      	bpl.n	800a6f6 <_printf_i+0x162>
 800a6de:	07ca      	lsls	r2, r1, #31
 800a6e0:	bf44      	itt	mi
 800a6e2:	f041 0120 	orrmi.w	r1, r1, #32
 800a6e6:	6021      	strmi	r1, [r4, #0]
 800a6e8:	b91b      	cbnz	r3, 800a6f2 <_printf_i+0x15e>
 800a6ea:	6822      	ldr	r2, [r4, #0]
 800a6ec:	f022 0220 	bic.w	r2, r2, #32
 800a6f0:	6022      	str	r2, [r4, #0]
 800a6f2:	2210      	movs	r2, #16
 800a6f4:	e7b7      	b.n	800a666 <_printf_i+0xd2>
 800a6f6:	064d      	lsls	r5, r1, #25
 800a6f8:	bf48      	it	mi
 800a6fa:	b29b      	uxthmi	r3, r3
 800a6fc:	e7ef      	b.n	800a6de <_printf_i+0x14a>
 800a6fe:	4665      	mov	r5, ip
 800a700:	fbb3 f1f2 	udiv	r1, r3, r2
 800a704:	fb02 3311 	mls	r3, r2, r1, r3
 800a708:	5cc3      	ldrb	r3, [r0, r3]
 800a70a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a70e:	460b      	mov	r3, r1
 800a710:	2900      	cmp	r1, #0
 800a712:	d1f5      	bne.n	800a700 <_printf_i+0x16c>
 800a714:	e7b9      	b.n	800a68a <_printf_i+0xf6>
 800a716:	6813      	ldr	r3, [r2, #0]
 800a718:	6825      	ldr	r5, [r4, #0]
 800a71a:	6961      	ldr	r1, [r4, #20]
 800a71c:	1d18      	adds	r0, r3, #4
 800a71e:	6010      	str	r0, [r2, #0]
 800a720:	0628      	lsls	r0, r5, #24
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	d501      	bpl.n	800a72a <_printf_i+0x196>
 800a726:	6019      	str	r1, [r3, #0]
 800a728:	e002      	b.n	800a730 <_printf_i+0x19c>
 800a72a:	066a      	lsls	r2, r5, #25
 800a72c:	d5fb      	bpl.n	800a726 <_printf_i+0x192>
 800a72e:	8019      	strh	r1, [r3, #0]
 800a730:	2300      	movs	r3, #0
 800a732:	6123      	str	r3, [r4, #16]
 800a734:	4665      	mov	r5, ip
 800a736:	e7b9      	b.n	800a6ac <_printf_i+0x118>
 800a738:	6813      	ldr	r3, [r2, #0]
 800a73a:	1d19      	adds	r1, r3, #4
 800a73c:	6011      	str	r1, [r2, #0]
 800a73e:	681d      	ldr	r5, [r3, #0]
 800a740:	6862      	ldr	r2, [r4, #4]
 800a742:	2100      	movs	r1, #0
 800a744:	4628      	mov	r0, r5
 800a746:	f7f5 fd5b 	bl	8000200 <memchr>
 800a74a:	b108      	cbz	r0, 800a750 <_printf_i+0x1bc>
 800a74c:	1b40      	subs	r0, r0, r5
 800a74e:	6060      	str	r0, [r4, #4]
 800a750:	6863      	ldr	r3, [r4, #4]
 800a752:	6123      	str	r3, [r4, #16]
 800a754:	2300      	movs	r3, #0
 800a756:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a75a:	e7a7      	b.n	800a6ac <_printf_i+0x118>
 800a75c:	6923      	ldr	r3, [r4, #16]
 800a75e:	462a      	mov	r2, r5
 800a760:	4639      	mov	r1, r7
 800a762:	4630      	mov	r0, r6
 800a764:	47c0      	blx	r8
 800a766:	3001      	adds	r0, #1
 800a768:	d0aa      	beq.n	800a6c0 <_printf_i+0x12c>
 800a76a:	6823      	ldr	r3, [r4, #0]
 800a76c:	079b      	lsls	r3, r3, #30
 800a76e:	d413      	bmi.n	800a798 <_printf_i+0x204>
 800a770:	68e0      	ldr	r0, [r4, #12]
 800a772:	9b03      	ldr	r3, [sp, #12]
 800a774:	4298      	cmp	r0, r3
 800a776:	bfb8      	it	lt
 800a778:	4618      	movlt	r0, r3
 800a77a:	e7a3      	b.n	800a6c4 <_printf_i+0x130>
 800a77c:	2301      	movs	r3, #1
 800a77e:	464a      	mov	r2, r9
 800a780:	4639      	mov	r1, r7
 800a782:	4630      	mov	r0, r6
 800a784:	47c0      	blx	r8
 800a786:	3001      	adds	r0, #1
 800a788:	d09a      	beq.n	800a6c0 <_printf_i+0x12c>
 800a78a:	3501      	adds	r5, #1
 800a78c:	68e3      	ldr	r3, [r4, #12]
 800a78e:	9a03      	ldr	r2, [sp, #12]
 800a790:	1a9b      	subs	r3, r3, r2
 800a792:	42ab      	cmp	r3, r5
 800a794:	dcf2      	bgt.n	800a77c <_printf_i+0x1e8>
 800a796:	e7eb      	b.n	800a770 <_printf_i+0x1dc>
 800a798:	2500      	movs	r5, #0
 800a79a:	f104 0919 	add.w	r9, r4, #25
 800a79e:	e7f5      	b.n	800a78c <_printf_i+0x1f8>
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d1ac      	bne.n	800a6fe <_printf_i+0x16a>
 800a7a4:	7803      	ldrb	r3, [r0, #0]
 800a7a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a7aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7ae:	e76c      	b.n	800a68a <_printf_i+0xf6>
 800a7b0:	0800bdf5 	.word	0x0800bdf5
 800a7b4:	0800be06 	.word	0x0800be06

0800a7b8 <iprintf>:
 800a7b8:	b40f      	push	{r0, r1, r2, r3}
 800a7ba:	4b0a      	ldr	r3, [pc, #40]	; (800a7e4 <iprintf+0x2c>)
 800a7bc:	b513      	push	{r0, r1, r4, lr}
 800a7be:	681c      	ldr	r4, [r3, #0]
 800a7c0:	b124      	cbz	r4, 800a7cc <iprintf+0x14>
 800a7c2:	69a3      	ldr	r3, [r4, #24]
 800a7c4:	b913      	cbnz	r3, 800a7cc <iprintf+0x14>
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	f000 fa3c 	bl	800ac44 <__sinit>
 800a7cc:	ab05      	add	r3, sp, #20
 800a7ce:	9a04      	ldr	r2, [sp, #16]
 800a7d0:	68a1      	ldr	r1, [r4, #8]
 800a7d2:	9301      	str	r3, [sp, #4]
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	f7ff fd51 	bl	800a27c <_vfiprintf_r>
 800a7da:	b002      	add	sp, #8
 800a7dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7e0:	b004      	add	sp, #16
 800a7e2:	4770      	bx	lr
 800a7e4:	20000070 	.word	0x20000070

0800a7e8 <_puts_r>:
 800a7e8:	b570      	push	{r4, r5, r6, lr}
 800a7ea:	460e      	mov	r6, r1
 800a7ec:	4605      	mov	r5, r0
 800a7ee:	b118      	cbz	r0, 800a7f8 <_puts_r+0x10>
 800a7f0:	6983      	ldr	r3, [r0, #24]
 800a7f2:	b90b      	cbnz	r3, 800a7f8 <_puts_r+0x10>
 800a7f4:	f000 fa26 	bl	800ac44 <__sinit>
 800a7f8:	69ab      	ldr	r3, [r5, #24]
 800a7fa:	68ac      	ldr	r4, [r5, #8]
 800a7fc:	b913      	cbnz	r3, 800a804 <_puts_r+0x1c>
 800a7fe:	4628      	mov	r0, r5
 800a800:	f000 fa20 	bl	800ac44 <__sinit>
 800a804:	4b23      	ldr	r3, [pc, #140]	; (800a894 <_puts_r+0xac>)
 800a806:	429c      	cmp	r4, r3
 800a808:	d117      	bne.n	800a83a <_puts_r+0x52>
 800a80a:	686c      	ldr	r4, [r5, #4]
 800a80c:	89a3      	ldrh	r3, [r4, #12]
 800a80e:	071b      	lsls	r3, r3, #28
 800a810:	d51d      	bpl.n	800a84e <_puts_r+0x66>
 800a812:	6923      	ldr	r3, [r4, #16]
 800a814:	b1db      	cbz	r3, 800a84e <_puts_r+0x66>
 800a816:	3e01      	subs	r6, #1
 800a818:	68a3      	ldr	r3, [r4, #8]
 800a81a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a81e:	3b01      	subs	r3, #1
 800a820:	60a3      	str	r3, [r4, #8]
 800a822:	b9e9      	cbnz	r1, 800a860 <_puts_r+0x78>
 800a824:	2b00      	cmp	r3, #0
 800a826:	da2e      	bge.n	800a886 <_puts_r+0x9e>
 800a828:	4622      	mov	r2, r4
 800a82a:	210a      	movs	r1, #10
 800a82c:	4628      	mov	r0, r5
 800a82e:	f000 f851 	bl	800a8d4 <__swbuf_r>
 800a832:	3001      	adds	r0, #1
 800a834:	d011      	beq.n	800a85a <_puts_r+0x72>
 800a836:	200a      	movs	r0, #10
 800a838:	e011      	b.n	800a85e <_puts_r+0x76>
 800a83a:	4b17      	ldr	r3, [pc, #92]	; (800a898 <_puts_r+0xb0>)
 800a83c:	429c      	cmp	r4, r3
 800a83e:	d101      	bne.n	800a844 <_puts_r+0x5c>
 800a840:	68ac      	ldr	r4, [r5, #8]
 800a842:	e7e3      	b.n	800a80c <_puts_r+0x24>
 800a844:	4b15      	ldr	r3, [pc, #84]	; (800a89c <_puts_r+0xb4>)
 800a846:	429c      	cmp	r4, r3
 800a848:	bf08      	it	eq
 800a84a:	68ec      	ldreq	r4, [r5, #12]
 800a84c:	e7de      	b.n	800a80c <_puts_r+0x24>
 800a84e:	4621      	mov	r1, r4
 800a850:	4628      	mov	r0, r5
 800a852:	f000 f891 	bl	800a978 <__swsetup_r>
 800a856:	2800      	cmp	r0, #0
 800a858:	d0dd      	beq.n	800a816 <_puts_r+0x2e>
 800a85a:	f04f 30ff 	mov.w	r0, #4294967295
 800a85e:	bd70      	pop	{r4, r5, r6, pc}
 800a860:	2b00      	cmp	r3, #0
 800a862:	da04      	bge.n	800a86e <_puts_r+0x86>
 800a864:	69a2      	ldr	r2, [r4, #24]
 800a866:	429a      	cmp	r2, r3
 800a868:	dc06      	bgt.n	800a878 <_puts_r+0x90>
 800a86a:	290a      	cmp	r1, #10
 800a86c:	d004      	beq.n	800a878 <_puts_r+0x90>
 800a86e:	6823      	ldr	r3, [r4, #0]
 800a870:	1c5a      	adds	r2, r3, #1
 800a872:	6022      	str	r2, [r4, #0]
 800a874:	7019      	strb	r1, [r3, #0]
 800a876:	e7cf      	b.n	800a818 <_puts_r+0x30>
 800a878:	4622      	mov	r2, r4
 800a87a:	4628      	mov	r0, r5
 800a87c:	f000 f82a 	bl	800a8d4 <__swbuf_r>
 800a880:	3001      	adds	r0, #1
 800a882:	d1c9      	bne.n	800a818 <_puts_r+0x30>
 800a884:	e7e9      	b.n	800a85a <_puts_r+0x72>
 800a886:	6823      	ldr	r3, [r4, #0]
 800a888:	200a      	movs	r0, #10
 800a88a:	1c5a      	adds	r2, r3, #1
 800a88c:	6022      	str	r2, [r4, #0]
 800a88e:	7018      	strb	r0, [r3, #0]
 800a890:	e7e5      	b.n	800a85e <_puts_r+0x76>
 800a892:	bf00      	nop
 800a894:	0800be38 	.word	0x0800be38
 800a898:	0800be58 	.word	0x0800be58
 800a89c:	0800be18 	.word	0x0800be18

0800a8a0 <puts>:
 800a8a0:	4b02      	ldr	r3, [pc, #8]	; (800a8ac <puts+0xc>)
 800a8a2:	4601      	mov	r1, r0
 800a8a4:	6818      	ldr	r0, [r3, #0]
 800a8a6:	f7ff bf9f 	b.w	800a7e8 <_puts_r>
 800a8aa:	bf00      	nop
 800a8ac:	20000070 	.word	0x20000070

0800a8b0 <strncmp>:
 800a8b0:	b510      	push	{r4, lr}
 800a8b2:	b16a      	cbz	r2, 800a8d0 <strncmp+0x20>
 800a8b4:	3901      	subs	r1, #1
 800a8b6:	1884      	adds	r4, r0, r2
 800a8b8:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a8bc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d103      	bne.n	800a8cc <strncmp+0x1c>
 800a8c4:	42a0      	cmp	r0, r4
 800a8c6:	d001      	beq.n	800a8cc <strncmp+0x1c>
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d1f5      	bne.n	800a8b8 <strncmp+0x8>
 800a8cc:	1a98      	subs	r0, r3, r2
 800a8ce:	bd10      	pop	{r4, pc}
 800a8d0:	4610      	mov	r0, r2
 800a8d2:	e7fc      	b.n	800a8ce <strncmp+0x1e>

0800a8d4 <__swbuf_r>:
 800a8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8d6:	460e      	mov	r6, r1
 800a8d8:	4614      	mov	r4, r2
 800a8da:	4605      	mov	r5, r0
 800a8dc:	b118      	cbz	r0, 800a8e6 <__swbuf_r+0x12>
 800a8de:	6983      	ldr	r3, [r0, #24]
 800a8e0:	b90b      	cbnz	r3, 800a8e6 <__swbuf_r+0x12>
 800a8e2:	f000 f9af 	bl	800ac44 <__sinit>
 800a8e6:	4b21      	ldr	r3, [pc, #132]	; (800a96c <__swbuf_r+0x98>)
 800a8e8:	429c      	cmp	r4, r3
 800a8ea:	d12a      	bne.n	800a942 <__swbuf_r+0x6e>
 800a8ec:	686c      	ldr	r4, [r5, #4]
 800a8ee:	69a3      	ldr	r3, [r4, #24]
 800a8f0:	60a3      	str	r3, [r4, #8]
 800a8f2:	89a3      	ldrh	r3, [r4, #12]
 800a8f4:	071a      	lsls	r2, r3, #28
 800a8f6:	d52e      	bpl.n	800a956 <__swbuf_r+0x82>
 800a8f8:	6923      	ldr	r3, [r4, #16]
 800a8fa:	b363      	cbz	r3, 800a956 <__swbuf_r+0x82>
 800a8fc:	6923      	ldr	r3, [r4, #16]
 800a8fe:	6820      	ldr	r0, [r4, #0]
 800a900:	1ac0      	subs	r0, r0, r3
 800a902:	6963      	ldr	r3, [r4, #20]
 800a904:	b2f6      	uxtb	r6, r6
 800a906:	4283      	cmp	r3, r0
 800a908:	4637      	mov	r7, r6
 800a90a:	dc04      	bgt.n	800a916 <__swbuf_r+0x42>
 800a90c:	4621      	mov	r1, r4
 800a90e:	4628      	mov	r0, r5
 800a910:	f000 f92e 	bl	800ab70 <_fflush_r>
 800a914:	bb28      	cbnz	r0, 800a962 <__swbuf_r+0x8e>
 800a916:	68a3      	ldr	r3, [r4, #8]
 800a918:	3b01      	subs	r3, #1
 800a91a:	60a3      	str	r3, [r4, #8]
 800a91c:	6823      	ldr	r3, [r4, #0]
 800a91e:	1c5a      	adds	r2, r3, #1
 800a920:	6022      	str	r2, [r4, #0]
 800a922:	701e      	strb	r6, [r3, #0]
 800a924:	6963      	ldr	r3, [r4, #20]
 800a926:	3001      	adds	r0, #1
 800a928:	4283      	cmp	r3, r0
 800a92a:	d004      	beq.n	800a936 <__swbuf_r+0x62>
 800a92c:	89a3      	ldrh	r3, [r4, #12]
 800a92e:	07db      	lsls	r3, r3, #31
 800a930:	d519      	bpl.n	800a966 <__swbuf_r+0x92>
 800a932:	2e0a      	cmp	r6, #10
 800a934:	d117      	bne.n	800a966 <__swbuf_r+0x92>
 800a936:	4621      	mov	r1, r4
 800a938:	4628      	mov	r0, r5
 800a93a:	f000 f919 	bl	800ab70 <_fflush_r>
 800a93e:	b190      	cbz	r0, 800a966 <__swbuf_r+0x92>
 800a940:	e00f      	b.n	800a962 <__swbuf_r+0x8e>
 800a942:	4b0b      	ldr	r3, [pc, #44]	; (800a970 <__swbuf_r+0x9c>)
 800a944:	429c      	cmp	r4, r3
 800a946:	d101      	bne.n	800a94c <__swbuf_r+0x78>
 800a948:	68ac      	ldr	r4, [r5, #8]
 800a94a:	e7d0      	b.n	800a8ee <__swbuf_r+0x1a>
 800a94c:	4b09      	ldr	r3, [pc, #36]	; (800a974 <__swbuf_r+0xa0>)
 800a94e:	429c      	cmp	r4, r3
 800a950:	bf08      	it	eq
 800a952:	68ec      	ldreq	r4, [r5, #12]
 800a954:	e7cb      	b.n	800a8ee <__swbuf_r+0x1a>
 800a956:	4621      	mov	r1, r4
 800a958:	4628      	mov	r0, r5
 800a95a:	f000 f80d 	bl	800a978 <__swsetup_r>
 800a95e:	2800      	cmp	r0, #0
 800a960:	d0cc      	beq.n	800a8fc <__swbuf_r+0x28>
 800a962:	f04f 37ff 	mov.w	r7, #4294967295
 800a966:	4638      	mov	r0, r7
 800a968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a96a:	bf00      	nop
 800a96c:	0800be38 	.word	0x0800be38
 800a970:	0800be58 	.word	0x0800be58
 800a974:	0800be18 	.word	0x0800be18

0800a978 <__swsetup_r>:
 800a978:	4b32      	ldr	r3, [pc, #200]	; (800aa44 <__swsetup_r+0xcc>)
 800a97a:	b570      	push	{r4, r5, r6, lr}
 800a97c:	681d      	ldr	r5, [r3, #0]
 800a97e:	4606      	mov	r6, r0
 800a980:	460c      	mov	r4, r1
 800a982:	b125      	cbz	r5, 800a98e <__swsetup_r+0x16>
 800a984:	69ab      	ldr	r3, [r5, #24]
 800a986:	b913      	cbnz	r3, 800a98e <__swsetup_r+0x16>
 800a988:	4628      	mov	r0, r5
 800a98a:	f000 f95b 	bl	800ac44 <__sinit>
 800a98e:	4b2e      	ldr	r3, [pc, #184]	; (800aa48 <__swsetup_r+0xd0>)
 800a990:	429c      	cmp	r4, r3
 800a992:	d10f      	bne.n	800a9b4 <__swsetup_r+0x3c>
 800a994:	686c      	ldr	r4, [r5, #4]
 800a996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a99a:	b29a      	uxth	r2, r3
 800a99c:	0715      	lsls	r5, r2, #28
 800a99e:	d42c      	bmi.n	800a9fa <__swsetup_r+0x82>
 800a9a0:	06d0      	lsls	r0, r2, #27
 800a9a2:	d411      	bmi.n	800a9c8 <__swsetup_r+0x50>
 800a9a4:	2209      	movs	r2, #9
 800a9a6:	6032      	str	r2, [r6, #0]
 800a9a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9ac:	81a3      	strh	r3, [r4, #12]
 800a9ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a9b2:	e03e      	b.n	800aa32 <__swsetup_r+0xba>
 800a9b4:	4b25      	ldr	r3, [pc, #148]	; (800aa4c <__swsetup_r+0xd4>)
 800a9b6:	429c      	cmp	r4, r3
 800a9b8:	d101      	bne.n	800a9be <__swsetup_r+0x46>
 800a9ba:	68ac      	ldr	r4, [r5, #8]
 800a9bc:	e7eb      	b.n	800a996 <__swsetup_r+0x1e>
 800a9be:	4b24      	ldr	r3, [pc, #144]	; (800aa50 <__swsetup_r+0xd8>)
 800a9c0:	429c      	cmp	r4, r3
 800a9c2:	bf08      	it	eq
 800a9c4:	68ec      	ldreq	r4, [r5, #12]
 800a9c6:	e7e6      	b.n	800a996 <__swsetup_r+0x1e>
 800a9c8:	0751      	lsls	r1, r2, #29
 800a9ca:	d512      	bpl.n	800a9f2 <__swsetup_r+0x7a>
 800a9cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9ce:	b141      	cbz	r1, 800a9e2 <__swsetup_r+0x6a>
 800a9d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9d4:	4299      	cmp	r1, r3
 800a9d6:	d002      	beq.n	800a9de <__swsetup_r+0x66>
 800a9d8:	4630      	mov	r0, r6
 800a9da:	f000 fa21 	bl	800ae20 <_free_r>
 800a9de:	2300      	movs	r3, #0
 800a9e0:	6363      	str	r3, [r4, #52]	; 0x34
 800a9e2:	89a3      	ldrh	r3, [r4, #12]
 800a9e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a9e8:	81a3      	strh	r3, [r4, #12]
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	6063      	str	r3, [r4, #4]
 800a9ee:	6923      	ldr	r3, [r4, #16]
 800a9f0:	6023      	str	r3, [r4, #0]
 800a9f2:	89a3      	ldrh	r3, [r4, #12]
 800a9f4:	f043 0308 	orr.w	r3, r3, #8
 800a9f8:	81a3      	strh	r3, [r4, #12]
 800a9fa:	6923      	ldr	r3, [r4, #16]
 800a9fc:	b94b      	cbnz	r3, 800aa12 <__swsetup_r+0x9a>
 800a9fe:	89a3      	ldrh	r3, [r4, #12]
 800aa00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aa04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa08:	d003      	beq.n	800aa12 <__swsetup_r+0x9a>
 800aa0a:	4621      	mov	r1, r4
 800aa0c:	4630      	mov	r0, r6
 800aa0e:	f000 f9c7 	bl	800ada0 <__smakebuf_r>
 800aa12:	89a2      	ldrh	r2, [r4, #12]
 800aa14:	f012 0301 	ands.w	r3, r2, #1
 800aa18:	d00c      	beq.n	800aa34 <__swsetup_r+0xbc>
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	60a3      	str	r3, [r4, #8]
 800aa1e:	6963      	ldr	r3, [r4, #20]
 800aa20:	425b      	negs	r3, r3
 800aa22:	61a3      	str	r3, [r4, #24]
 800aa24:	6923      	ldr	r3, [r4, #16]
 800aa26:	b953      	cbnz	r3, 800aa3e <__swsetup_r+0xc6>
 800aa28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa2c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800aa30:	d1ba      	bne.n	800a9a8 <__swsetup_r+0x30>
 800aa32:	bd70      	pop	{r4, r5, r6, pc}
 800aa34:	0792      	lsls	r2, r2, #30
 800aa36:	bf58      	it	pl
 800aa38:	6963      	ldrpl	r3, [r4, #20]
 800aa3a:	60a3      	str	r3, [r4, #8]
 800aa3c:	e7f2      	b.n	800aa24 <__swsetup_r+0xac>
 800aa3e:	2000      	movs	r0, #0
 800aa40:	e7f7      	b.n	800aa32 <__swsetup_r+0xba>
 800aa42:	bf00      	nop
 800aa44:	20000070 	.word	0x20000070
 800aa48:	0800be38 	.word	0x0800be38
 800aa4c:	0800be58 	.word	0x0800be58
 800aa50:	0800be18 	.word	0x0800be18

0800aa54 <abort>:
 800aa54:	b508      	push	{r3, lr}
 800aa56:	2006      	movs	r0, #6
 800aa58:	f000 fac2 	bl	800afe0 <raise>
 800aa5c:	2001      	movs	r0, #1
 800aa5e:	f7fa fb6d 	bl	800513c <_exit>
	...

0800aa64 <__sflush_r>:
 800aa64:	898a      	ldrh	r2, [r1, #12]
 800aa66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa6a:	4605      	mov	r5, r0
 800aa6c:	0710      	lsls	r0, r2, #28
 800aa6e:	460c      	mov	r4, r1
 800aa70:	d458      	bmi.n	800ab24 <__sflush_r+0xc0>
 800aa72:	684b      	ldr	r3, [r1, #4]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	dc05      	bgt.n	800aa84 <__sflush_r+0x20>
 800aa78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	dc02      	bgt.n	800aa84 <__sflush_r+0x20>
 800aa7e:	2000      	movs	r0, #0
 800aa80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa86:	2e00      	cmp	r6, #0
 800aa88:	d0f9      	beq.n	800aa7e <__sflush_r+0x1a>
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aa90:	682f      	ldr	r7, [r5, #0]
 800aa92:	6a21      	ldr	r1, [r4, #32]
 800aa94:	602b      	str	r3, [r5, #0]
 800aa96:	d032      	beq.n	800aafe <__sflush_r+0x9a>
 800aa98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aa9a:	89a3      	ldrh	r3, [r4, #12]
 800aa9c:	075a      	lsls	r2, r3, #29
 800aa9e:	d505      	bpl.n	800aaac <__sflush_r+0x48>
 800aaa0:	6863      	ldr	r3, [r4, #4]
 800aaa2:	1ac0      	subs	r0, r0, r3
 800aaa4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aaa6:	b10b      	cbz	r3, 800aaac <__sflush_r+0x48>
 800aaa8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aaaa:	1ac0      	subs	r0, r0, r3
 800aaac:	2300      	movs	r3, #0
 800aaae:	4602      	mov	r2, r0
 800aab0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aab2:	6a21      	ldr	r1, [r4, #32]
 800aab4:	4628      	mov	r0, r5
 800aab6:	47b0      	blx	r6
 800aab8:	1c43      	adds	r3, r0, #1
 800aaba:	89a3      	ldrh	r3, [r4, #12]
 800aabc:	d106      	bne.n	800aacc <__sflush_r+0x68>
 800aabe:	6829      	ldr	r1, [r5, #0]
 800aac0:	291d      	cmp	r1, #29
 800aac2:	d848      	bhi.n	800ab56 <__sflush_r+0xf2>
 800aac4:	4a29      	ldr	r2, [pc, #164]	; (800ab6c <__sflush_r+0x108>)
 800aac6:	40ca      	lsrs	r2, r1
 800aac8:	07d6      	lsls	r6, r2, #31
 800aaca:	d544      	bpl.n	800ab56 <__sflush_r+0xf2>
 800aacc:	2200      	movs	r2, #0
 800aace:	6062      	str	r2, [r4, #4]
 800aad0:	04d9      	lsls	r1, r3, #19
 800aad2:	6922      	ldr	r2, [r4, #16]
 800aad4:	6022      	str	r2, [r4, #0]
 800aad6:	d504      	bpl.n	800aae2 <__sflush_r+0x7e>
 800aad8:	1c42      	adds	r2, r0, #1
 800aada:	d101      	bne.n	800aae0 <__sflush_r+0x7c>
 800aadc:	682b      	ldr	r3, [r5, #0]
 800aade:	b903      	cbnz	r3, 800aae2 <__sflush_r+0x7e>
 800aae0:	6560      	str	r0, [r4, #84]	; 0x54
 800aae2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aae4:	602f      	str	r7, [r5, #0]
 800aae6:	2900      	cmp	r1, #0
 800aae8:	d0c9      	beq.n	800aa7e <__sflush_r+0x1a>
 800aaea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aaee:	4299      	cmp	r1, r3
 800aaf0:	d002      	beq.n	800aaf8 <__sflush_r+0x94>
 800aaf2:	4628      	mov	r0, r5
 800aaf4:	f000 f994 	bl	800ae20 <_free_r>
 800aaf8:	2000      	movs	r0, #0
 800aafa:	6360      	str	r0, [r4, #52]	; 0x34
 800aafc:	e7c0      	b.n	800aa80 <__sflush_r+0x1c>
 800aafe:	2301      	movs	r3, #1
 800ab00:	4628      	mov	r0, r5
 800ab02:	47b0      	blx	r6
 800ab04:	1c41      	adds	r1, r0, #1
 800ab06:	d1c8      	bne.n	800aa9a <__sflush_r+0x36>
 800ab08:	682b      	ldr	r3, [r5, #0]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d0c5      	beq.n	800aa9a <__sflush_r+0x36>
 800ab0e:	2b1d      	cmp	r3, #29
 800ab10:	d001      	beq.n	800ab16 <__sflush_r+0xb2>
 800ab12:	2b16      	cmp	r3, #22
 800ab14:	d101      	bne.n	800ab1a <__sflush_r+0xb6>
 800ab16:	602f      	str	r7, [r5, #0]
 800ab18:	e7b1      	b.n	800aa7e <__sflush_r+0x1a>
 800ab1a:	89a3      	ldrh	r3, [r4, #12]
 800ab1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab20:	81a3      	strh	r3, [r4, #12]
 800ab22:	e7ad      	b.n	800aa80 <__sflush_r+0x1c>
 800ab24:	690f      	ldr	r7, [r1, #16]
 800ab26:	2f00      	cmp	r7, #0
 800ab28:	d0a9      	beq.n	800aa7e <__sflush_r+0x1a>
 800ab2a:	0793      	lsls	r3, r2, #30
 800ab2c:	680e      	ldr	r6, [r1, #0]
 800ab2e:	bf08      	it	eq
 800ab30:	694b      	ldreq	r3, [r1, #20]
 800ab32:	600f      	str	r7, [r1, #0]
 800ab34:	bf18      	it	ne
 800ab36:	2300      	movne	r3, #0
 800ab38:	eba6 0807 	sub.w	r8, r6, r7
 800ab3c:	608b      	str	r3, [r1, #8]
 800ab3e:	f1b8 0f00 	cmp.w	r8, #0
 800ab42:	dd9c      	ble.n	800aa7e <__sflush_r+0x1a>
 800ab44:	4643      	mov	r3, r8
 800ab46:	463a      	mov	r2, r7
 800ab48:	6a21      	ldr	r1, [r4, #32]
 800ab4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ab4c:	4628      	mov	r0, r5
 800ab4e:	47b0      	blx	r6
 800ab50:	2800      	cmp	r0, #0
 800ab52:	dc06      	bgt.n	800ab62 <__sflush_r+0xfe>
 800ab54:	89a3      	ldrh	r3, [r4, #12]
 800ab56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab5a:	81a3      	strh	r3, [r4, #12]
 800ab5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab60:	e78e      	b.n	800aa80 <__sflush_r+0x1c>
 800ab62:	4407      	add	r7, r0
 800ab64:	eba8 0800 	sub.w	r8, r8, r0
 800ab68:	e7e9      	b.n	800ab3e <__sflush_r+0xda>
 800ab6a:	bf00      	nop
 800ab6c:	20400001 	.word	0x20400001

0800ab70 <_fflush_r>:
 800ab70:	b538      	push	{r3, r4, r5, lr}
 800ab72:	690b      	ldr	r3, [r1, #16]
 800ab74:	4605      	mov	r5, r0
 800ab76:	460c      	mov	r4, r1
 800ab78:	b1db      	cbz	r3, 800abb2 <_fflush_r+0x42>
 800ab7a:	b118      	cbz	r0, 800ab84 <_fflush_r+0x14>
 800ab7c:	6983      	ldr	r3, [r0, #24]
 800ab7e:	b90b      	cbnz	r3, 800ab84 <_fflush_r+0x14>
 800ab80:	f000 f860 	bl	800ac44 <__sinit>
 800ab84:	4b0c      	ldr	r3, [pc, #48]	; (800abb8 <_fflush_r+0x48>)
 800ab86:	429c      	cmp	r4, r3
 800ab88:	d109      	bne.n	800ab9e <_fflush_r+0x2e>
 800ab8a:	686c      	ldr	r4, [r5, #4]
 800ab8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab90:	b17b      	cbz	r3, 800abb2 <_fflush_r+0x42>
 800ab92:	4621      	mov	r1, r4
 800ab94:	4628      	mov	r0, r5
 800ab96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab9a:	f7ff bf63 	b.w	800aa64 <__sflush_r>
 800ab9e:	4b07      	ldr	r3, [pc, #28]	; (800abbc <_fflush_r+0x4c>)
 800aba0:	429c      	cmp	r4, r3
 800aba2:	d101      	bne.n	800aba8 <_fflush_r+0x38>
 800aba4:	68ac      	ldr	r4, [r5, #8]
 800aba6:	e7f1      	b.n	800ab8c <_fflush_r+0x1c>
 800aba8:	4b05      	ldr	r3, [pc, #20]	; (800abc0 <_fflush_r+0x50>)
 800abaa:	429c      	cmp	r4, r3
 800abac:	bf08      	it	eq
 800abae:	68ec      	ldreq	r4, [r5, #12]
 800abb0:	e7ec      	b.n	800ab8c <_fflush_r+0x1c>
 800abb2:	2000      	movs	r0, #0
 800abb4:	bd38      	pop	{r3, r4, r5, pc}
 800abb6:	bf00      	nop
 800abb8:	0800be38 	.word	0x0800be38
 800abbc:	0800be58 	.word	0x0800be58
 800abc0:	0800be18 	.word	0x0800be18

0800abc4 <std>:
 800abc4:	2300      	movs	r3, #0
 800abc6:	b510      	push	{r4, lr}
 800abc8:	4604      	mov	r4, r0
 800abca:	e9c0 3300 	strd	r3, r3, [r0]
 800abce:	6083      	str	r3, [r0, #8]
 800abd0:	8181      	strh	r1, [r0, #12]
 800abd2:	6643      	str	r3, [r0, #100]	; 0x64
 800abd4:	81c2      	strh	r2, [r0, #14]
 800abd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800abda:	6183      	str	r3, [r0, #24]
 800abdc:	4619      	mov	r1, r3
 800abde:	2208      	movs	r2, #8
 800abe0:	305c      	adds	r0, #92	; 0x5c
 800abe2:	f7ff fb1a 	bl	800a21a <memset>
 800abe6:	4b05      	ldr	r3, [pc, #20]	; (800abfc <std+0x38>)
 800abe8:	6263      	str	r3, [r4, #36]	; 0x24
 800abea:	4b05      	ldr	r3, [pc, #20]	; (800ac00 <std+0x3c>)
 800abec:	62a3      	str	r3, [r4, #40]	; 0x28
 800abee:	4b05      	ldr	r3, [pc, #20]	; (800ac04 <std+0x40>)
 800abf0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800abf2:	4b05      	ldr	r3, [pc, #20]	; (800ac08 <std+0x44>)
 800abf4:	6224      	str	r4, [r4, #32]
 800abf6:	6323      	str	r3, [r4, #48]	; 0x30
 800abf8:	bd10      	pop	{r4, pc}
 800abfa:	bf00      	nop
 800abfc:	0800b019 	.word	0x0800b019
 800ac00:	0800b03b 	.word	0x0800b03b
 800ac04:	0800b073 	.word	0x0800b073
 800ac08:	0800b097 	.word	0x0800b097

0800ac0c <_cleanup_r>:
 800ac0c:	4901      	ldr	r1, [pc, #4]	; (800ac14 <_cleanup_r+0x8>)
 800ac0e:	f000 b885 	b.w	800ad1c <_fwalk_reent>
 800ac12:	bf00      	nop
 800ac14:	0800ab71 	.word	0x0800ab71

0800ac18 <__sfmoreglue>:
 800ac18:	b570      	push	{r4, r5, r6, lr}
 800ac1a:	1e4a      	subs	r2, r1, #1
 800ac1c:	2568      	movs	r5, #104	; 0x68
 800ac1e:	4355      	muls	r5, r2
 800ac20:	460e      	mov	r6, r1
 800ac22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ac26:	f000 f949 	bl	800aebc <_malloc_r>
 800ac2a:	4604      	mov	r4, r0
 800ac2c:	b140      	cbz	r0, 800ac40 <__sfmoreglue+0x28>
 800ac2e:	2100      	movs	r1, #0
 800ac30:	e9c0 1600 	strd	r1, r6, [r0]
 800ac34:	300c      	adds	r0, #12
 800ac36:	60a0      	str	r0, [r4, #8]
 800ac38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ac3c:	f7ff faed 	bl	800a21a <memset>
 800ac40:	4620      	mov	r0, r4
 800ac42:	bd70      	pop	{r4, r5, r6, pc}

0800ac44 <__sinit>:
 800ac44:	6983      	ldr	r3, [r0, #24]
 800ac46:	b510      	push	{r4, lr}
 800ac48:	4604      	mov	r4, r0
 800ac4a:	bb33      	cbnz	r3, 800ac9a <__sinit+0x56>
 800ac4c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800ac50:	6503      	str	r3, [r0, #80]	; 0x50
 800ac52:	4b12      	ldr	r3, [pc, #72]	; (800ac9c <__sinit+0x58>)
 800ac54:	4a12      	ldr	r2, [pc, #72]	; (800aca0 <__sinit+0x5c>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	6282      	str	r2, [r0, #40]	; 0x28
 800ac5a:	4298      	cmp	r0, r3
 800ac5c:	bf04      	itt	eq
 800ac5e:	2301      	moveq	r3, #1
 800ac60:	6183      	streq	r3, [r0, #24]
 800ac62:	f000 f81f 	bl	800aca4 <__sfp>
 800ac66:	6060      	str	r0, [r4, #4]
 800ac68:	4620      	mov	r0, r4
 800ac6a:	f000 f81b 	bl	800aca4 <__sfp>
 800ac6e:	60a0      	str	r0, [r4, #8]
 800ac70:	4620      	mov	r0, r4
 800ac72:	f000 f817 	bl	800aca4 <__sfp>
 800ac76:	2200      	movs	r2, #0
 800ac78:	60e0      	str	r0, [r4, #12]
 800ac7a:	2104      	movs	r1, #4
 800ac7c:	6860      	ldr	r0, [r4, #4]
 800ac7e:	f7ff ffa1 	bl	800abc4 <std>
 800ac82:	2201      	movs	r2, #1
 800ac84:	2109      	movs	r1, #9
 800ac86:	68a0      	ldr	r0, [r4, #8]
 800ac88:	f7ff ff9c 	bl	800abc4 <std>
 800ac8c:	2202      	movs	r2, #2
 800ac8e:	2112      	movs	r1, #18
 800ac90:	68e0      	ldr	r0, [r4, #12]
 800ac92:	f7ff ff97 	bl	800abc4 <std>
 800ac96:	2301      	movs	r3, #1
 800ac98:	61a3      	str	r3, [r4, #24]
 800ac9a:	bd10      	pop	{r4, pc}
 800ac9c:	0800bde0 	.word	0x0800bde0
 800aca0:	0800ac0d 	.word	0x0800ac0d

0800aca4 <__sfp>:
 800aca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aca6:	4b1b      	ldr	r3, [pc, #108]	; (800ad14 <__sfp+0x70>)
 800aca8:	681e      	ldr	r6, [r3, #0]
 800acaa:	69b3      	ldr	r3, [r6, #24]
 800acac:	4607      	mov	r7, r0
 800acae:	b913      	cbnz	r3, 800acb6 <__sfp+0x12>
 800acb0:	4630      	mov	r0, r6
 800acb2:	f7ff ffc7 	bl	800ac44 <__sinit>
 800acb6:	3648      	adds	r6, #72	; 0x48
 800acb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800acbc:	3b01      	subs	r3, #1
 800acbe:	d503      	bpl.n	800acc8 <__sfp+0x24>
 800acc0:	6833      	ldr	r3, [r6, #0]
 800acc2:	b133      	cbz	r3, 800acd2 <__sfp+0x2e>
 800acc4:	6836      	ldr	r6, [r6, #0]
 800acc6:	e7f7      	b.n	800acb8 <__sfp+0x14>
 800acc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800accc:	b16d      	cbz	r5, 800acea <__sfp+0x46>
 800acce:	3468      	adds	r4, #104	; 0x68
 800acd0:	e7f4      	b.n	800acbc <__sfp+0x18>
 800acd2:	2104      	movs	r1, #4
 800acd4:	4638      	mov	r0, r7
 800acd6:	f7ff ff9f 	bl	800ac18 <__sfmoreglue>
 800acda:	6030      	str	r0, [r6, #0]
 800acdc:	2800      	cmp	r0, #0
 800acde:	d1f1      	bne.n	800acc4 <__sfp+0x20>
 800ace0:	230c      	movs	r3, #12
 800ace2:	603b      	str	r3, [r7, #0]
 800ace4:	4604      	mov	r4, r0
 800ace6:	4620      	mov	r0, r4
 800ace8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acea:	4b0b      	ldr	r3, [pc, #44]	; (800ad18 <__sfp+0x74>)
 800acec:	6665      	str	r5, [r4, #100]	; 0x64
 800acee:	e9c4 5500 	strd	r5, r5, [r4]
 800acf2:	60a5      	str	r5, [r4, #8]
 800acf4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800acf8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800acfc:	2208      	movs	r2, #8
 800acfe:	4629      	mov	r1, r5
 800ad00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ad04:	f7ff fa89 	bl	800a21a <memset>
 800ad08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ad0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ad10:	e7e9      	b.n	800ace6 <__sfp+0x42>
 800ad12:	bf00      	nop
 800ad14:	0800bde0 	.word	0x0800bde0
 800ad18:	ffff0001 	.word	0xffff0001

0800ad1c <_fwalk_reent>:
 800ad1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad20:	4680      	mov	r8, r0
 800ad22:	4689      	mov	r9, r1
 800ad24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ad28:	2600      	movs	r6, #0
 800ad2a:	b914      	cbnz	r4, 800ad32 <_fwalk_reent+0x16>
 800ad2c:	4630      	mov	r0, r6
 800ad2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad32:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800ad36:	3f01      	subs	r7, #1
 800ad38:	d501      	bpl.n	800ad3e <_fwalk_reent+0x22>
 800ad3a:	6824      	ldr	r4, [r4, #0]
 800ad3c:	e7f5      	b.n	800ad2a <_fwalk_reent+0xe>
 800ad3e:	89ab      	ldrh	r3, [r5, #12]
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	d907      	bls.n	800ad54 <_fwalk_reent+0x38>
 800ad44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad48:	3301      	adds	r3, #1
 800ad4a:	d003      	beq.n	800ad54 <_fwalk_reent+0x38>
 800ad4c:	4629      	mov	r1, r5
 800ad4e:	4640      	mov	r0, r8
 800ad50:	47c8      	blx	r9
 800ad52:	4306      	orrs	r6, r0
 800ad54:	3568      	adds	r5, #104	; 0x68
 800ad56:	e7ee      	b.n	800ad36 <_fwalk_reent+0x1a>

0800ad58 <__swhatbuf_r>:
 800ad58:	b570      	push	{r4, r5, r6, lr}
 800ad5a:	460e      	mov	r6, r1
 800ad5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad60:	2900      	cmp	r1, #0
 800ad62:	b096      	sub	sp, #88	; 0x58
 800ad64:	4614      	mov	r4, r2
 800ad66:	461d      	mov	r5, r3
 800ad68:	da07      	bge.n	800ad7a <__swhatbuf_r+0x22>
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	602b      	str	r3, [r5, #0]
 800ad6e:	89b3      	ldrh	r3, [r6, #12]
 800ad70:	061a      	lsls	r2, r3, #24
 800ad72:	d410      	bmi.n	800ad96 <__swhatbuf_r+0x3e>
 800ad74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad78:	e00e      	b.n	800ad98 <__swhatbuf_r+0x40>
 800ad7a:	466a      	mov	r2, sp
 800ad7c:	f000 f9b2 	bl	800b0e4 <_fstat_r>
 800ad80:	2800      	cmp	r0, #0
 800ad82:	dbf2      	blt.n	800ad6a <__swhatbuf_r+0x12>
 800ad84:	9a01      	ldr	r2, [sp, #4]
 800ad86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ad8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ad8e:	425a      	negs	r2, r3
 800ad90:	415a      	adcs	r2, r3
 800ad92:	602a      	str	r2, [r5, #0]
 800ad94:	e7ee      	b.n	800ad74 <__swhatbuf_r+0x1c>
 800ad96:	2340      	movs	r3, #64	; 0x40
 800ad98:	2000      	movs	r0, #0
 800ad9a:	6023      	str	r3, [r4, #0]
 800ad9c:	b016      	add	sp, #88	; 0x58
 800ad9e:	bd70      	pop	{r4, r5, r6, pc}

0800ada0 <__smakebuf_r>:
 800ada0:	898b      	ldrh	r3, [r1, #12]
 800ada2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ada4:	079d      	lsls	r5, r3, #30
 800ada6:	4606      	mov	r6, r0
 800ada8:	460c      	mov	r4, r1
 800adaa:	d507      	bpl.n	800adbc <__smakebuf_r+0x1c>
 800adac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800adb0:	6023      	str	r3, [r4, #0]
 800adb2:	6123      	str	r3, [r4, #16]
 800adb4:	2301      	movs	r3, #1
 800adb6:	6163      	str	r3, [r4, #20]
 800adb8:	b002      	add	sp, #8
 800adba:	bd70      	pop	{r4, r5, r6, pc}
 800adbc:	ab01      	add	r3, sp, #4
 800adbe:	466a      	mov	r2, sp
 800adc0:	f7ff ffca 	bl	800ad58 <__swhatbuf_r>
 800adc4:	9900      	ldr	r1, [sp, #0]
 800adc6:	4605      	mov	r5, r0
 800adc8:	4630      	mov	r0, r6
 800adca:	f000 f877 	bl	800aebc <_malloc_r>
 800adce:	b948      	cbnz	r0, 800ade4 <__smakebuf_r+0x44>
 800add0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800add4:	059a      	lsls	r2, r3, #22
 800add6:	d4ef      	bmi.n	800adb8 <__smakebuf_r+0x18>
 800add8:	f023 0303 	bic.w	r3, r3, #3
 800addc:	f043 0302 	orr.w	r3, r3, #2
 800ade0:	81a3      	strh	r3, [r4, #12]
 800ade2:	e7e3      	b.n	800adac <__smakebuf_r+0xc>
 800ade4:	4b0d      	ldr	r3, [pc, #52]	; (800ae1c <__smakebuf_r+0x7c>)
 800ade6:	62b3      	str	r3, [r6, #40]	; 0x28
 800ade8:	89a3      	ldrh	r3, [r4, #12]
 800adea:	6020      	str	r0, [r4, #0]
 800adec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adf0:	81a3      	strh	r3, [r4, #12]
 800adf2:	9b00      	ldr	r3, [sp, #0]
 800adf4:	6163      	str	r3, [r4, #20]
 800adf6:	9b01      	ldr	r3, [sp, #4]
 800adf8:	6120      	str	r0, [r4, #16]
 800adfa:	b15b      	cbz	r3, 800ae14 <__smakebuf_r+0x74>
 800adfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae00:	4630      	mov	r0, r6
 800ae02:	f000 f981 	bl	800b108 <_isatty_r>
 800ae06:	b128      	cbz	r0, 800ae14 <__smakebuf_r+0x74>
 800ae08:	89a3      	ldrh	r3, [r4, #12]
 800ae0a:	f023 0303 	bic.w	r3, r3, #3
 800ae0e:	f043 0301 	orr.w	r3, r3, #1
 800ae12:	81a3      	strh	r3, [r4, #12]
 800ae14:	89a3      	ldrh	r3, [r4, #12]
 800ae16:	431d      	orrs	r5, r3
 800ae18:	81a5      	strh	r5, [r4, #12]
 800ae1a:	e7cd      	b.n	800adb8 <__smakebuf_r+0x18>
 800ae1c:	0800ac0d 	.word	0x0800ac0d

0800ae20 <_free_r>:
 800ae20:	b538      	push	{r3, r4, r5, lr}
 800ae22:	4605      	mov	r5, r0
 800ae24:	2900      	cmp	r1, #0
 800ae26:	d045      	beq.n	800aeb4 <_free_r+0x94>
 800ae28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae2c:	1f0c      	subs	r4, r1, #4
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	bfb8      	it	lt
 800ae32:	18e4      	addlt	r4, r4, r3
 800ae34:	f000 f98a 	bl	800b14c <__malloc_lock>
 800ae38:	4a1f      	ldr	r2, [pc, #124]	; (800aeb8 <_free_r+0x98>)
 800ae3a:	6813      	ldr	r3, [r2, #0]
 800ae3c:	4610      	mov	r0, r2
 800ae3e:	b933      	cbnz	r3, 800ae4e <_free_r+0x2e>
 800ae40:	6063      	str	r3, [r4, #4]
 800ae42:	6014      	str	r4, [r2, #0]
 800ae44:	4628      	mov	r0, r5
 800ae46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae4a:	f000 b980 	b.w	800b14e <__malloc_unlock>
 800ae4e:	42a3      	cmp	r3, r4
 800ae50:	d90c      	bls.n	800ae6c <_free_r+0x4c>
 800ae52:	6821      	ldr	r1, [r4, #0]
 800ae54:	1862      	adds	r2, r4, r1
 800ae56:	4293      	cmp	r3, r2
 800ae58:	bf04      	itt	eq
 800ae5a:	681a      	ldreq	r2, [r3, #0]
 800ae5c:	685b      	ldreq	r3, [r3, #4]
 800ae5e:	6063      	str	r3, [r4, #4]
 800ae60:	bf04      	itt	eq
 800ae62:	1852      	addeq	r2, r2, r1
 800ae64:	6022      	streq	r2, [r4, #0]
 800ae66:	6004      	str	r4, [r0, #0]
 800ae68:	e7ec      	b.n	800ae44 <_free_r+0x24>
 800ae6a:	4613      	mov	r3, r2
 800ae6c:	685a      	ldr	r2, [r3, #4]
 800ae6e:	b10a      	cbz	r2, 800ae74 <_free_r+0x54>
 800ae70:	42a2      	cmp	r2, r4
 800ae72:	d9fa      	bls.n	800ae6a <_free_r+0x4a>
 800ae74:	6819      	ldr	r1, [r3, #0]
 800ae76:	1858      	adds	r0, r3, r1
 800ae78:	42a0      	cmp	r0, r4
 800ae7a:	d10b      	bne.n	800ae94 <_free_r+0x74>
 800ae7c:	6820      	ldr	r0, [r4, #0]
 800ae7e:	4401      	add	r1, r0
 800ae80:	1858      	adds	r0, r3, r1
 800ae82:	4282      	cmp	r2, r0
 800ae84:	6019      	str	r1, [r3, #0]
 800ae86:	d1dd      	bne.n	800ae44 <_free_r+0x24>
 800ae88:	6810      	ldr	r0, [r2, #0]
 800ae8a:	6852      	ldr	r2, [r2, #4]
 800ae8c:	605a      	str	r2, [r3, #4]
 800ae8e:	4401      	add	r1, r0
 800ae90:	6019      	str	r1, [r3, #0]
 800ae92:	e7d7      	b.n	800ae44 <_free_r+0x24>
 800ae94:	d902      	bls.n	800ae9c <_free_r+0x7c>
 800ae96:	230c      	movs	r3, #12
 800ae98:	602b      	str	r3, [r5, #0]
 800ae9a:	e7d3      	b.n	800ae44 <_free_r+0x24>
 800ae9c:	6820      	ldr	r0, [r4, #0]
 800ae9e:	1821      	adds	r1, r4, r0
 800aea0:	428a      	cmp	r2, r1
 800aea2:	bf04      	itt	eq
 800aea4:	6811      	ldreq	r1, [r2, #0]
 800aea6:	6852      	ldreq	r2, [r2, #4]
 800aea8:	6062      	str	r2, [r4, #4]
 800aeaa:	bf04      	itt	eq
 800aeac:	1809      	addeq	r1, r1, r0
 800aeae:	6021      	streq	r1, [r4, #0]
 800aeb0:	605c      	str	r4, [r3, #4]
 800aeb2:	e7c7      	b.n	800ae44 <_free_r+0x24>
 800aeb4:	bd38      	pop	{r3, r4, r5, pc}
 800aeb6:	bf00      	nop
 800aeb8:	20000178 	.word	0x20000178

0800aebc <_malloc_r>:
 800aebc:	b570      	push	{r4, r5, r6, lr}
 800aebe:	1ccd      	adds	r5, r1, #3
 800aec0:	f025 0503 	bic.w	r5, r5, #3
 800aec4:	3508      	adds	r5, #8
 800aec6:	2d0c      	cmp	r5, #12
 800aec8:	bf38      	it	cc
 800aeca:	250c      	movcc	r5, #12
 800aecc:	2d00      	cmp	r5, #0
 800aece:	4606      	mov	r6, r0
 800aed0:	db01      	blt.n	800aed6 <_malloc_r+0x1a>
 800aed2:	42a9      	cmp	r1, r5
 800aed4:	d903      	bls.n	800aede <_malloc_r+0x22>
 800aed6:	230c      	movs	r3, #12
 800aed8:	6033      	str	r3, [r6, #0]
 800aeda:	2000      	movs	r0, #0
 800aedc:	bd70      	pop	{r4, r5, r6, pc}
 800aede:	f000 f935 	bl	800b14c <__malloc_lock>
 800aee2:	4a21      	ldr	r2, [pc, #132]	; (800af68 <_malloc_r+0xac>)
 800aee4:	6814      	ldr	r4, [r2, #0]
 800aee6:	4621      	mov	r1, r4
 800aee8:	b991      	cbnz	r1, 800af10 <_malloc_r+0x54>
 800aeea:	4c20      	ldr	r4, [pc, #128]	; (800af6c <_malloc_r+0xb0>)
 800aeec:	6823      	ldr	r3, [r4, #0]
 800aeee:	b91b      	cbnz	r3, 800aef8 <_malloc_r+0x3c>
 800aef0:	4630      	mov	r0, r6
 800aef2:	f000 f83d 	bl	800af70 <_sbrk_r>
 800aef6:	6020      	str	r0, [r4, #0]
 800aef8:	4629      	mov	r1, r5
 800aefa:	4630      	mov	r0, r6
 800aefc:	f000 f838 	bl	800af70 <_sbrk_r>
 800af00:	1c43      	adds	r3, r0, #1
 800af02:	d124      	bne.n	800af4e <_malloc_r+0x92>
 800af04:	230c      	movs	r3, #12
 800af06:	6033      	str	r3, [r6, #0]
 800af08:	4630      	mov	r0, r6
 800af0a:	f000 f920 	bl	800b14e <__malloc_unlock>
 800af0e:	e7e4      	b.n	800aeda <_malloc_r+0x1e>
 800af10:	680b      	ldr	r3, [r1, #0]
 800af12:	1b5b      	subs	r3, r3, r5
 800af14:	d418      	bmi.n	800af48 <_malloc_r+0x8c>
 800af16:	2b0b      	cmp	r3, #11
 800af18:	d90f      	bls.n	800af3a <_malloc_r+0x7e>
 800af1a:	600b      	str	r3, [r1, #0]
 800af1c:	50cd      	str	r5, [r1, r3]
 800af1e:	18cc      	adds	r4, r1, r3
 800af20:	4630      	mov	r0, r6
 800af22:	f000 f914 	bl	800b14e <__malloc_unlock>
 800af26:	f104 000b 	add.w	r0, r4, #11
 800af2a:	1d23      	adds	r3, r4, #4
 800af2c:	f020 0007 	bic.w	r0, r0, #7
 800af30:	1ac3      	subs	r3, r0, r3
 800af32:	d0d3      	beq.n	800aedc <_malloc_r+0x20>
 800af34:	425a      	negs	r2, r3
 800af36:	50e2      	str	r2, [r4, r3]
 800af38:	e7d0      	b.n	800aedc <_malloc_r+0x20>
 800af3a:	428c      	cmp	r4, r1
 800af3c:	684b      	ldr	r3, [r1, #4]
 800af3e:	bf16      	itet	ne
 800af40:	6063      	strne	r3, [r4, #4]
 800af42:	6013      	streq	r3, [r2, #0]
 800af44:	460c      	movne	r4, r1
 800af46:	e7eb      	b.n	800af20 <_malloc_r+0x64>
 800af48:	460c      	mov	r4, r1
 800af4a:	6849      	ldr	r1, [r1, #4]
 800af4c:	e7cc      	b.n	800aee8 <_malloc_r+0x2c>
 800af4e:	1cc4      	adds	r4, r0, #3
 800af50:	f024 0403 	bic.w	r4, r4, #3
 800af54:	42a0      	cmp	r0, r4
 800af56:	d005      	beq.n	800af64 <_malloc_r+0xa8>
 800af58:	1a21      	subs	r1, r4, r0
 800af5a:	4630      	mov	r0, r6
 800af5c:	f000 f808 	bl	800af70 <_sbrk_r>
 800af60:	3001      	adds	r0, #1
 800af62:	d0cf      	beq.n	800af04 <_malloc_r+0x48>
 800af64:	6025      	str	r5, [r4, #0]
 800af66:	e7db      	b.n	800af20 <_malloc_r+0x64>
 800af68:	20000178 	.word	0x20000178
 800af6c:	2000017c 	.word	0x2000017c

0800af70 <_sbrk_r>:
 800af70:	b538      	push	{r3, r4, r5, lr}
 800af72:	4c06      	ldr	r4, [pc, #24]	; (800af8c <_sbrk_r+0x1c>)
 800af74:	2300      	movs	r3, #0
 800af76:	4605      	mov	r5, r0
 800af78:	4608      	mov	r0, r1
 800af7a:	6023      	str	r3, [r4, #0]
 800af7c:	f7fa f950 	bl	8005220 <_sbrk>
 800af80:	1c43      	adds	r3, r0, #1
 800af82:	d102      	bne.n	800af8a <_sbrk_r+0x1a>
 800af84:	6823      	ldr	r3, [r4, #0]
 800af86:	b103      	cbz	r3, 800af8a <_sbrk_r+0x1a>
 800af88:	602b      	str	r3, [r5, #0]
 800af8a:	bd38      	pop	{r3, r4, r5, pc}
 800af8c:	200009c0 	.word	0x200009c0

0800af90 <_raise_r>:
 800af90:	291f      	cmp	r1, #31
 800af92:	b538      	push	{r3, r4, r5, lr}
 800af94:	4604      	mov	r4, r0
 800af96:	460d      	mov	r5, r1
 800af98:	d904      	bls.n	800afa4 <_raise_r+0x14>
 800af9a:	2316      	movs	r3, #22
 800af9c:	6003      	str	r3, [r0, #0]
 800af9e:	f04f 30ff 	mov.w	r0, #4294967295
 800afa2:	bd38      	pop	{r3, r4, r5, pc}
 800afa4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800afa6:	b112      	cbz	r2, 800afae <_raise_r+0x1e>
 800afa8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800afac:	b94b      	cbnz	r3, 800afc2 <_raise_r+0x32>
 800afae:	4620      	mov	r0, r4
 800afb0:	f000 f830 	bl	800b014 <_getpid_r>
 800afb4:	462a      	mov	r2, r5
 800afb6:	4601      	mov	r1, r0
 800afb8:	4620      	mov	r0, r4
 800afba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afbe:	f000 b817 	b.w	800aff0 <_kill_r>
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	d00a      	beq.n	800afdc <_raise_r+0x4c>
 800afc6:	1c59      	adds	r1, r3, #1
 800afc8:	d103      	bne.n	800afd2 <_raise_r+0x42>
 800afca:	2316      	movs	r3, #22
 800afcc:	6003      	str	r3, [r0, #0]
 800afce:	2001      	movs	r0, #1
 800afd0:	e7e7      	b.n	800afa2 <_raise_r+0x12>
 800afd2:	2400      	movs	r4, #0
 800afd4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800afd8:	4628      	mov	r0, r5
 800afda:	4798      	blx	r3
 800afdc:	2000      	movs	r0, #0
 800afde:	e7e0      	b.n	800afa2 <_raise_r+0x12>

0800afe0 <raise>:
 800afe0:	4b02      	ldr	r3, [pc, #8]	; (800afec <raise+0xc>)
 800afe2:	4601      	mov	r1, r0
 800afe4:	6818      	ldr	r0, [r3, #0]
 800afe6:	f7ff bfd3 	b.w	800af90 <_raise_r>
 800afea:	bf00      	nop
 800afec:	20000070 	.word	0x20000070

0800aff0 <_kill_r>:
 800aff0:	b538      	push	{r3, r4, r5, lr}
 800aff2:	4c07      	ldr	r4, [pc, #28]	; (800b010 <_kill_r+0x20>)
 800aff4:	2300      	movs	r3, #0
 800aff6:	4605      	mov	r5, r0
 800aff8:	4608      	mov	r0, r1
 800affa:	4611      	mov	r1, r2
 800affc:	6023      	str	r3, [r4, #0]
 800affe:	f7fa f88d 	bl	800511c <_kill>
 800b002:	1c43      	adds	r3, r0, #1
 800b004:	d102      	bne.n	800b00c <_kill_r+0x1c>
 800b006:	6823      	ldr	r3, [r4, #0]
 800b008:	b103      	cbz	r3, 800b00c <_kill_r+0x1c>
 800b00a:	602b      	str	r3, [r5, #0]
 800b00c:	bd38      	pop	{r3, r4, r5, pc}
 800b00e:	bf00      	nop
 800b010:	200009c0 	.word	0x200009c0

0800b014 <_getpid_r>:
 800b014:	f7fa b87a 	b.w	800510c <_getpid>

0800b018 <__sread>:
 800b018:	b510      	push	{r4, lr}
 800b01a:	460c      	mov	r4, r1
 800b01c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b020:	f000 f896 	bl	800b150 <_read_r>
 800b024:	2800      	cmp	r0, #0
 800b026:	bfab      	itete	ge
 800b028:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b02a:	89a3      	ldrhlt	r3, [r4, #12]
 800b02c:	181b      	addge	r3, r3, r0
 800b02e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b032:	bfac      	ite	ge
 800b034:	6563      	strge	r3, [r4, #84]	; 0x54
 800b036:	81a3      	strhlt	r3, [r4, #12]
 800b038:	bd10      	pop	{r4, pc}

0800b03a <__swrite>:
 800b03a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b03e:	461f      	mov	r7, r3
 800b040:	898b      	ldrh	r3, [r1, #12]
 800b042:	05db      	lsls	r3, r3, #23
 800b044:	4605      	mov	r5, r0
 800b046:	460c      	mov	r4, r1
 800b048:	4616      	mov	r6, r2
 800b04a:	d505      	bpl.n	800b058 <__swrite+0x1e>
 800b04c:	2302      	movs	r3, #2
 800b04e:	2200      	movs	r2, #0
 800b050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b054:	f000 f868 	bl	800b128 <_lseek_r>
 800b058:	89a3      	ldrh	r3, [r4, #12]
 800b05a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b05e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b062:	81a3      	strh	r3, [r4, #12]
 800b064:	4632      	mov	r2, r6
 800b066:	463b      	mov	r3, r7
 800b068:	4628      	mov	r0, r5
 800b06a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b06e:	f000 b817 	b.w	800b0a0 <_write_r>

0800b072 <__sseek>:
 800b072:	b510      	push	{r4, lr}
 800b074:	460c      	mov	r4, r1
 800b076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b07a:	f000 f855 	bl	800b128 <_lseek_r>
 800b07e:	1c43      	adds	r3, r0, #1
 800b080:	89a3      	ldrh	r3, [r4, #12]
 800b082:	bf15      	itete	ne
 800b084:	6560      	strne	r0, [r4, #84]	; 0x54
 800b086:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b08a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b08e:	81a3      	strheq	r3, [r4, #12]
 800b090:	bf18      	it	ne
 800b092:	81a3      	strhne	r3, [r4, #12]
 800b094:	bd10      	pop	{r4, pc}

0800b096 <__sclose>:
 800b096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b09a:	f000 b813 	b.w	800b0c4 <_close_r>
	...

0800b0a0 <_write_r>:
 800b0a0:	b538      	push	{r3, r4, r5, lr}
 800b0a2:	4c07      	ldr	r4, [pc, #28]	; (800b0c0 <_write_r+0x20>)
 800b0a4:	4605      	mov	r5, r0
 800b0a6:	4608      	mov	r0, r1
 800b0a8:	4611      	mov	r1, r2
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	6022      	str	r2, [r4, #0]
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	f7fa f86c 	bl	800518c <_write>
 800b0b4:	1c43      	adds	r3, r0, #1
 800b0b6:	d102      	bne.n	800b0be <_write_r+0x1e>
 800b0b8:	6823      	ldr	r3, [r4, #0]
 800b0ba:	b103      	cbz	r3, 800b0be <_write_r+0x1e>
 800b0bc:	602b      	str	r3, [r5, #0]
 800b0be:	bd38      	pop	{r3, r4, r5, pc}
 800b0c0:	200009c0 	.word	0x200009c0

0800b0c4 <_close_r>:
 800b0c4:	b538      	push	{r3, r4, r5, lr}
 800b0c6:	4c06      	ldr	r4, [pc, #24]	; (800b0e0 <_close_r+0x1c>)
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	4605      	mov	r5, r0
 800b0cc:	4608      	mov	r0, r1
 800b0ce:	6023      	str	r3, [r4, #0]
 800b0d0:	f7fa f872 	bl	80051b8 <_close>
 800b0d4:	1c43      	adds	r3, r0, #1
 800b0d6:	d102      	bne.n	800b0de <_close_r+0x1a>
 800b0d8:	6823      	ldr	r3, [r4, #0]
 800b0da:	b103      	cbz	r3, 800b0de <_close_r+0x1a>
 800b0dc:	602b      	str	r3, [r5, #0]
 800b0de:	bd38      	pop	{r3, r4, r5, pc}
 800b0e0:	200009c0 	.word	0x200009c0

0800b0e4 <_fstat_r>:
 800b0e4:	b538      	push	{r3, r4, r5, lr}
 800b0e6:	4c07      	ldr	r4, [pc, #28]	; (800b104 <_fstat_r+0x20>)
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	4605      	mov	r5, r0
 800b0ec:	4608      	mov	r0, r1
 800b0ee:	4611      	mov	r1, r2
 800b0f0:	6023      	str	r3, [r4, #0]
 800b0f2:	f7fa f86d 	bl	80051d0 <_fstat>
 800b0f6:	1c43      	adds	r3, r0, #1
 800b0f8:	d102      	bne.n	800b100 <_fstat_r+0x1c>
 800b0fa:	6823      	ldr	r3, [r4, #0]
 800b0fc:	b103      	cbz	r3, 800b100 <_fstat_r+0x1c>
 800b0fe:	602b      	str	r3, [r5, #0]
 800b100:	bd38      	pop	{r3, r4, r5, pc}
 800b102:	bf00      	nop
 800b104:	200009c0 	.word	0x200009c0

0800b108 <_isatty_r>:
 800b108:	b538      	push	{r3, r4, r5, lr}
 800b10a:	4c06      	ldr	r4, [pc, #24]	; (800b124 <_isatty_r+0x1c>)
 800b10c:	2300      	movs	r3, #0
 800b10e:	4605      	mov	r5, r0
 800b110:	4608      	mov	r0, r1
 800b112:	6023      	str	r3, [r4, #0]
 800b114:	f7fa f86c 	bl	80051f0 <_isatty>
 800b118:	1c43      	adds	r3, r0, #1
 800b11a:	d102      	bne.n	800b122 <_isatty_r+0x1a>
 800b11c:	6823      	ldr	r3, [r4, #0]
 800b11e:	b103      	cbz	r3, 800b122 <_isatty_r+0x1a>
 800b120:	602b      	str	r3, [r5, #0]
 800b122:	bd38      	pop	{r3, r4, r5, pc}
 800b124:	200009c0 	.word	0x200009c0

0800b128 <_lseek_r>:
 800b128:	b538      	push	{r3, r4, r5, lr}
 800b12a:	4c07      	ldr	r4, [pc, #28]	; (800b148 <_lseek_r+0x20>)
 800b12c:	4605      	mov	r5, r0
 800b12e:	4608      	mov	r0, r1
 800b130:	4611      	mov	r1, r2
 800b132:	2200      	movs	r2, #0
 800b134:	6022      	str	r2, [r4, #0]
 800b136:	461a      	mov	r2, r3
 800b138:	f7fa f865 	bl	8005206 <_lseek>
 800b13c:	1c43      	adds	r3, r0, #1
 800b13e:	d102      	bne.n	800b146 <_lseek_r+0x1e>
 800b140:	6823      	ldr	r3, [r4, #0]
 800b142:	b103      	cbz	r3, 800b146 <_lseek_r+0x1e>
 800b144:	602b      	str	r3, [r5, #0]
 800b146:	bd38      	pop	{r3, r4, r5, pc}
 800b148:	200009c0 	.word	0x200009c0

0800b14c <__malloc_lock>:
 800b14c:	4770      	bx	lr

0800b14e <__malloc_unlock>:
 800b14e:	4770      	bx	lr

0800b150 <_read_r>:
 800b150:	b538      	push	{r3, r4, r5, lr}
 800b152:	4c07      	ldr	r4, [pc, #28]	; (800b170 <_read_r+0x20>)
 800b154:	4605      	mov	r5, r0
 800b156:	4608      	mov	r0, r1
 800b158:	4611      	mov	r1, r2
 800b15a:	2200      	movs	r2, #0
 800b15c:	6022      	str	r2, [r4, #0]
 800b15e:	461a      	mov	r2, r3
 800b160:	f7f9 fff6 	bl	8005150 <_read>
 800b164:	1c43      	adds	r3, r0, #1
 800b166:	d102      	bne.n	800b16e <_read_r+0x1e>
 800b168:	6823      	ldr	r3, [r4, #0]
 800b16a:	b103      	cbz	r3, 800b16e <_read_r+0x1e>
 800b16c:	602b      	str	r3, [r5, #0]
 800b16e:	bd38      	pop	{r3, r4, r5, pc}
 800b170:	200009c0 	.word	0x200009c0

0800b174 <_init>:
 800b174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b176:	bf00      	nop
 800b178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b17a:	bc08      	pop	{r3}
 800b17c:	469e      	mov	lr, r3
 800b17e:	4770      	bx	lr

0800b180 <_fini>:
 800b180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b182:	bf00      	nop
 800b184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b186:	bc08      	pop	{r3}
 800b188:	469e      	mov	lr, r3
 800b18a:	4770      	bx	lr
